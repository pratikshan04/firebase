create or replace PROCEDURE GET_ITEM_DETAILS_IN_USE
(
    VAR_ITEM_PRICE_ID IN NUMBER,
--    VAR_SUBSETID IN NUMBER,
--    VAR_GENERAL_SUBSETID IN NUMBER,
    ITEM_DATA OUT SYS_REFCURSOR,
    ITEM_IMAGES OUT SYS_REFCURSOR,
    ITEM_ATTRIBUTES OUT SYS_REFCURSOR,
    ITEM_DOCUMENTS OUT SYS_REFCURSOR,
    PRODUCT_DATA OUT SYS_REFCURSOR,
    LINKED_ITEMS OUT SYS_REFCURSOR,
    QUERY_RESPONSE OUT NUMBER
)
IS
V_PRODUCT_ID NUMBER;
V_LOC_PRODUCT_ID NUMBER;
V_ITEM_ID NUMBER;
V_LOC_ITEM_ID NUMBER;
V_SUBSET_ID NUMBER;

TEMP_QUERY VARCHAR2(5000);


BEGIN

QUERY_RESPONSE :=1;
SELECT ITEM_ID, LOC_ITEM_ID, PRODUCT_ID,SUBSET_ID INTO V_ITEM_ID, V_LOC_ITEM_ID, V_PRODUCT_ID , V_SUBSET_ID
FROM ITEM_DETAILS_MV WHERE ITEM_PRICE_ID = VAR_ITEM_PRICE_ID;

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:-----SELECT ITEM_ID, LOC_ITEM_ID, PRODUCT_ID FROM ITEM_DETAILS_MV WHERE ITEM_PRICE_ID = '||VAR_ITEM_PRICE_ID);

 

  BEGIN
SELECT LOC_PRODUCT_ID INTO V_LOC_PRODUCT_ID FROM LOC_PRODUCTS WHERE PRODUCT_ID = V_PRODUCT_ID AND LOCALE_ID=1;

 EXCEPTION
      -- IF NOT FOUND SETTING VFOUNDFLAG TO 0
    WHEN no_data_found THEN
      V_LOC_PRODUCT_ID := 0;
    WHEN OTHERS THEN
      V_LOC_PRODUCT_ID := 0;
      END;

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:-----SELECT LOC_PRODUCT_ID FROM LOC_PRODUCTS WHERE PRODUCT_ID = '||V_PRODUCT_ID ||'AND LOCALE_ID=1');

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_DATA----->SELECT ITEM_ID, ITEM_PRICE_ID, BRAND_NAME, BRAND_IMAGE, PART_NUMBER,ALT_PART_NUMBER1,COMPETITOR_PART_NUMBER,MANUFACTURER_PART_NUMBER, UPC, SHORT_DESC, 
    ITEM_MARKETING_DESC,ITEM_FEATURES, LONG_DESC1, LONG_DESC2, META_DESC, META_KEYWORD, PAGE_TITLE, NET_PRICE, PACK_DESC, SALES_UOM, IMAGE_NAME, IMAGE_TYPE, NOTES,WEIGHT,WEIGHT_UOM
    FROM ITEM_DETAILS_MV WHERE ITEM_PRICE_ID ='||VAR_ITEM_PRICE_ID);


OPEN ITEM_DATA FOR
SELECT  IM.ITEM_ID,
  IM.QTY_AVAILABLE,
  IP.ITEM_PRICE_ID,
  B.BRAND_ID,
  B.BRAND_NAME,
  B.BRAND_IMAGE,
  M.MANUFACTURER_NAME,
  M.MANUFACTURER_ID,
  M.MANUFACTURER_LOGO,
  IM.PART_NUMBER,
  IM.ALT_PART_NUMBER1,
  IM.ALT_PART_NUMBER2,
  IM.COMPETITOR_PART_NUMBER,
  IP.CUSTOMER_PART_NUMBER,
  IM.MANUFACTURER_PART_NUMBER,
  IM.UPC,
  NVL(PRODUCT_ID,0) PRODUCT_ID, 
  LIM.SHORT_DESC,
  LIM.ITEM_MARKETING_DESC,
  LIM.ITEM_FEATURES,
  LIM.LONG_DESC1,
  LIM.LONG_DESC2,
  LIM.META_DESC,
  LIM.META_KEYWORD,
  LIM.PAGE_TITLE,
  LIM.INVOICE_DESC,
  IP.CLEARANCE,
 CASE
      WHEN NVL(IP.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
IP.NET_PRICE,
IP.IMAP_PRICE,
ip.package_flag,
IP.PACKAGE_QTY,
IP.DISPLAY_PRICING,
IM.WEIGHT,
IM.WEIGHT_UOM,
NVL(IP.PACK_DESC,IM.PACK_DESC) PACK_DESC,
NVL(IP.SALES_UOM,IM.SALES_UOM) SALES_UOM,
NVL(IP.UNSPSC,IM.UNSPSC) UNSPSC,
NVL(IP.IMAP,IM.IMAP_PRICE) IMAP,
  IP.SALES_QTY,
  IP.MATERIAL_GROUP,
  IP.OVERRIDE_PRICE_RULE,
  II.IMAGE_NAME,
  II.IMAGE_TYPE,
  INS.NOTES,
  IM.KEYWORDS,
  ICVV.FIELD_VALUE COLLECTION
  FROM ITEM_MASTER IM, LOC_ITEM_MASTER LIM, ITEM_PRICES IP, BRANDS B, MANUFACTURER M, ITEM_IMAGES II, ITEM_NOTES INS,ITEM_CF_VALUES_VIEW ICVV 
  WHERE IP.ITEM_PRICE_ID=VAR_ITEM_PRICE_ID AND IP.ITEM_ID=IM.ITEM_ID AND NVL(IM.DISPLAY_ONLINE,-1)='Y'  AND  FIELD_NAME(+)='Collections'
  AND ICVV.ITEM_ID(+) = IM.ITEM_ID AND IM.ITEM_ID=LIM.ITEM_ID(+) AND LIM.LOCALE_ID(+)=1 AND LIM.ITEM_IMAGE_ID=II.ITEM_IMAGE_ID(+) 
  AND IM.MANUFACTURER_ID=M.MANUFACTURER_ID AND IM.BRAND_ID=B.BRAND_ID AND IP.NOTE_ID=INS.NOTE_ID(+);    


DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_IMAGES----->SELECT ''ITEM'' IMAGE_FROM,II.IMAGE_NAME IMAGE_NAME,II.IMAGE_TYPE IMAGE_TYPE FROM ITEM_IMAGE_LIST IIL, ITEM_IMAGES II 
    WHERE IIL.ITEM_ID = '||V_ITEM_ID||' AND II.ITEM_IMAGE_ID (+) = IIL.ITEM_IMAGES_ID UNION SELECT ''PRODUCT'' IMAGE_FROM, PI.IMAGE_NAME IMAGE_NAME, 
    PI.IMAGE_TYPE IMAGE_TYPE FROM PRODUCT_IMAGE_LIST PIL, PRODUCT_IMAGES PI WHERE PIL.PRODUCT_ID='||V_PRODUCT_ID||' AND PI.PRODUCT_IMAGES_ID(+) = PIL.PRODUCT_IMAGES_ID' );    

  
open ITEM_IMAGES for
    SELECT 'ITEM' IMAGE_FROM,II.IMAGE_NAME IMAGE_NAME,II.IMAGE_TYPE IMAGE_TYPE,IIL.CAPTION  FROM ITEM_IMAGE_LIST IIL, ITEM_IMAGES II 
    WHERE IIL.ITEM_ID = V_ITEM_ID 
    AND II.ITEM_IMAGE_ID (+) = IIL.ITEM_IMAGES_ID

  UNION

    SELECT 'PRODUCT' IMAGE_FROM, PI.IMAGE_NAME IMAGE_NAME, PI.IMAGE_TYPE IMAGE_TYPE,PI.IMAGE_NAME CAPTION  FROM PRODUCT_IMAGE_LIST PIL, 
    PRODUCT_IMAGES PI WHERE PIL.PRODUCT_ID=V_PRODUCT_ID AND PI.PRODUCT_IMAGES_ID(+) = PIL.PRODUCT_IMAGES_ID;
    
   
   DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_DOCUMENTS----->SELECT ''ITEM'' DOC_FROM, IDOC.DOCUMENT_NAME DOCUMENT_NAME, IDOC.DOCUMENT_TYPE DOCUMENT_TYPE FROM ITEM_DOCUMENTS_LIST IDL, 
    ITEM_DOCUMENTS IDOC WHERE IDL.LOC_ITEM_ID ='||V_LOC_ITEM_ID||' and IDOC.ITEM_DOCUMENT_ID (+) = IDL.ITEM_DOCUMENT_ID 
    UNION 
    SELECT ''PRODUCT'' DOC_FROM, PD.DOC_NAME DOCUMENT_NAME,PD.DOC_TYPE DOCUMENT_TYPE FROM PRODUCT_DOCUMENTS_LIST PDL, 
    PRODUCT_DOCUMENTS PD WHERE PDL.LOC_PRODUCT_ID ='||V_LOC_PRODUCT_ID||' AND PD.PRODUCT_DOCUMENT_ID = PDL.PRODUCT_DOUMENT_ID' );    

OPEN ITEM_DOCUMENTS FOR
    SELECT 'ITEM' DOC_FROM, IDOC.DOCUMENT_NAME DOCUMENT_NAME, IDOC.DOCUMENT_TYPE DOCUMENT_TYPE,nvl2(IDL.CAPTION,IDL.CAPTION,IDOC.DOCUMENT_NAME) DOCUMENT_DESC, IDC.ITEM_DOCUMENTS_CATEGORY_NAME FROM ITEM_DOCUMENTS_LIST IDL, 
    ITEM_DOCUMENTS IDOC, ITEM_DOCUMENTS_CATEGORY IDC WHERE IDL.LOC_ITEM_ID = V_LOC_ITEM_ID and IDOC.ITEM_DOCUMENT_ID = IDL.ITEM_DOCUMENT_ID AND IDC.ITEM_DOCUMENTS_CATEGORY_ID =  IDL.ITEM_DOC_CATEGORY_ID (+)
  UNION
    SELECT 'PRODUCT' DOC_FROM, PD.DOC_NAME DOCUMENT_NAME,PD.DOC_TYPE DOCUMENT_TYPE,PDL.PRODUCT_DOC_DESC DOCUMENT_DESC,''  ITEM_DOCUMENTS_CATEGORY_NAME  FROM PRODUCT_DOCUMENTS_LIST PDL, 
    PRODUCT_DOCUMENTS PD WHERE PDL.LOC_PRODUCT_ID =V_LOC_PRODUCT_ID AND PD.PRODUCT_DOCUMENT_ID = PDL.PRODUCT_DOUMENT_ID;

        

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--PRODUCT_DATA ----->SELECT PRODUCT_NAME,PRODUCT_MARKETING_DESC,PRODUCT_DESC1,PRODUCT_DESC2,PRODUCT_FEATURES,PI.IMAGE_NAME, PI.IMAGE_TYPE
  FROM LOC_PRODUCTS LP, PRODUCT_IMAGES PI WHERE LP.LOC_PRODUCT_ID ='||V_LOC_PRODUCT_ID||' AND PI.PRODUCT_IMAGES_ID (+)= LP.PRODUCT_IMAGES_ID' );    

OPEN PRODUCT_DATA FOR
  SELECT PRODUCT_NAME,PRODUCT_MARKETING_DESC,PRODUCT_DESC1,PRODUCT_DESC2,PRODUCT_FEATURES,PI.IMAGE_NAME, PI.IMAGE_TYPE
  FROM LOC_PRODUCTS LP, PRODUCT_IMAGES PI WHERE LP.LOC_PRODUCT_ID = V_LOC_PRODUCT_ID
  AND PI.PRODUCT_IMAGES_ID (+)= LP.PRODUCT_IMAGES_ID;
  
  
  DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_ATTRIBUTES ----->SELECT IAV.ITEM_ID, IAV.CATEGORY_ATTRIBUTES_ID ,LA.ATTRIBUTE_NAME, LAV.ATTRIBUTE_VALUE, 
        LAU.ATTRIBUTE_UOM, LAVG.ATTRIBUTE_VALUE_GROUP FROM ITEM_ATTRIBUTE_VALUES IAV, 
        LOC_ATTRIBUTE_VALUES LAV, LOC_ATTRIBUTE_UOMS LAU,
      LOC_ATTRIBUTE_VALUE_GROUPS LAVG, LOC_ATTRIBUTES LA
    WHERE IAV.ITEM_ID ='||V_ITEM_ID||'  AND IAV.LOCALE_ID = 1
    and IAV.STATUS = ''A''
    AND IAV.LOC_ATTRIBUTE_ID = LA.LOC_ATTRIBUTE_ID (+)
    AND IAV.LOC_ATTRIBUTE_VALUE_ID = LAV.LOC_ATTRIBUTE_VALUE_ID (+)
    AND IAV.LOC_ATTRIBUTE_UOM_ID = LAU.LOC_ATTRIBUTE_UOM_ID (+)
    AND IAV.LOC_ATTRIBUTE_VALUE_GROUP_ID = LAVG.LOC_ATTRIBUTE_VALUE_GROUP_ID (+)' );    

OPEN ITEM_ATTRIBUTES FOR

  SELECT IAV.ITEM_ID,
  IAV.CATEGORY_ATTRIBUTES_ID ,
  LA.ATTRIBUTE_NAME,
  LAV.ATTRIBUTE_VALUE,
  LAU.ATTRIBUTE_UOM,
  LAVG.ATTRIBUTE_VALUE_GROUP,
  CA.DISP_SEQ
FROM ITEM_ATTRIBUTE_VALUES IAV,
  LOC_ATTRIBUTE_VALUES LAV,
  LOC_ATTRIBUTE_UOMS LAU,
  LOC_ATTRIBUTE_VALUE_GROUPS LAVG,
  LOC_ATTRIBUTES LA,
  ITEM_CLASSIFICATION ITC,
  CATEGORY_ATTRIBUTES CA
WHERE ITC.ITEM_ID                    = V_ITEM_ID
AND ITC.DEFAULT_CATEGORY             = 'Y'
AND IAV.ITEM_ID                      = ITC.ITEM_ID
AND IAV.LOCALE_ID                    = 1
--AND CA.TAXONOMY_TREE_ID              = ITC.TAXONOMY_TREE_ID
AND IAV.CATEGORY_ATTRIBUTES_ID       = CA.CATEGORY_ATTRIBUTES_ID(+)
AND IAV.LOC_ATTRIBUTE_ID             = LA.LOC_ATTRIBUTE_ID (+)
AND IAV.LOC_ATTRIBUTE_VALUE_ID       = LAV.LOC_ATTRIBUTE_VALUE_ID (+)
AND IAV.LOC_ATTRIBUTE_UOM_ID         = LAU.LOC_ATTRIBUTE_UOM_ID (+)
AND IAV.LOC_ATTRIBUTE_VALUE_GROUP_ID = LAVG.LOC_ATTRIBUTE_VALUE_GROUP_ID (+)
ORDER BY CA.DISP_SEQ ASC;
    
    DBMS_OUTPUT.PUT_LINE('Linked Item ----->  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, 
          IDMV.IMAGE_TYPE,IDMV.PAGE_TITLE
        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV
        WHERE IL.LINKED_TO_ITEM_ID = '||V_ITEM_ID
       ||' AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
        AND IDMV.ITEM_ID = IL.ITEM_ID
             AND IDMV.SUBSET_ID = '||V_SUBSET_ID); 

OPEN LINKED_ITEMS FOR
  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.ITEM_PRICE_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, IP.SALES_QTY,IP.NET_PRICE,
          IDMV.IMAGE_TYPE,IDMV.PAGE_TITLE
        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV,ITEM_PRICES IP
        WHERE IL.LINKED_TO_ITEM_ID = V_ITEM_ID
        AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
        AND IDMV.ITEM_ID = IL.ITEM_ID
        AND IDMV.SUBSET_ID = V_SUBSET_ID
        AND IP.ITEM_PRICE_ID = IDMV.ITEM_PRICE_ID
		AND ILT.STATUS = 'Y';

--  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, 
--          IDMV.IMAGE_TYPE, IP.NET_PRICE, IP.SALES_UOM
--        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV, ITEM_PRICES IP
--        WHERE IL.LINKED_TO_ITEM_ID = V_ITEM_ID
--        AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
--        AND IDMV.ITEM_ID = IL.ITEM_ID
--        AND IDMV.SUBSET_ID = VAR_SUBSETID
--        AND IP.ITEM_PRICE_ID = IDMV.ITEM_PRICE_ID
--  
--  UNION
--  
--  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, 
--          IDMV.IMAGE_TYPE, IP.NET_PRICE, IP.SALES_UOM
--        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV, ITEM_PRICES IP
--        WHERE IL.LINKED_TO_ITEM_ID = V_ITEM_ID
--        AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
--        AND IDMV.ITEM_ID = IL.ITEM_ID
--        AND IDMV.SUBSET_ID = VAR_GENERAL_SUBSETID
--        AND IP.ITEM_PRICE_ID = IDMV.ITEM_PRICE_ID
--        AND IDMV.ITEM_ID NOT IN
--        (SELECT ITEM_ID FROM ITEM_DETAILS_MV WHERE SUBSET_ID=VAR_SUBSETID)  ;
EXCEPTION WHEN
  NO_DATA_FOUND THEN
  QUERY_RESPONSE :=0;

END ;

-----------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE GET_FEATURED_PRODUCTS_IN_USE(
    VAR_SUBSETID         IN NUMBER,
    VAR_GENERAL_SUBSETID IN NUMBER,
    FEATURED_PRODUCTS OUT SYS_REFCURSOR,
    QUERY_RESPONSE OUT NUMBER )
IS
  FP_QRY  VARCHAR2(2000);
  FP_QRY2 VARCHAR2(2000);
BEGIN
  QUERY_RESPONSE := 1;
  IF VAR_SUBSETID >0 THEN
    FP_QRY       := 'SELECT ITEM_ID,ITEM_PRICE_ID,PART_NUMBER,MANUFACTURER_PART_NUMBER,BRAND_NAME,        
SHORT_DESC,NET_PRICE,SALES_UOM,PACK_DESC,IMAGE_NAME,UPC,IMAGE_TYPE,MANUFACTURER_NAME,PAGE_TITLE,MIN_ORDER_QTY,ORDER_QTY_INTERVAL from item_details_mv where item_price_id in 
(select item_price_id from item_prices where is_featured_product =''Y'' and subset_id =' || VAR_SUBSETID ||')';
  END IF;
  IF VAR_GENERAL_SUBSETID>0 THEN
    FP_QRY2             := 'select ITEM_ID,ITEM_PRICE_ID,PART_NUMBER,MANUFACTURER_PART_NUMBER,BRAND_NAME,                
SHORT_DESC,NET_PRICE,SALES_UOM,PACK_DESC,IMAGE_NAME,UPC,IMAGE_TYPE,MANUFACTURER_NAME,PAGE_TITLE,MIN_ORDER_QTY,ORDER_QTY_INTERVAL from item_details_mv idmv where idmv.item_price_id in              
(select item_price_id from item_prices where is_featured_product =''Y'' and subset_id ='|| VAR_GENERAL_SUBSETID|| ') and item_price_id not in (select item_price_id from item_prices where is_featured_product =''Y'' and subset_id =' || VAR_SUBSETID || ')';
    IF LENGTH(FP_QRY)    >0 THEN
      FP_QRY            := FP_QRY || ' UNION ' || FP_QRY2;
    ELSE
      FP_QRY:= FP_QRY2;
    END IF;
  END IF;
  dbms_output.put_line('FINAL QUERY:  ' || FP_QRY);
  OPEN FEATURED_PRODUCTS FOR FP_QRY;
  IF FEATURED_PRODUCTS%NOTFOUND THEN
    QUERY_RESPONSE :=0;
  END IF;
END GET_FEATURED_PRODUCTS_IN_USE;

-----------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE ITEMS_COMPARE_IN_USE(
    VAR_ITEM_PRICE_ID IN NUM_ARRAY,
    ITEM_DATA OUT SYS_REFCURSOR,
    ITEM_ATTRIBUTES OUT SYS_REFCURSOR,
    ATTR_NAMES OUT SYS_REFCURSOR )
IS
  QRY_STR       VARCHAR2(1000);
  I             NUMBER;
  ITEM_QRY      VARCHAR2(2000);
  ATTR_VAL_QRY  VARCHAR2(2000);
  ATTR_NAME_QRY VARCHAR2(2000);
BEGIN
  FOR I IN 1 .. VAR_ITEM_PRICE_ID.COUNT
  LOOP
    IF LENGTH(QRY_STR) >0 THEN
      QRY_STR         := QRY_STR || ', ' || VAR_ITEM_PRICE_ID(I);
    ELSE
      QRY_STR := VAR_ITEM_PRICE_ID(I);
    END IF;
  END LOOP;
  ITEM_QRY :=
  'SELECT IM.ITEM_ID,  
IP.ITEM_PRICE_ID,  
B.BRAND_NAME,  
B.BRAND_IMAGE,  
M.MANUFACTURER_NAME,  
IM.PART_NUMBER,  
IM.ALT_PART_NUMBER1,
IM.ALT_PART_NUMBER2,
IM.COMPETITOR_PART_NUMBER,  
IP.CUSTOMER_PART_NUMBER,  
IM.MANUFACTURER_PART_NUMBER,  
IM.UPC,  
LIM.SHORT_DESC,  
LIM.ITEM_MARKETING_DESC,  
LIM.ITEM_FEATURES,  
LIM.LONG_DESC1,  
LIM.LONG_DESC2,  
LIM.META_DESC,  
LIM.META_KEYWORD,  
LIM.PAGE_TITLE,  
CASE    
WHEN NVL(IP.MIN_ORDER_QTY,1) < 2    
THEN NVL(IM.MIN_ORDER_QTY,1)    
WHEN NVL(IP.MIN_ORDER_QTY,1) > 1    
THEN NVL(IP.MIN_ORDER_QTY,1)  
END MIN_ORDER_QTY,  
CASE    
WHEN NVL(IP.ORDER_QTY_INTERVAL,1) < 2    
THEN NVL(IM.ORDER_QTY_INTERVAL,1)    
WHEN NVL(IP.ORDER_QTY_INTERVAL,1) > 1    
THEN NVL(IP.ORDER_QTY_INTERVAL,1)  
END ORDER_QTY_INTERVAL,  
IP.OVERRIDE_PRICE_RULE,  
IP.NET_PRICE,  
ip.package_flag,  
IP.PACKAGE_QTY,  
IP.DISPLAY_PRICING,  
NVL(IP.PACK_DESC,IM.PACK_DESC) PACK_DESC,  
NVL(IP.SALES_UOM,IM.SALES_UOM) SALES_UOM,  
NVL(IP.UNSPSC,IM.UNSPSC) UNSPSC,  
NVL(IP.IMAP,IM.IMAP_PRICE) IMAP,  
IP.SALES_QTY,  
IP.MATERIAL_GROUP,  
II.IMAGE_NAME,  
II.IMAGE_TYPE,  
INS.NOTES,  
IM.KEYWORDS
FROM ITEM_MASTER IM,  
LOC_ITEM_MASTER LIM,  
ITEM_PRICES IP,  
BRANDS B,  
MANUFACTURER M,  
ITEM_IMAGES II,  
ITEM_NOTES INS
WHERE IP.ITEM_PRICE_ID IN ('
  || QRY_STR ||')
AND IP.ITEM_ID        =IM.ITEM_ID
AND IM.ITEM_ID        =LIM.ITEM_ID(+)
AND LIM.LOCALE_ID(+)  =1
AND LIM.ITEM_IMAGE_ID =II.ITEM_IMAGE_ID(+)
AND IM.MANUFACTURER_ID=M.MANUFACTURER_ID
AND IM.BRAND_ID       =B.BRAND_ID
AND IP.NOTE_ID        =INS.NOTE_ID(+) ORDER BY ITEM_ID';
  OPEN ITEM_DATA FOR ITEM_QRY;
  ATTR_VAL_QRY :='  SELECT IAV.ITEM_ID, IAV.CATEGORY_ATTRIBUTES_ID ,LA.ATTRIBUTE_NAME, LAV.ATTRIBUTE_VALUE, LAU.ATTRIBUTE_UOM,     
LAVG.ATTRIBUTE_VALUE_GROUP FROM ITEM_ATTRIBUTE_VALUES IAV, LOC_ATTRIBUTE_VALUES LAV, LOC_ATTRIBUTE_UOMS LAU,      
LOC_ATTRIBUTE_VALUE_GROUPS LAVG, LOC_ATTRIBUTES LA    
WHERE IAV.ITEM_ID IN (SELECT ITEM_ID FROM ITEM_DETAILS_MV WHERE ITEM_PRICE_ID IN ('|| QRY_STR ||' ))    
AND IAV.LOCALE_ID = 1    
AND IAV.LOC_ATTRIBUTE_ID = LA.LOC_ATTRIBUTE_ID (+)    
AND IAV.LOC_ATTRIBUTE_VALUE_ID = LAV.LOC_ATTRIBUTE_VALUE_ID (+)    
AND IAV.LOC_ATTRIBUTE_UOM_ID = LAU.LOC_ATTRIBUTE_UOM_ID (+)    
AND IAV.LOC_ATTRIBUTE_VALUE_GROUP_ID = LAVG.LOC_ATTRIBUTE_VALUE_GROUP_ID (+) order by iav.item_id';
  OPEN ITEM_ATTRIBUTES FOR ATTR_VAL_QRY;
  ATTR_NAME_QRY :='SELECT LOC_ATTRIBUTE_ID,ATTRIBUTE_ID, ATTRIBUTE_NAME FROM LOC_ATTRIBUTES WHERE LOC_ATTRIBUTE_ID IN (    
SELECT DISTINCT IAV.LOC_ATTRIBUTE_ID FROM ITEM_ATTRIBUTE_VALUES IAV WHERE ITEM_ID IN (SELECT ITEM_ID FROM ITEM_DETAILS_MV WHERE ITEM_PRICE_ID IN ('|| QRY_STR ||' )))';
  OPEN ATTR_NAMES FOR ATTR_NAME_QRY;
  DBMS_OUTPUT.PUT_LINE('qry_str : ' || QRY_STR);
  DBMS_OUTPUT.PUT_LINE('ITEM_qry : ' || ITEM_QRY);
  DBMS_OUTPUT.PUT_LINE('ATTR_VAL_QRY: ' || ATTR_VAL_QRY);
  dbms_output.put_line('ATTR NAME QRY : ' || ATTR_NAME_QRY);
END ;


-----------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------


