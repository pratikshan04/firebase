CREATE TABLE "BRANCH_LIST" 
   ( "BRANCH_LIST_ID" NUMBER NOT NULL ENABLE, 
 "BRANCH_ID" VARCHAR2(20 BYTE), 
 "BRANCH_NAME" VARCHAR2(100 BYTE), 
 "ADDRESS" VARCHAR2(50 BYTE), 
 "CITY" VARCHAR2(50 BYTE), 
 "STATE" VARCHAR2(50 BYTE), 
 "COUNTRY" VARCHAR2(50 BYTE), 
 "POSTAL_CODE" VARCHAR2(20 BYTE), 
 "LONGITUDE" VARCHAR2(50 BYTE), 
 "LATITUDE" VARCHAR2(20 BYTE), 
 "UPDATED_DATETIME" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
 
  -- 
  
   CREATE TABLE "DEFAULT_FILTER_ATTRIBUTE" 
   ( "ATTR_NAME" VARCHAR2(500 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

  
-----------------------------------------------------------------------------------------------------------------------------------------------------------

  
  CREATE OR REPLACE FORCE VIEW WAREHOUSE_CF_VALUES_VIEW AS 
  SELECT W.WAREHOUSE_ID,
    CF.FIELD_NAME,
    CF.FIELD_DATA_TYPE,
    CASE
      WHEN UPPER(CF.FIELD_DATA_TYPE)='TXT'
      OR UPPER(CF.FIELD_DATA_TYPE)  ='BOL'
      OR UPPER(CF.FIELD_DATA_TYPE)  ='DT'
      THEN LCFV.TEXT_FIELD_VALUE
      ELSE TO_CHAR(LCFV.NUMERIC_FIELD_VALUE)
    END FILED_VALUE
  FROM WAREHOUSE W,
    WAREHOUSE_CUSTOM_FIELD_VALUES WCFV,
    CUSTOM_FIELDS CF,
    LOC_CUSTOM_FIELD_VALUES LCFV
  WHERE W.WAREHOUSE_ID              = WCFV.WAREHOUSE_ID
  AND WCFV.CUSTOM_FIELD_ID          = CF.CUSTOM_FIELD_ID
  AND LCFV.LOC_CUSTOM_FIELD_VALUE_ID=WCFV.LOC_CUSTOM_FIELD_VALUE_ID;

  
-----------------------------------------------------------------------------------------------------------------------------------------------------------

  
CREATE OR REPLACE FORCE VIEW MFR_CF_VALUES_VIEW
AS
  SELECT M.MANUFACTURER_ID,
    M.MANUFACTURER_NAME,
    CF.FIELD_NAME,
    CF.FIELD_DATA_TYPE,
    CASE
      WHEN UPPER(CF.FIELD_DATA_TYPE)='TXT'
      OR UPPER(CF.FIELD_DATA_TYPE)  ='BOL'
      OR UPPER(CF.FIELD_DATA_TYPE)  ='DT'
      THEN LCFV.TEXT_FIELD_VALUE
      ELSE TO_CHAR(LCFV.NUMERIC_FIELD_VALUE)
    END FIELD_VALUE
  FROM MANUFACTURER M,
    MANF_CUSTOM_FIELD_VALUES MCFV,
    CUSTOM_FIELDS CF,
    LOC_CUSTOM_FIELD_VALUES LCFV
  WHERE NVL(M.STATUS,-1)           !='D'
  AND M.MANUFACTURER_ID             =MCFV.MANUFACTURER_ID
  AND MCFV.CUSTOM_FIELD_ID          =CF.CUSTOM_FIELD_ID
  AND LCFV.LOC_CUSTOM_FIELD_VALUE_ID=MCFV.LOC_CUSTOM_FIELD_VALUE_ID;


-----------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FORCE VIEW SOLR_CATALOG_NAV_V2  
AS
   WITH T3 AS
  (SELECT TT.TAXONOMY_TREE_ID,
    TT.LEVEL_NUMBER,
    TT.UPDATED_DATETIME LAST_UPDATE,
    TT.TAXONOMY_ID,
    TT.CATEGORY_NAME,
    SUBSTR(SYS_CONNECT_BY_PATH(TT.CATEGORY_NAME, ' > '), 4) PATH,
    SUBSTR(SYS_CONNECT_BY_PATH(TT.CATEGORY_NAME
    ||'{'
    ||TT.TAXONOMY_TREE_ID
    ||'}', ' > '), 4) SOLR_PATH,
    TT.DISP_SEQ,
    TT.CATEGORY_DESC,
    TT.BANNER_ID,
    TT.IMAGE_NAME,
    TT.VALUE_LIST_ID,
    TT.PARENT_TT_ID,
    TT.TOP_BANNER_ID,
    TT.LEFT_BANNER_ID,
    TT.RIGHT_BANNER_ID,
    TT.BOTTOM_BANNER_ID,
    TT.STATIC_PAGE_ID
  FROM TAXONOMY_TREE TT,
    TAXONOMIES T
  WHERE NVL(T.CIMM_OR_ES,'CIMM') ='CIMM'
  AND T.TAXONOMY_ID              =TT.TAXONOMY_ID
  AND T.TAXONOMY_NAME           IN
    (SELECT SP.CONFIG_VALUE
    FROM SYSTEM_PARAMETERS SP
    WHERE SP.CONFIG_KEY='ACTIVE_TAXONOMY_VERSION'
    )
    START WITH TT.LEVEL_NUMBER                   =1
    CONNECT BY NOCYCLE PRIOR TT.TAXONOMY_TREE_ID = TT.PARENT_TT_ID
  ORDER SIBLINGS BY DISP_SEQ
  ),
  T1 AS
  (SELECT TO_NUMBER(CONFIG_VALUE) GENERAL_CATALOGID
  FROM SYSTEM_PARAMETERS
  WHERE CONFIG_KEY = 'GENERALCATALOGID'
  ),
  T2 AS
  (SELECT DISTINCT BC2.SUBSET_ID,
    T1.GENERAL_CATALOGID
  FROM BUYING_COMPANY BC2,
    T1
  WHERE BC2.SUBSET_ID          IS NOT NULL
  AND BC2.GENERAL_CATALOG_ACCESS='Y'
  ),
  T4 AS
  (SELECT DISTINCT BC1.SUBSET_ID
  FROM BUYING_COMPANY BC1
  WHERE BC1.SUBSET_ID          IS NOT NULL
  AND BC1.GENERAL_CATALOG_ACCESS='N'
  ),
  T8 AS
  (SELECT DISTINCT SEARCH_IDX,
    TAXONOMY_TREE_ID
  FROM
    ( SELECT DISTINCT 'PH_SEARCH_'
      ||T2.GENERAL_CATALOGID
      ||'_'
      ||T2.SUBSET_ID SEARCH_IDX,
      IC.TAXONOMY_TREE_ID
    FROM ITEM_CLASSIFICATION IC,
      T2,
      ITEM_PRICES IP3,
      ITEM_MASTER IM
    WHERE IC.ITEM_ID      =IP3.ITEM_ID
    AND IP3.STATUS        ='A'
    AND IP3.SUBSET_ID    IN (T2.SUBSET_ID)
    AND T2.SUBSET_ID!     =T2.GENERAL_CATALOGID
    AND IM.ITEM_ID        = IP3.ITEM_ID
    AND IM.DISPLAY_ONLINE ='Y'
    AND IM.ACTIVE         = 'Y'
    UNION ALL
    SELECT DISTINCT 'PH_SEARCH_'
      ||T2.GENERAL_CATALOGID
      ||'_'
      ||T2.SUBSET_ID SEARCH_IDX,
      IC.TAXONOMY_TREE_ID
    FROM ITEM_CLASSIFICATION IC,
      T2,
      ITEM_PRICES IP3,
      ITEM_MASTER IM
    WHERE IC.ITEM_ID      =IP3.ITEM_ID
    AND IP3.STATUS        ='A'
    AND IP3.SUBSET_ID    IN (T2.GENERAL_CATALOGID)
    AND T2.SUBSET_ID!     =T2.GENERAL_CATALOGID
    AND IM.ITEM_ID        = IP3.ITEM_ID
    AND IM.DISPLAY_ONLINE ='Y'
    AND IM.ACTIVE         = 'Y'
    UNION ALL
    SELECT DISTINCT 'PH_SEARCH_'
      ||T1.GENERAL_CATALOGID SEARCH_IDX,
      IC.TAXONOMY_TREE_ID
    FROM T1 T1,
      ITEM_CLASSIFICATION IC,
      ITEM_PRICES IP3,
      ITEM_MASTER IM
    WHERE IC.ITEM_ID      =IP3.ITEM_ID
    AND IP3.SUBSET_ID     =T1.GENERAL_CATALOGID
    AND IP3.STATUS        ='A'
    AND IM.ITEM_ID        = IP3.ITEM_ID
    AND IM.DISPLAY_ONLINE ='Y'
    AND IM.ACTIVE         = 'Y'
    UNION ALL
    SELECT DISTINCT 'PH_SEARCH_'
      ||T4.SUBSET_ID SEARCH_IDX,
      IC.TAXONOMY_TREE_ID
    FROM T4 T4,
      ITEM_CLASSIFICATION IC,
      ITEM_PRICES IP1,
      ITEM_MASTER IM
    WHERE IC.ITEM_ID      =IP1.ITEM_ID
    AND IM.ITEM_ID        = IP1.ITEM_ID
    AND IM.DISPLAY_ONLINE ='Y'
    AND IM.ACTIVE         = 'Y'
    AND IP1.STATUS        ='A'
    AND IP1.SUBSET_ID    IN (T4.SUBSET_ID)
    AND IP1.SUBSET_ID!    =
      (SELECT T1.GENERAL_CATALOGID FROM T1
      )
    )
  ),
  T9 AS
  (SELECT DISTINCT SEARCH_IDX,
    TAXONOMY_TREE_ID
  FROM
    (SELECT T8.SEARCH_IDX,
      T3.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3
    WHERE T8.TAXONOMY_TREE_ID=T3.TAXONOMY_TREE_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID                      =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL8                                 IS NOT NULL
    AND T3.LEVEL_NUMBER!                           =8
    AND T12.TAXONOMY_TREE_ID                       =T3.LEVEL8
      CONNECT BY NOCYCLE PRIOR T12.TAXONOMY_TREE_ID=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID                      =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL7                                 IS NOT NULL
    AND T3.LEVEL_NUMBER!                           =7
    AND T12.TAXONOMY_TREE_ID                       =T3.LEVEL7
      CONNECT BY NOCYCLE PRIOR T12.TAXONOMY_TREE_ID=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID                      =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL6                                 IS NOT NULL
    AND T3.LEVEL_NUMBER!                           =6
    AND T12.TAXONOMY_TREE_ID                       =T3.LEVEL6
      CONNECT BY NOCYCLE PRIOR T12.TAXONOMY_TREE_ID=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID                      =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL5                                 IS NOT NULL
    AND T3.LEVEL_NUMBER!                           =5
    AND T12.TAXONOMY_TREE_ID                       =T3.LEVEL5
      CONNECT BY NOCYCLE PRIOR T12.TAXONOMY_TREE_ID=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID                      =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL4                                 IS NOT NULL
    AND T3.LEVEL_NUMBER!                           =4
    AND T12.TAXONOMY_TREE_ID                       =T3.LEVEL4
      CONNECT BY NOCYCLE PRIOR T12.TAXONOMY_TREE_ID=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID            =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL3                       IS NOT NULL
    AND T3.LEVEL_NUMBER!                 =3
    AND T12.TAXONOMY_TREE_ID             =T3.LEVEL3
      CONNECT BY NOCYCLE PRIOR T12.LEVEL3=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID            =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL2                       IS NOT NULL
    AND T3.LEVEL_NUMBER!                 =2
    AND T12.TAXONOMY_TREE_ID             =T3.LEVEL2
      CONNECT BY NOCYCLE PRIOR T12.LEVEL2=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID            =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL1                       IS NOT NULL
    AND T3.LEVEL_NUMBER!                 =1
    AND T12.TAXONOMY_TREE_ID             =T3.LEVEL1
      CONNECT BY NOCYCLE PRIOR T12.LEVEL1=T12.PARENT_TT_ID
    )
  )
SELECT T9.SEARCH_IDX,
  TT.TAXONOMY_TREE_ID,
  TT.CATEGORY_NAME,
  TT.LEVEL_NUMBER,
  PATH,
  TT.LAST_UPDATE,
  ROWNUM ID,
  NULL ACTION,
  T9.SEARCH_IDX
  ||'_'
  ||TT.TAXONOMY_TREE_ID KEY,
  TT.TAXONOMY_ID,
  --TRIM(SUBSTR(SOLR_PATH, 1, (INSTR(SOLR_PATH, '{', -1)-1))) SOLR_PATH,
  TRIM(SOLR_PATH) SOLR_PATH,
  TT.DISP_SEQ,
  TT.CATEGORY_DESC,
  TT.BANNER_ID,
  TT.IMAGE_NAME,
  TT.VALUE_LIST_ID,
  TT.PARENT_TT_ID,
  TT.TOP_BANNER_ID,
  TT.LEFT_BANNER_ID,
  TT.RIGHT_BANNER_ID,
  TT.BOTTOM_BANNER_ID,
  TT.STATIC_PAGE_ID
FROM T9,
  T3 TT
WHERE T9.TAXONOMY_TREE_ID=TT.TAXONOMY_TREE_ID ;
  
-----------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FORCE VIEW ITEM_DETAILS_MV
AS
  SELECT IM.ITEM_ID,
    IP.SUBSET_ID,
    IP.ITEM_PRICE_ID,
    IP.CUSTOMER_PART_NUMBER,
    LIM.LOC_ITEM_ID,
    IM.PRODUCT_ID,
    IM.BRAND_ID,
    B.BRAND_NAME,
    B.BRAND_IMAGE,
    M.MANUFACTURER_NAME,
    IM.PART_NUMBER,
    IM.ALT_PART_NUMBER1,
    IM.ALT_PART_NUMBER2,
    IM.COMPETITOR_PART_NUMBER,
    IM.MANUFACTURER_PART_NUMBER,
    IM.MANUFACTURER_ID,
    IM.UPC,
    IM.PACKAGE_QTY,
    IM.WEIGHT,
    IM.WEIGHT_UOM,
    IM.LENGTH,
    IM.LENGTH_UOM,
    IM.HEIGHT,
    IM.HEIGHT_UOM,
    IM.WIDTH,
    IM.WIDTH_UOM,
    LIM.LOCALE_ID,
    LIM.SHORT_DESC,
    LIM.LONG_DESC1,
    LIM.LONG_DESC2,
    LIM.ITEM_MARKETING_DESC,
    LIM.ITEM_FEATURES,
    LIM.META_DESC,
    LIM.META_KEYWORD,
    LIM.PAGE_TITLE,
    LIM.INVOICE_DESC,
    IP.NET_PRICE,
    IP.PACK_DESC,
    CF.CATALOG_ID,
    CASE
      WHEN NVL(IP.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
    NVL(IP.SALES_UOM,IM.SALES_UOM) SALES_UOM,
    IP.MATERIAL_GROUP,
    IP.UNSPSC,
    II.IMAGE_NAME,
    II.IMAGE_TYPE,
    INOT.NOTES,
    GI.IS_GOLDENITEM,
    IM.ROWID IM_ROWID,
    LIM.ROWID LIM_ROWID,
    IP.ROWID IP_ROWID,
    II.ROWID II_ROWID,
    B.ROWID B_ROWID,
    INOT.ROWID INOT_ROWID
  FROM ITEM_MASTER IM,
    LOC_ITEM_MASTER LIM,
    ITEM_PRICES IP,
    ITEM_IMAGES II,
    BRANDS b,
    MANUFACTURER M,
    ITEM_NOTES INOT,
    GOLDEN_ITEMS GI,
    (SELECT IM.ITEM_ID,
      NVL(LCFV.TEXT_FIELD_VALUE,LCFV.NUMERIC_FIELD_VALUE) CATALOG_ID
    FROM ITEM_CUSTOM_FIELD_VALUES ICFV,
      LOC_CUSTOM_FIELD_VALUES LCFV,
      ITEM_MASTER IM ,
      CUSTOM_FIELDS CF
    WHERE IM.ITEM_ID                  =ICFV.ITEM_ID
    AND ICFV.LOC_CUSTOM_FIELD_VALUE_ID=LCFV.LOC_CUSTOM_FIELD_VALUE_ID
    AND ICFV.CUSTOM_FIELD_ID          = CF.CUSTOM_FIELD_ID
    AND CF.FIELD_NAME                 = 'Catalog_ID'
    ) CF
  WHERE IM.ACTIVE       ='Y'
  AND IM.DISPLAY_ONLINE = 'Y'
  AND LIM.ITEM_ID(+)    =IM.ITEM_ID
  AND LIM.ITEM_IMAGE_ID = II.ITEM_IMAGE_ID(+)
  AND IP.ITEM_ID        =IM.ITEM_ID(+)
  AND IP.STATUS         ='A'
  AND IP.NOTE_ID        = INOT.NOTE_ID(+)
  AND IM.BRAND_ID       = B.BRAND_ID(+)
  AND IM.MANUFACTURER_ID= M.MANUFACTURER_ID(+)
  AND GI.ITEM_ID(+)     = IM.ITEM_ID
  AND CF.ITEM_ID(+)     = IM.ITEM_ID;  

  
-----------------------------------------------------------------------------------------------------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW SOLR_ITEM_DETAILS_VIEW
AS 
  SELECT
	ITEM_ID,
	QTY_AVAILABLE,
	ITEM_PRICE_ID,
  SUBSET_ID,
	BRAND_ID,
	BRAND_NAME,
	BRAND_IMAGE,
	MANUFACTURER_NAME,
	MANUFACTURER_ID,
	MANUFACTURER_LOGO,
	PART_NUMBER,
	ALT_PART_NUMBER1,
	ALT_PART_NUMBER2,
	COMPETITOR_PART_NUMBER,
	CUSTOMER_PART_NUMBER,
	MANUFACTURER_PART_NUMBER,
	UPC,
	PRODUCT_ID, 
	SHORT_DESC,
	ITEM_MARKETING_DESC,
	ITEM_FEATURES,
	LONG_DESC1,
	LONG_DESC2,
	META_DESC,
	META_KEYWORD,
	PAGE_TITLE,
	INVOICE_DESC,
  CLEARANCE,
	MIN_ORDER_QTY,
	ORDER_QTY_INTERVAL,
	NET_PRICE,
	IMAP_PRICE,
	package_flag,
	PACKAGE_QTY,
	DISPLAY_PRICING,
	WEIGHT,
	WEIGHT_UOM,
	PACK_DESC,
	SALES_UOM,
	UNSPSC,
	IMAP,
	SALES_QTY,
	MATERIAL_GROUP,
	OVERRIDE_PRICE_RULE,
	IMAGE_NAME,
	IMAGE_TYPE,
	NOTES,
	KEYWORDS,
	COLLECTION,
	IMAGE_ITEM_ID,
  IMAGE_LIST,
  LINE_ITEM_ID,
  DOCUMENTS,
  VIDEO_ITEM_ID,
  VIDEOS_LIST,
  LINK_ITEM_ID,
  LINKED_ITEMS,
  ATTR_ITEM_ID,
  ATTR
FROM  
(
SELECT  IM.ITEM_ID,
  IM.QTY_AVAILABLE,
  IP.ITEM_PRICE_ID,
  IP.SUBSET_ID,
  B.BRAND_ID,
  B.BRAND_NAME,
  B.BRAND_IMAGE,
  M.MANUFACTURER_NAME,
  M.MANUFACTURER_ID,
  M.MANUFACTURER_LOGO,
  IM.PART_NUMBER,
  IM.ALT_PART_NUMBER1,
  IM.ALT_PART_NUMBER2,
  IM.COMPETITOR_PART_NUMBER,
  IP.CUSTOMER_PART_NUMBER,
  IM.MANUFACTURER_PART_NUMBER,
  IM.UPC,
  NVL(PRODUCT_ID,0) PRODUCT_ID, 
  LIM.SHORT_DESC,
  LIM.ITEM_MARKETING_DESC,
  LIM.ITEM_FEATURES,
  LIM.LONG_DESC1,
  LIM.LONG_DESC2,
  LIM.META_DESC,
  LIM.META_KEYWORD,
  LIM.PAGE_TITLE,
  LIM.INVOICE_DESC,
  IP.CLEARANCE,
 CASE
      WHEN NVL(IP.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
IP.NET_PRICE,
IP.IMAP_PRICE,
ip.package_flag,
IP.PACKAGE_QTY,
IP.DISPLAY_PRICING,
IM.WEIGHT,
IM.WEIGHT_UOM,
NVL(IP.PACK_DESC,IM.PACK_DESC) PACK_DESC,
NVL(IP.SALES_UOM,IM.SALES_UOM) SALES_UOM,
NVL(IP.UNSPSC,IM.UNSPSC) UNSPSC,
NVL(IP.IMAP,IM.IMAP_PRICE) IMAP,
  IP.SALES_QTY,
  IP.MATERIAL_GROUP,
  IP.OVERRIDE_PRICE_RULE,
  II.IMAGE_NAME,
  II.IMAGE_TYPE,
  INS.NOTES,
  IM.KEYWORDS,
  ICVV.FIELD_VALUE COLLECTION
  FROM ITEM_MASTER IM, LOC_ITEM_MASTER LIM, ITEM_PRICES IP, BRANDS B, MANUFACTURER M, ITEM_IMAGES II, ITEM_NOTES INS,ITEM_CF_VALUES_VIEW ICVV 
  WHERE IP.ITEM_ID=IM.ITEM_ID AND NVL(IM.DISPLAY_ONLINE,-1)='Y'  AND  FIELD_NAME(+)='Collections'
  AND ICVV.ITEM_ID(+) = IM.ITEM_ID AND IM.ITEM_ID=LIM.ITEM_ID(+) AND LIM.LOCALE_ID(+)=1 AND LIM.ITEM_IMAGE_ID=II.ITEM_IMAGE_ID(+) 
  AND IM.MANUFACTURER_ID=M.MANUFACTURER_ID AND IM.BRAND_ID=B.BRAND_ID AND IP.NOTE_ID=INS.NOTE_ID(+)
)IG,
(SELECT IIL.ITEM_ID IMAGE_ITEM_ID,
      '{"images" : ['
      || LISTAGG('{"imageName" : "'
      ||TRIM(II.IMAGE_NAME)
      ||'", "imageType" : "'
      ||II.IMAGE_TYPE
      ||'", "imageCaption" : "'
      ||IIL.CAPTION
      ||'"}', ',') WITHIN GROUP (
    ORDER BY II.IMAGE_TYPE)
      ||']}' IMAGE_LIST
    FROM ITEM_IMAGES II,
      ITEM_IMAGE_LIST IIL
    WHERE II.ITEM_IMAGE_ID=IIL.ITEM_IMAGES_ID
    GROUP BY IIL.ITEM_ID
) IMG,
(SELECT LIM.ITEM_ID LINE_ITEM_ID,
      '{"documents" : ['
      ||LISTAGG('{"docCategoryType" : "'
      || REPLACE(IDC.ITEM_DOCUMENTS_CATEGORY_NAME,'"','\\"')
      ||'", "docName" : "'
      || TRIM(REPLACE(IDS.DOCUMENT_NAME,'"','"'))
      ||'", "docType" : "'
      ||IDS.DOCUMENT_TYPE
      ||'", "docDesc" : "'
      ||NVL(IDL.CAPTION,IDS.DOCUMENT_NAME)
      ||'"}', ',') WITHIN GROUP (
    ORDER BY LIM.LOCALE_ID)
      ||']}' DOCUMENTS
    FROM ITEM_DOCUMENTS_LIST IDL,
      ITEM_DOCUMENTS IDS,
      LOC_ITEM_MASTER LIM,
      ITEM_DOCUMENTS_CATEGORY IDC
    WHERE LIM.LOC_ITEM_ID       =IDL.LOC_ITEM_ID
    AND IDL.ITEM_DOCUMENT_ID    =IDS.ITEM_DOCUMENT_ID
    AND IDL.ITEM_DOC_CATEGORY_ID=IDC.ITEM_DOCUMENTS_CATEGORY_ID(+)
    GROUP BY LIM.ITEM_ID
) DOC,
(SELECT IVL.ITEM_ID VIDEO_ITEM_ID,
      '{"videos" : ['
      ||LISTAGG('{"vedioCaption" : "'
      ||NVL(IVL.VIDEO_CAPTION,IV.VIDEO_NAME)
      ||'", "videoName" : "'
      ||IV.VIDEO_NAME
      ||'", "videoType" : "'
      ||IV.VIDEO_TYPE
      ||'"}',',') WITHIN GROUP (
    ORDER BY IVL.ITEM_VIDEOS_LIST_ID)
      ||']}' VIDEOS_LIST
    FROM ITEM_VIDEOS_LIST IVL,
      ITEM_VIDEOS IV
    WHERE IV.ITEM_VIDEO_ID = IVL.ITEM_VIDEO_ID
    GROUP BY IVL.ITEM_ID
)VIDEOS,
(SELECT IL.LINKED_TO_ITEM_ID LINK_ITEM_ID,
      '{"linkTypes" : ['
      ||LISTAGG('{"itemId" : "'
      ||IL.ITEM_ID
      ||'", "linkTypeName" : "'
      ||ILT.LINK_TYPE_NAME
      ||'"}',',') WITHIN GROUP (
    ORDER BY IL.ITEM_LINK_TYPE_ID)
      ||']}' LINKED_ITEMS
    FROM ITEM_LINKS IL,
      ITEM_LINK_TYPES ILT
    WHERE ILT.ITEM_LINK_TYPE_ID=IL.ITEM_LINK_TYPE_ID
    GROUP BY IL.LINKED_TO_ITEM_ID
    ) LINKEDITEMS,
	(SELECT Iav.Item_Id Attr_Item_Id,
      LISTAGG(La.Attribute_Name
    ||'|~|'
    || Lav.Attribute_Value
    ||' '
    || Lau.Attribute_Uom, '}~}') WITHIN GROUP (
  ORDER BY ICA.DISP_SEQ,LA.ATTRIBUTE_NAME) AS ATTR
    FROM Item_Attribute_Values Iav,
      Loc_Attribute_Values Lav,
      Loc_Attribute_Uoms Lau,
      Loc_Attributes La,
      (SELECT *
      FROM Item_Classification Ic,
        CATEGORY_ATTRIBUTES CA
      WHERE IC.DEFAULT_CATEGORY='Y'
      AND IC.TAXONOMY_TREE_ID  =CA.TAXONOMY_TREE_ID
      ) ICA
    WHERE IAV.ITEM_ID             =ICA.ITEM_ID(+)
    AND IAV.ATTRIBUTE_ID          =ICA.ATTRIBUTE_ID(+)
    AND Iav.Loc_Attribute_Id      =La.Loc_Attribute_Id
    AND La.Locale_Id              =1
    AND Iav.Loc_Attribute_Uom_Id  =Lau.Loc_Attribute_Uom_Id(+)
    AND Iav.Loc_Attribute_Value_Id=Lav.Loc_Attribute_Value_Id
    GROUP BY Iav.Item_Id) ATTR
	 WHERE IG.ITEM_ID=IMG.IMAGE_ITEM_ID(+)
	  AND IG.ITEM_ID  =DOC.LINE_ITEM_ID(+)
	  AND IG.ITEM_ID  =LINKEDITEMS.LINK_ITEM_ID(+)
	  AND IG.ITEM_ID  =ATTR.ATTR_ITEM_ID(+)
	  AND IG.ITEM_ID  =VIDEOS.VIDEO_ITEM_ID(+);


  
-----------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FORCE VIEW BRAND_CF_VALUES_VIEW AS
SELECT B.BRAND_ID,
  B.BRAND_NAME,
  CF.FIELD_NAME,
  CF.FIELD_DATA_TYPE,
  CASE
    WHEN UPPER(CF.FIELD_DATA_TYPE)='TXT'
    OR UPPER(CF.FIELD_DATA_TYPE)  ='BOL'
    OR UPPER(CF.FIELD_DATA_TYPE)  ='DT'
    THEN LCFV.TEXT_FIELD_VALUE
    ELSE TO_CHAR(LCFV.NUMERIC_FIELD_VALUE)
  END FILED_VALUE,
  B.MANUFACTURER_ID,
  B.BRAND_IMAGE,
  B.BRAND_URL
FROM BRANDS B,
  BRAND_CUSTOM_FIELD_VALUES BCFV,
  CUSTOM_FIELDS CF,
  LOC_CUSTOM_FIELD_VALUES LCFV
WHERE NVL(B.STATUS,-1)           !='D'
AND B.BRAND_ID                    =BCFV.BRAND_ID
AND BCFV.CUSTOM_FIELD_ID          =CF.CUSTOM_FIELD_ID
AND LCFV.LOC_CUSTOM_FIELD_VALUE_ID=BCFV.LOC_CUSTOM_FIELD_VALUE_ID;  

  
-----------------------------------------------------------------------------------------------------------------------------------------------------------

    CREATE OR REPLACE FORCE VIEW MFR_CF_VALUES_VIEW AS 
  SELECT M.MANUFACTURER_ID,
    M.MANUFACTURER_NAME,
    CF.FIELD_NAME,
    CF.FIELD_DATA_TYPE,
    CASE
      WHEN UPPER(CF.FIELD_DATA_TYPE)='TXT'
      OR UPPER(CF.FIELD_DATA_TYPE)  ='BOL'
      OR UPPER(CF.FIELD_DATA_TYPE)  ='DT'
      THEN LCFV.TEXT_FIELD_VALUE
      ELSE TO_CHAR(LCFV.NUMERIC_FIELD_VALUE)
    END FIELD_VALUE,
    M.MANUFACTURER_LOGO
  FROM MANUFACTURER M,
    MANF_CUSTOM_FIELD_VALUES MCFV,
    CUSTOM_FIELDS CF,
    LOC_CUSTOM_FIELD_VALUES LCFV
  WHERE NVL(M.STATUS,-1)           !='D'
  AND M.MANUFACTURER_ID             =MCFV.MANUFACTURER_ID
  AND MCFV.CUSTOM_FIELD_ID          =CF.CUSTOM_FIELD_ID
  AND LCFV.LOC_CUSTOM_FIELD_VALUE_ID=MCFV.LOC_CUSTOM_FIELD_VALUE_ID;

  
-----------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FORCE VIEW WAREHOUSE_CF_VALUES_VIEW  AS 
  SELECT W.WAREHOUSE_ID,
    CF.FIELD_NAME,
    CF.FIELD_DATA_TYPE,
    CASE
      WHEN UPPER(CF.FIELD_DATA_TYPE)='TXT'
      OR UPPER(CF.FIELD_DATA_TYPE)  ='BOL'
      OR UPPER(CF.FIELD_DATA_TYPE)  ='DT'
      THEN LCFV.TEXT_FIELD_VALUE
      ELSE TO_CHAR(LCFV.NUMERIC_FIELD_VALUE)
    END FIELD_VALUE
  FROM WAREHOUSE W,
    WAREHOUSE_CUSTOM_FIELD_VALUES WCFV,
    CUSTOM_FIELDS CF,
    LOC_CUSTOM_FIELD_VALUES LCFV
  WHERE W.WAREHOUSE_ID              = WCFV.WAREHOUSE_ID
  AND WCFV.CUSTOM_FIELD_ID          = CF.CUSTOM_FIELD_ID
  AND LCFV.LOC_CUSTOM_FIELD_VALUE_ID=WCFV.LOC_CUSTOM_FIELD_VALUE_ID;
  
  -----------------------------------------------------------------------------------------------------------------------------------------------------------
  
  CREATE OR REPLACE FORCE VIEW SOLR_ITEM_DETAILS_VIEW AS 
  SELECT
                ITEM_ID,
                QTY_AVAILABLE,
                ITEM_PRICE_ID,
  				SUBSET_ID,
                BRAND_ID,
                BRAND_NAME,
                BRAND_IMAGE,
                MANUFACTURER_NAME,
                MANUFACTURER_ID,
                MANUFACTURER_LOGO,
                PART_NUMBER,
                ALT_PART_NUMBER1,
                ALT_PART_NUMBER2,
                COMPETITOR_PART_NUMBER,
                CUSTOMER_PART_NUMBER,
                MANUFACTURER_PART_NUMBER,
                UPC,
                PRODUCT_ID, 
                SHORT_DESC,
                ITEM_MARKETING_DESC,
                ITEM_FEATURES,
                LONG_DESC1,
                LONG_DESC2,
                META_DESC,
                META_KEYWORD,
                PAGE_TITLE,
                INVOICE_DESC,
  				CLEARANCE,
                MIN_ORDER_QTY,
                ORDER_QTY_INTERVAL,
                NET_PRICE,
                IMAP_PRICE,
                package_flag,
                PACKAGE_QTY,
                DISPLAY_PRICING,
                WEIGHT,
                WEIGHT_UOM,
                PACK_DESC,
                SALES_UOM,
                UNSPSC,
                IMAP,
                SALES_QTY,
                MATERIAL_GROUP,
                OVERRIDE_PRICE_RULE,
                IMAGE_NAME,
                IMAGE_TYPE,
                NOTES,
                KEYWORDS,
                COLLECTION,
                IMAGE_ITEM_ID,
  IMAGE_LIST,
  LINE_ITEM_ID,
  DOCUMENTS,
  VIDEO_ITEM_ID,
  VIDEOS_LIST,
  LINK_ITEM_ID,
  LINKED_ITEMS,
  ATTR_ITEM_ID,
  ATTR
FROM  
(
SELECT  IM.ITEM_ID,
  IM.QTY_AVAILABLE,
  IP.ITEM_PRICE_ID,
  IP.SUBSET_ID,
  B.BRAND_ID,
  B.BRAND_NAME,
  B.BRAND_IMAGE,
  M.MANUFACTURER_NAME,
  M.MANUFACTURER_ID,
  M.MANUFACTURER_LOGO,
  IM.PART_NUMBER,
  IM.ALT_PART_NUMBER1,
  IM.ALT_PART_NUMBER2,
  IM.COMPETITOR_PART_NUMBER,
  IP.CUSTOMER_PART_NUMBER,
  IM.MANUFACTURER_PART_NUMBER,
  IM.UPC,
  NVL(PRODUCT_ID,0) PRODUCT_ID, 
  LIM.SHORT_DESC,
  LIM.ITEM_MARKETING_DESC,
  LIM.ITEM_FEATURES,
  LIM.LONG_DESC1,
  LIM.LONG_DESC2,
  LIM.META_DESC,
  LIM.META_KEYWORD,
  LIM.PAGE_TITLE,
  LIM.INVOICE_DESC,
  IP.CLEARANCE,
CASE
      WHEN NVL(IP.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
IP.NET_PRICE,
IP.IMAP_PRICE,
ip.package_flag,
IP.PACKAGE_QTY,
IP.DISPLAY_PRICING,
IM.WEIGHT,
IM.WEIGHT_UOM,
NVL(IP.PACK_DESC,IM.PACK_DESC) PACK_DESC,
NVL(IP.SALES_UOM,IM.SALES_UOM) SALES_UOM,
NVL(IP.UNSPSC,IM.UNSPSC) UNSPSC,
NVL(IP.IMAP,IM.IMAP_PRICE) IMAP,
  IP.SALES_QTY,
  IP.MATERIAL_GROUP,
  IP.OVERRIDE_PRICE_RULE,
  II.IMAGE_NAME,
  II.IMAGE_TYPE,
  INS.NOTES,
  IM.KEYWORDS,
  ICVV.FIELD_VALUE COLLECTION
  FROM ITEM_MASTER IM, LOC_ITEM_MASTER LIM, ITEM_PRICES IP, BRANDS B, MANUFACTURER M, ITEM_IMAGES II, ITEM_NOTES INS,ITEM_CF_VALUES_VIEW ICVV 
  WHERE IP.ITEM_ID=IM.ITEM_ID AND NVL(IM.DISPLAY_ONLINE,-1)='Y'  AND  FIELD_NAME(+)='Collections'
  AND ICVV.ITEM_ID(+) = IM.ITEM_ID AND IM.ITEM_ID=LIM.ITEM_ID(+) AND LIM.LOCALE_ID(+)=1 AND LIM.ITEM_IMAGE_ID=II.ITEM_IMAGE_ID(+) 
  AND IM.MANUFACTURER_ID=M.MANUFACTURER_ID AND IM.BRAND_ID=B.BRAND_ID AND IP.NOTE_ID=INS.NOTE_ID(+)
)IG,
(SELECT IIL.ITEM_ID IMAGE_ITEM_ID,
      '{"images" : ['
      || LISTAGG('{"imageName" : "'
      ||TRIM(II.IMAGE_NAME)
      ||'", "imageType" : "'
      ||II.IMAGE_TYPE
      ||'", "imageCaption" : "'
      ||IIL.CAPTION
      ||'"}', ',') WITHIN GROUP (
    ORDER BY II.IMAGE_TYPE)
      ||']}' IMAGE_LIST
    FROM ITEM_IMAGES II,
      ITEM_IMAGE_LIST IIL
    WHERE II.ITEM_IMAGE_ID=IIL.ITEM_IMAGES_ID
    GROUP BY IIL.ITEM_ID
) IMG,
(SELECT LIM.ITEM_ID LINE_ITEM_ID,
      '{"documents" : ['
      ||LISTAGG('{"docCategoryType" : "'
      || REPLACE(IDC.ITEM_DOCUMENTS_CATEGORY_NAME,'"','\\"')
      ||'", "docName" : "'
      || TRIM(REPLACE(IDS.DOCUMENT_NAME,'"','"'))
      ||'", "docType" : "'
      ||IDS.DOCUMENT_TYPE
      ||'", "docDesc" : "'
      ||NVL(IDL.CAPTION,IDS.DOCUMENT_NAME)
      ||'"}', ',') WITHIN GROUP (
    ORDER BY LIM.LOCALE_ID)
      ||']}' DOCUMENTS
    FROM ITEM_DOCUMENTS_LIST IDL,
      ITEM_DOCUMENTS IDS,
      LOC_ITEM_MASTER LIM,
      ITEM_DOCUMENTS_CATEGORY IDC
    WHERE LIM.LOC_ITEM_ID       =IDL.LOC_ITEM_ID
   AND IDL.ITEM_DOCUMENT_ID    =IDS.ITEM_DOCUMENT_ID
    AND IDL.ITEM_DOC_CATEGORY_ID=IDC.ITEM_DOCUMENTS_CATEGORY_ID(+)
    GROUP BY LIM.ITEM_ID
) DOC,
(SELECT IVL.ITEM_ID VIDEO_ITEM_ID,
      '{"videos" : ['
      ||LISTAGG('{"vedioCaption" : "'
      ||NVL(IVL.VIDEO_CAPTION,IV.VIDEO_NAME)
      ||'", "videoName" : "'
      ||IV.VIDEO_NAME
      ||'", "videoType" : "'
      ||IV.VIDEO_TYPE
      ||'"}',',') WITHIN GROUP (
    ORDER BY IVL.ITEM_VIDEOS_LIST_ID)
      ||']}' VIDEOS_LIST
    FROM ITEM_VIDEOS_LIST IVL,
      ITEM_VIDEOS IV
    WHERE IV.ITEM_VIDEO_ID = IVL.ITEM_VIDEO_ID
    GROUP BY IVL.ITEM_ID
)VIDEOS,
(SELECT IL.LINKED_TO_ITEM_ID LINK_ITEM_ID,
      '{"linkTypes" : ['
      ||LISTAGG('{"itemId" : "'
      ||IL.ITEM_ID
      ||'", "linkTypeName" : "'
      ||ILT.LINK_TYPE_NAME
      ||'"}',',') WITHIN GROUP (
    ORDER BY IL.ITEM_LINK_TYPE_ID)
      ||']}' LINKED_ITEMS
    FROM ITEM_LINKS IL,
      ITEM_LINK_TYPES ILT
    WHERE ILT.ITEM_LINK_TYPE_ID=IL.ITEM_LINK_TYPE_ID
    GROUP BY IL.LINKED_TO_ITEM_ID
    ) LINKEDITEMS,
                (SELECT Iav.Item_Id Attr_Item_Id,
      XMLAGG(XMLELEMENT("X",XMLELEMENT("X1",La.Attribute_Name
    ||'|~|'
    || Lav.Attribute_Value
    ||' '
    || Lau.Attribute_Uom, '}~}'))).EXTRACT('//text()').GETCLOBVAL()   ATTR
    FROM Item_Attribute_Values Iav,
      Loc_Attribute_Values Lav,
      Loc_Attribute_Uoms Lau,
      Loc_Attributes La,
      (SELECT *
      FROM Item_Classification Ic,
        CATEGORY_ATTRIBUTES CA
      WHERE IC.DEFAULT_CATEGORY='Y'
      AND IC.TAXONOMY_TREE_ID  =CA.TAXONOMY_TREE_ID
      ) ICA
    WHERE IAV.ITEM_ID             =ICA.ITEM_ID(+)
    AND IAV.ATTRIBUTE_ID          =ICA.ATTRIBUTE_ID(+)
    AND Iav.Loc_Attribute_Id      =La.Loc_Attribute_Id
    AND La.Locale_Id              =1
    AND Iav.Loc_Attribute_Uom_Id  =Lau.Loc_Attribute_Uom_Id(+)
    AND Iav.Loc_Attribute_Value_Id=Lav.Loc_Attribute_Value_Id
    GROUP BY Iav.Item_Id) ATTR
                WHERE IG.ITEM_ID=IMG.IMAGE_ITEM_ID(+)
                  AND IG.ITEM_ID  =DOC.LINE_ITEM_ID(+)
                  AND IG.ITEM_ID  =LINKEDITEMS.LINK_ITEM_ID(+)
                  AND IG.ITEM_ID  =ATTR.ATTR_ITEM_ID(+)
                  AND IG.ITEM_ID  =VIDEOS.VIDEO_ITEM_ID(+);
                  
---------------------------- For Item Details With Attr Display Sequence
CREATE OR REPLACE FORCE VIEW SOLR_ITEM_DETAILS_VIEW
AS
  SELECT ITEM_ID,
    QTY_AVAILABLE,
    ITEM_PRICE_ID,
    SUBSET_ID,
    BRAND_ID,
    BRAND_NAME,
    BRAND_IMAGE,
    MANUFACTURER_NAME,
    MANUFACTURER_ID,
    MANUFACTURER_LOGO,
    PART_NUMBER,
    ALT_PART_NUMBER1,
    ALT_PART_NUMBER2,
    COMPETITOR_PART_NUMBER,
    CUSTOMER_PART_NUMBER,
    MANUFACTURER_PART_NUMBER,
    UPC,
    PRODUCT_ID,
    SHORT_DESC,
    ITEM_MARKETING_DESC,
    ITEM_FEATURES,
    LONG_DESC1,
    LONG_DESC2,
    META_DESC,
    META_KEYWORD,
    PAGE_TITLE,
    INVOICE_DESC,
    CLEARANCE,
    MIN_ORDER_QTY,
    ORDER_QTY_INTERVAL,
    NET_PRICE,
    IMAP_PRICE,
    package_flag,
    PACKAGE_QTY,
    DISPLAY_PRICING,
    WEIGHT,
    WEIGHT_UOM,
    PACK_DESC,
    SALES_UOM,
    UNSPSC,
    IMAP,
    SALES_QTY,
    MATERIAL_GROUP,
    OVERRIDE_PRICE_RULE,
    IMAGE_NAME,
    IMAGE_TYPE,
    NOTES,
    KEYWORDS,
    COLLECTION,
    IMAGE_ITEM_ID,
    IMAGE_LIST,
    LINE_ITEM_ID,
    DOCUMENTS,
    VIDEO_ITEM_ID,
    VIDEOS_LIST,
    LINK_ITEM_ID,
    LINKED_ITEMS,
    ATTR_ITEM_ID,
    ATTR
  FROM
    (SELECT IM.ITEM_ID,
      IM.QTY_AVAILABLE,
      IP.ITEM_PRICE_ID,
      IP.SUBSET_ID,
      B.BRAND_ID,
      B.BRAND_NAME,
      B.BRAND_IMAGE,
      M.MANUFACTURER_NAME,
      M.MANUFACTURER_ID,
      M.MANUFACTURER_LOGO,
      IM.PART_NUMBER,
      IM.ALT_PART_NUMBER1,
      IM.ALT_PART_NUMBER2,
      IM.COMPETITOR_PART_NUMBER,
      IP.CUSTOMER_PART_NUMBER,
      IM.MANUFACTURER_PART_NUMBER,
      IM.UPC,
      NVL(PRODUCT_ID,0) PRODUCT_ID,
      LIM.SHORT_DESC,
      LIM.ITEM_MARKETING_DESC,
      LIM.ITEM_FEATURES,
      LIM.LONG_DESC1,
      LIM.LONG_DESC2,
      LIM.META_DESC,
      LIM.META_KEYWORD,
      LIM.PAGE_TITLE,
      LIM.INVOICE_DESC,
      IP.CLEARANCE,
      CASE
        WHEN NVL(IP.MIN_ORDER_QTY,1) < 2
        THEN NVL(IM.MIN_ORDER_QTY,1)
        WHEN NVL(IP.MIN_ORDER_QTY,1) > 1
        THEN NVL(IP.MIN_ORDER_QTY,1)
      END MIN_ORDER_QTY,
      CASE
        WHEN NVL(IP.ORDER_QTY_INTERVAL,1) < 2
        THEN NVL(IM.ORDER_QTY_INTERVAL,1)
        WHEN NVL(IP.ORDER_QTY_INTERVAL,1) > 1
        THEN NVL(IP.ORDER_QTY_INTERVAL,1)
      END ORDER_QTY_INTERVAL,
      IP.NET_PRICE,
      IP.IMAP_PRICE,
      ip.package_flag,
      IP.PACKAGE_QTY,
      IP.DISPLAY_PRICING,
      IM.WEIGHT,
      IM.WEIGHT_UOM,
      NVL(IP.PACK_DESC,IM.PACK_DESC) PACK_DESC,
      NVL(IP.SALES_UOM,IM.SALES_UOM) SALES_UOM,
      NVL(IP.UNSPSC,IM.UNSPSC) UNSPSC,
      NVL(IP.IMAP,IM.IMAP_PRICE) IMAP,
      IP.SALES_QTY,
      IP.MATERIAL_GROUP,
      IP.OVERRIDE_PRICE_RULE,
      II.IMAGE_NAME,
      II.IMAGE_TYPE,
      INS.NOTES,
      IM.KEYWORDS,
      ICVV.FIELD_VALUE COLLECTION
    FROM ITEM_MASTER IM,
      LOC_ITEM_MASTER LIM,
      ITEM_PRICES IP,
      BRANDS B,
      MANUFACTURER M,
      ITEM_IMAGES II,
      ITEM_NOTES INS,
      ITEM_CF_VALUES_VIEW ICVV
    WHERE IP.ITEM_ID             =IM.ITEM_ID
    AND NVL(IM.DISPLAY_ONLINE,-1)='Y'
    AND FIELD_NAME(+)            ='Collections'
    AND ICVV.ITEM_ID(+)          = IM.ITEM_ID
    AND IM.ITEM_ID               =LIM.ITEM_ID(+)
    AND LIM.LOCALE_ID(+)         =1
    AND LIM.ITEM_IMAGE_ID        =II.ITEM_IMAGE_ID(+)
    AND IM.MANUFACTURER_ID       =M.MANUFACTURER_ID
    AND IM.BRAND_ID              =B.BRAND_ID
    AND IP.NOTE_ID               =INS.NOTE_ID(+)
    )IG,
    (SELECT IIL.ITEM_ID IMAGE_ITEM_ID,
      '{"images" : ['
      || LISTAGG('{"imageName" : "'
      ||TRIM(II.IMAGE_NAME)
      ||'", "imageType" : "'
      ||II.IMAGE_TYPE
      ||'", "imageCaption" : "'
      ||IIL.CAPTION
      ||'"}', ',') WITHIN GROUP (
    ORDER BY II.IMAGE_TYPE)
      ||']}' IMAGE_LIST
    FROM ITEM_IMAGES II,
      ITEM_IMAGE_LIST IIL
    WHERE II.ITEM_IMAGE_ID=IIL.ITEM_IMAGES_ID
    GROUP BY IIL.ITEM_ID
    ) IMG,
    (SELECT LIM.ITEM_ID LINE_ITEM_ID,
      '{"documents" : ['
      ||LISTAGG('{"docCategoryType" : "'
      || REPLACE(IDC.ITEM_DOCUMENTS_CATEGORY_NAME,'"','\\"')
      ||'", "docName" : "'
      || TRIM(REPLACE(IDS.DOCUMENT_NAME,'"','"'))
      ||'", "docType" : "'
      ||IDS.DOCUMENT_TYPE
      ||'", "docDesc" : "'
      ||NVL(IDL.CAPTION,IDS.DOCUMENT_NAME)
      ||'"}', ',') WITHIN GROUP (
    ORDER BY LIM.LOCALE_ID)
      ||']}' DOCUMENTS
    FROM ITEM_DOCUMENTS_LIST IDL,
      ITEM_DOCUMENTS IDS,
      LOC_ITEM_MASTER LIM,
      ITEM_DOCUMENTS_CATEGORY IDC
    WHERE LIM.LOC_ITEM_ID       =IDL.LOC_ITEM_ID
    AND IDL.ITEM_DOCUMENT_ID    =IDS.ITEM_DOCUMENT_ID
    AND IDL.ITEM_DOC_CATEGORY_ID=IDC.ITEM_DOCUMENTS_CATEGORY_ID(+)
    GROUP BY LIM.ITEM_ID
    ) DOC,
    (SELECT IVL.ITEM_ID VIDEO_ITEM_ID,
      '{"videos" : ['
      ||LISTAGG('{"vedioCaption" : "'
      ||NVL(IVL.VIDEO_CAPTION,IV.VIDEO_NAME)
      ||'", "videoName" : "'
      ||IV.VIDEO_NAME
      ||'", "videoType" : "'
      ||IV.VIDEO_TYPE
      ||'"}',',') WITHIN GROUP (
    ORDER BY IVL.ITEM_VIDEOS_LIST_ID)
      ||']}' VIDEOS_LIST
    FROM ITEM_VIDEOS_LIST IVL,
      ITEM_VIDEOS IV
    WHERE IV.ITEM_VIDEO_ID = IVL.ITEM_VIDEO_ID
    GROUP BY IVL.ITEM_ID
    )VIDEOS,
    (SELECT IL.LINKED_TO_ITEM_ID LINK_ITEM_ID,
      '{"linkTypes" : ['
      ||LISTAGG('{"itemId" : "'
      ||IL.ITEM_ID
      ||'", "linkTypeName" : "'
      ||ILT.LINK_TYPE_NAME
      ||'"}',',') WITHIN GROUP (
    ORDER BY IL.ITEM_LINK_TYPE_ID)
      ||']}' LINKED_ITEMS
    FROM ITEM_LINKS IL,
      ITEM_LINK_TYPES ILT
    WHERE ILT.ITEM_LINK_TYPE_ID=IL.ITEM_LINK_TYPE_ID
    GROUP BY IL.LINKED_TO_ITEM_ID
    ) LINKEDITEMS,
    (SELECT Iav.Item_Id Attr_Item_Id,
      XMLAGG(XMLELEMENT("X",XMLELEMENT("X1",La.Attribute_Name
      ||'|~|'
      || Lav.Attribute_Value
      ||' '
      || Lau.Attribute_Uom, '}~}'))ORDER BY ICA.disp_seq,LA.ATTRIBUTE_NAME).EXTRACT('//text()').GETCLOBVAL() ATTR
    FROM Item_Attribute_Values Iav,
      Loc_Attribute_Values Lav,
      Loc_Attribute_Uoms Lau,
      Loc_Attributes La,
      (SELECT *
      FROM Item_Classification Ic,
        CATEGORY_ATTRIBUTES CA
      WHERE IC.DEFAULT_CATEGORY='Y'
      AND IC.TAXONOMY_TREE_ID  =CA.TAXONOMY_TREE_ID
      ) ICA
    WHERE IAV.ITEM_ID             =ICA.ITEM_ID(+)
    AND IAV.ATTRIBUTE_ID          =ICA.ATTRIBUTE_ID(+)
    AND Iav.Loc_Attribute_Id      =La.Loc_Attribute_Id
    AND La.Locale_Id              =1
    AND Iav.Loc_Attribute_Uom_Id  =Lau.Loc_Attribute_Uom_Id(+)
    AND Iav.Loc_Attribute_Value_Id=Lav.Loc_Attribute_Value_Id
    GROUP BY Iav.Item_Id
    ) ATTR
  WHERE IG.ITEM_ID=IMG.IMAGE_ITEM_ID(+)
  AND IG.ITEM_ID  =DOC.LINE_ITEM_ID(+)
  AND IG.ITEM_ID  =LINKEDITEMS.LINK_ITEM_ID(+)
  AND IG.ITEM_ID  =ATTR.ATTR_ITEM_ID(+)
  AND IG.ITEM_ID  =VIDEOS.VIDEO_ITEM_ID(+);
                  
  
  -------Bug Fix for Mfr Status
  CREATE OR REPLACE FORCE VIEW MFR_CF_VALUES_VIEW AS
SELECT M.MANUFACTURER_ID,
    M.MANUFACTURER_NAME,
    CF.FIELD_NAME,
    CF.FIELD_DATA_TYPE,
    CASE
      WHEN UPPER(CF.FIELD_DATA_TYPE)='TXT'
      OR UPPER(CF.FIELD_DATA_TYPE)  ='BOL'
      OR UPPER(CF.FIELD_DATA_TYPE)  ='DT'
      THEN LCFV.TEXT_FIELD_VALUE
      ELSE TO_CHAR(LCFV.NUMERIC_FIELD_VALUE)
    END FIELD_VALUE,
    M.MANUFACTURER_LOGO,
    M.STATUS
  FROM MANUFACTURER M,
    MANF_CUSTOM_FIELD_VALUES MCFV,
    CUSTOM_FIELDS CF,
    LOC_CUSTOM_FIELD_VALUES LCFV
  WHERE NVL(M.STATUS,-1)           ='Y'
  AND M.MANUFACTURER_ID             =MCFV.MANUFACTURER_ID
  AND MCFV.CUSTOM_FIELD_ID          =CF.CUSTOM_FIELD_ID
  AND LCFV.LOC_CUSTOM_FIELD_VALUE_ID=MCFV.LOC_CUSTOM_FIELD_VALUE_ID;
  
  --- CATALOG_IDX_NEW_V2 - Clearcance added
  
  CREATE OR REPLACE FORCE VIEW CATALOG_IDX_NEW_V2
AS
SELECT CIDX."SEARCH_IDX",
    CIDX."ITEM_PRICE_ID",
    CIDX."ITEM_ID",
    CIDX."NET_PRICE",
	CIDX."CLEARANCE",
    CIDX."PACK_DESC",
    CIDX."SALES_UOM",
    CIDX."SALES_QTY",
    CIDX."CUSTOMER_PARTNUMBER_KEYWORDS",
    CIDX."MIN_ORDER_QTY",
    CIDX."ORDER_QTY_INTERVAL",
    CIDX."IS_FEATURED_PRODUCT",
    CIDX."DISPLAY_PRICING",
    CIDX."UNSPSC",
    CIDX."CUSTOMER_PART_NUMBER",
    CIDX."MATERIAL_GROUP",
    CIDX."MATERIAL_NUMBER",
    CIDX."PACKAGE_FLAG",
    CIDX."PACKAGE_QTY",
    CIDX."UPDATED_DATETIME",
    CIDX."KEY",
    UM.UOM_DESC
  FROM
    ( WITH T1 AS
    (SELECT TO_NUMBER(CONFIG_VALUE) GENERAL_CATALOGID
    FROM SYSTEM_PARAMETERS
    WHERE CONFIG_KEY = 'GENERALCATALOGID'
    ),
    T2 AS
    (SELECT DISTINCT BC2.SUBSET_ID,
      T1.GENERAL_CATALOGID
    FROM BUYING_COMPANY BC2,
      T1
    WHERE BC2.SUBSET_ID          IS NOT NULL
    AND BC2.GENERAL_CATALOG_ACCESS='Y'
    )
  SELECT 'PH_SEARCH_'
    ||T2.GENERAL_CATALOGID
    ||'_'
    ||T2.SUBSET_ID SEARCH_IDX,
    IP3.ITEM_PRICE_ID,
    IP3.ITEM_ID,
    IP3.NET_PRICE,
	IP3.CLEARANCE,
    NVL(IP3.PACK_DESC,IM.PACK_DESC) PACK_DESC,
    NVL(IP3.SALES_UOM,IM.SALES_UOM) SALES_UOM,
    IP3.SALES_QTY,
    IP3.CUSTOMER_PARTNUMBER_KEYWORDS,
    CASE
      WHEN NVL(IP3.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP3.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP3.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP3.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP3.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP3.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
    IP3.IS_FEATURED_PRODUCT,
    IP3.DISPLAY_PRICING,
    NVL(IP3.UNSPSC,IM.UNSPSC) UNSPSC,
    IP3.CUSTOMER_PART_NUMBER,
    IP3.MATERIAL_GROUP,
    IP3.MATERIAL_NUMBER,
    IP3.PACKAGE_FLAG,
    CASE
      WHEN NVL(IP3.PACKAGE_QTY,1) < 2
      THEN NVL(IM.PACKAGE_QTY,1)
      WHEN NVL(IP3.PACKAGE_QTY,1) > 1
      THEN NVL(IP3.PACKAGE_QTY,1)
    END PACKAGE_QTY,
    IP3.UPDATED_DATETIME,
    'PH_SEARCH_'
    ||T2.GENERAL_CATALOGID
    ||'_'
    ||T2.SUBSET_ID
    ||'_'
    ||IP3.ITEM_PRICE_ID KEY
  FROM ITEM_PRICES IP3,
    ITEM_MASTER IM,
    T2
  WHERE IM.ITEM_ID     = IP3.ITEM_ID
  AND IP3.SUBSET_ID    =T2.GENERAL_CATALOGID
  AND IP3.ITEM_ID NOT IN
    (SELECT IP4.ITEM_ID FROM ITEM_PRICES IP4 WHERE IP4.SUBSET_ID=T2.SUBSET_ID
    )
  AND IP3.STATUS='A'
  UNION ALL
  SELECT 'PH_SEARCH_'
    ||T1.GENERAL_CATALOGID
    ||'_'
    ||IP.SUBSET_ID SEARCH_IDX,
    IP.ITEM_PRICE_ID,
    IP.ITEM_ID,
    IP.NET_PRICE,
	IP.CLEARANCE,
    NVL(IP.PACK_DESC,IM.PACK_DESC) PACK_DESC,
    NVL(IP.SALES_UOM,IM.SALES_UOM) SALES_UOM,
    IP.SALES_QTY,
    IP.CUSTOMER_PARTNUMBER_KEYWORDS,
    CASE
      WHEN NVL(IP.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
    IP.IS_FEATURED_PRODUCT,
    IP.DISPLAY_PRICING,
    NVL(IP.UNSPSC,IM.UNSPSC) UNSPSC,
    IP.CUSTOMER_PART_NUMBER,
    IP.MATERIAL_GROUP,
    IP.MATERIAL_NUMBER,
    IP.PACKAGE_FLAG,
    CASE
      WHEN NVL(IP.PACKAGE_QTY,1) < 2
      THEN NVL(IM.PACKAGE_QTY,1)
      WHEN NVL(IP.PACKAGE_QTY,1) > 1
      THEN NVL(IP.PACKAGE_QTY,1)
    END PACKAGE_QTY,
    IP.UPDATED_DATETIME,
    'PH_SEARCH_'
    ||T1.GENERAL_CATALOGID
    ||'_'
    ||IP.SUBSET_ID
    ||'_'
    ||IP.ITEM_PRICE_ID KEY
  FROM ITEM_PRICES IP,
    ITEM_MASTER IM,
    T1
  WHERE IM.ITEM_ID  = IP.ITEM_ID
  AND IP.STATUS     ='A'
  AND IP.SUBSET_ID IN
    (SELECT DISTINCT BC2.SUBSET_ID
    FROM BUYING_COMPANY BC2
    WHERE BC2.SUBSET_ID          IS NOT NULL
    AND BC2.GENERAL_CATALOG_ACCESS='Y'
    )
  AND IP.SUBSET_ID!=
    (SELECT T1.GENERAL_CATALOGID FROM T1
    )
  UNION ALL
  SELECT 'PH_SEARCH_'
    ||T1.GENERAL_CATALOGID SEARCH_IDX,
    IP3.ITEM_PRICE_ID,
    IP3.ITEM_ID,
    IP3.NET_PRICE,
	IP3.CLEARANCE,
    NVL(IP3.PACK_DESC,IM.PACK_DESC) PACK_DESC,
    NVL(IP3.SALES_UOM,IM.SALES_UOM) SALES_UOM,
    IP3.SALES_QTY,
    IP3.CUSTOMER_PARTNUMBER_KEYWORDS,
    CASE
      WHEN NVL(IP3.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP3.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP3.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP3.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP3.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP3.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
    IP3.IS_FEATURED_PRODUCT,
    IP3.DISPLAY_PRICING,
    NVL(IP3.UNSPSC,IM.UNSPSC) UNSPSC,
    IP3.CUSTOMER_PART_NUMBER,
    IP3.MATERIAL_GROUP,
    IP3.MATERIAL_NUMBER,
    IP3.PACKAGE_FLAG,
    CASE
      WHEN NVL(IP3.PACKAGE_QTY,1) < 2
      THEN NVL(IM.PACKAGE_QTY,1)
      WHEN NVL(IP3.PACKAGE_QTY,1) > 1
      THEN NVL(IP3.PACKAGE_QTY,1)
    END PACKAGE_QTY,
    IP3.UPDATED_DATETIME,
    'PH_SEARCH_'
    ||T1.GENERAL_CATALOGID
    ||'_'
    ||IP3.ITEM_PRICE_ID KEY
  FROM ITEM_PRICES IP3,
    ITEM_MASTER IM,
    T1
  WHERE IM.ITEM_ID = IP3.ITEM_ID
  AND IP3.SUBSET_ID=T1.GENERAL_CATALOGID
  AND IP3.STATUS   ='A'
  UNION ALL
  SELECT 'PH_SEARCH_'
    ||IP1.SUBSET_ID SEARCH_IDX,
    IP1.ITEM_PRICE_ID,
    IP1.ITEM_ID,
    IP1.NET_PRICE,
	IP1.CLEARANCE,
    NVL(IP1.PACK_DESC,IM.PACK_DESC) PACK_DESC,
    NVL(IP1.SALES_UOM,IM.SALES_UOM) SALES_UOM,
    IP1.SALES_QTY,
    IP1.CUSTOMER_PARTNUMBER_KEYWORDS,
    CASE
      WHEN NVL(IP1.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP1.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP1.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP1.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP1.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP1.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
    IP1.IS_FEATURED_PRODUCT,
    IP1.DISPLAY_PRICING,
    NVL(IP1.UNSPSC,IM.UNSPSC) UNSPSC,
    IP1.CUSTOMER_PART_NUMBER,
    IP1.MATERIAL_GROUP,
    IP1.MATERIAL_NUMBER,
    IP1.PACKAGE_FLAG,
    CASE
      WHEN NVL(IP1.PACKAGE_QTY,1) < 2
      THEN NVL(IM.PACKAGE_QTY,1)
      WHEN NVL(IP1.PACKAGE_QTY,1) > 1
      THEN NVL(IP1.PACKAGE_QTY,1)
    END PACKAGE_QTY,
    IP1.UPDATED_DATETIME,
    'PH_SEARCH_'
    ||IP1.SUBSET_ID
    ||'_'
    ||IP1.ITEM_PRICE_ID KEY
  FROM ITEM_PRICES IP1,
    ITEM_MASTER IM,
    T1
  WHERE IM.ITEM_ID   = IP1.ITEM_ID
  AND IP1.STATUS     ='A'
  AND IP1.SUBSET_ID IN
    (SELECT DISTINCT BC1.SUBSET_ID
    FROM BUYING_COMPANY BC1
    WHERE BC1.SUBSET_ID          IS NOT NULL
    AND BC1.GENERAL_CATALOG_ACCESS='N'
    )
  AND IP1.SUBSET_ID!=
    (SELECT T1.GENERAL_CATALOGID FROM T1
    )
    ) CIDX,
    UNIT_OF_MEASURE UM
  WHERE CIDX.SALES_UOM=UM.UOM_NAME(+);

  -- For Previously Purchased Items
  CREATE OR REPLACE FORCE VIEW FREQUENTLY_PURCHASED
AS
  SELECT Ou.ITEM_ID,
    LISTAGG(OU.USER_ID,',') WITHIN GROUP (
  ORDER BY Ou.ITEM_ID) USER_COUNT
  FROM
    (SELECT OI.ITEM_ID,
      O.USER_ID
      ||':'
      ||COUNT(1) USER_ID
    FROM order_items OI,
      ORDERS O
    WHERE OI.ORDER_ID = O.ORDER_ID
    GROUP BY OI.ITEM_ID,
      O.USER_ID
    ) ou
  GROUP BY OU.ITEM_ID;
  
  CREATE OR REPLACE FORCE EDITIONABLE VIEW SEARCH_ITEM_MASTER_VIEW_V8
  AS 
  WITH t1 AS
  (SELECT nvl2(ICV.item_classificaton_id,ICV.item_classificaton_id
    || '||'
    || IM.ITEM_ID,IM.ITEM_ID) KEY,
    NVL2(ICV.CATEGORY_CODE_PATH,'0:'
    ||ICV.CATEGORY_CODE_PATH,'0') CATEGORY_CODE_PATH,
    icv.CATEGORY_NAME_PATH,
    ICV.item_classificaton_id,
    im.item_id,
    IM.PARTNUMBER_KEYWORDS PARTNUMBER_KEYWORDS,
    IM.KEYWORDS ||' ; '||
    REGEXP_REPLACE(B.BRAND_NAME, '[^a-zA-Z0-9]', '') ||' '|| IM.MANUFACTURER_PART_NUMBER || ' ; ' ||
    REGEXP_REPLACE(M.manufacturer_name, '[^a-zA-Z0-9]', '') ||' '|| IM.MANUFACTURER_PART_NUMBER || ' ; ' ||
    B.BRAND_NAME ||' '|| REGEXP_REPLACE(IM.MANUFACTURER_PART_NUMBER, '[^a-zA-Z0-9]', '')  || ' ; ' ||
    M.manufacturer_name ||' '|| REGEXP_REPLACE(IM.MANUFACTURER_PART_NUMBER, '[^a-zA-Z0-9]', '')  || ' ; ' ||
    REGEXP_REPLACE(B.BRAND_NAME, '[^a-zA-Z0-9]', '') ||' '|| REGEXP_REPLACE(IM.MANUFACTURER_PART_NUMBER, '[^a-zA-Z0-9]', '')   || ' ; ' ||
    REGEXP_REPLACE(M.manufacturer_name, '[^a-zA-Z0-9]', '') ||' '|| REGEXP_REPLACE(IM.MANUFACTURER_PART_NUMBER, '[^a-zA-Z0-9]', '') || ' ; ' ||
    REGEXP_REPLACE(NVL(lim.short_desc,LIM.INVOICE_DESC), '[^a-zA-Z0-9-]', '') || ' ; ' ||
    LP.PRODUCT_ITEM_KEYWORDS || ' ; ' ||
    LP.PRODUCT_PARTNUMBER_KEYWORDS  AS 
    KEYWORDS,
	IM.KEYWORDS ||' ; '||
    REGEXP_REPLACE(B.BRAND_NAME, '[^a-zA-Z0-9]', '') ||' '|| IM.MANUFACTURER_PART_NUMBER || ' ; ' ||
    REGEXP_REPLACE(M.manufacturer_name, '[^a-zA-Z0-9]', '') ||' '|| IM.MANUFACTURER_PART_NUMBER || ' ; ' ||
    B.BRAND_NAME ||' '|| REGEXP_REPLACE(IM.MANUFACTURER_PART_NUMBER, '[^a-zA-Z0-9]', '')  || ' ; ' ||
    M.manufacturer_name ||' '|| REGEXP_REPLACE(IM.MANUFACTURER_PART_NUMBER, '[^a-zA-Z0-9]', '')  || ' ; ' ||
    REGEXP_REPLACE(B.BRAND_NAME, '[^a-zA-Z0-9]', '') ||' '|| REGEXP_REPLACE(IM.MANUFACTURER_PART_NUMBER, '[^a-zA-Z0-9]', '')   || ' ; ' ||
    REGEXP_REPLACE(M.manufacturer_name, '[^a-zA-Z0-9]', '') ||' '|| REGEXP_REPLACE(IM.MANUFACTURER_PART_NUMBER, '[^a-zA-Z0-9]', '') || ' ; ' ||
    REGEXP_REPLACE(NVL(lim.short_desc,LIM.INVOICE_DESC), '[^a-zA-Z0-9-]', '') || ' ; ' ||
    LP.PRODUCT_ITEM_KEYWORDS || ' ; ' ||
    LP.PRODUCT_PARTNUMBER_KEYWORDS AS PRODUCT_ITEM_KEYWORDS,
    im.part_number,
    im.popularity,
    im.manufacturer_id,
    im.brand_id,
    im.manufacturer_part_number,
    im.upc,
    IM.NET_PRICE,
    LIM.PAGE_TITLE,
    im.ALT_PART_NUMBER1,
    im.ALT_PART_NUMBER2,
    im.display_online,
    im.active,
    IM.HITS,
    EH.EXTERNAL_HITS,
    BS.BEST_SELLER,
    MDN.MANUFACTURER_DISPLAY_NAME,
    ICVV.FIELD_VALUE COLLECTION_KEYWORD,
    nvl2(LP.PRODUCT_ID,DPI.DEFAULT_PRODUCT_ITEM,'Y') DEFAULT_PRODUCT_ITEM,
    m.manufacturer_name,
    b.brand_name,
    ICV.PRODUCT_CATEGORY_ID,
    LP.PRODUCT_ID PRODUCT_ID,
    ICV.PRODUCT_category,
    ICV.LEVEL1_CATEGORY,
    ICV.TAXONOMY_ID,
    NVL2(ICV.DEFAULT_CATEGORY,ICV.DEFAULT_CATEGORY,'Y') DEFAULT_CATEGORY,
    NVL(lim.short_desc,LIM.INVOICE_DESC) SHORT_DESC,
    ICV.display_priority,
    b.brand_image,
    ii.image_name ITEM_IMAGE,
    ii.image_type,
    NVL2(IM.UPDATED_DATETIME,IM.UPDATED_DATETIME,SYSDATE) LAST_UPDATED,
    NVL(P.PRODUCT_NAME,M.MANUFACTURER_NAME
    ||' '
    ||NVL(IM.MANUFACTURER_PART_NUMBER,IM.PART_NUMBER)) PRODUCT_NAME,
    NVL(P.PRODUCT_NUMBER,NVL(IM.MANUFACTURER_PART_NUMBER,IM.PART_NUMBER)) PRODUCT_NUMBER,
    LP.PRODUCT_PARTNUMBER_KEYWORDS PRODUCT_PARTNUMBER_KEYWORDS,
    P.PRODUCT_ITEM_COUNT,
    IM.SALES_UOM,
    LIM.LONG_DESC1,
    LIM.LONG_DESC2,
    P.PRODUCT_DESC,
    P.PRODUCT_IMAGE_NAME,
    P.PRODUCT_IMAGE_TYPE,
    FP.USER_COUNT
  FROM item_master im,
    manufacturer m,
    BRANDS B,
    FREQUENTLY_PURCHASED FP,
    (SELECT *
    FROM CATEGORY_PATH_VIEW1 CP,
      ITEM_CATEGORY_VIEW IV
    WHERE CP.t3_TAXONOMY_TREE_ID=IV.PRODUCT_CATEGORY_ID
    ) ICV,
    loc_item_master lim,
    item_images ii,
    ITEM_CF_VALUES_VIEW ICVV,
    (SELECT ITEM_ID IFAV_ITEM_ID,
      (RTRIM (XMLAGG (xmlelement (ATTR_VAL, LAV.ATTRIBUTE_VALUE
      || ';')).extract ('//text()'))) FILTER_ATTRIBUTE_VALUES
    FROM ITEM_ATTRIBUTE_VALUES IAV,
      LOC_ATTRIBUTE_VALUES LAV,
      attributes a,
      (SELECT ATTR_NAME FROM DEFAULT_FILTER_ATTRIBUTE
      UNION ALL
      SELECT 'attr_Finish' FROM dual
      ) DFA
    WHERE IAV.LOC_ATTRIBUTE_VALUE_ID=LAV.LOC_ATTRIBUTE_VALUE_ID
    AND iav.attribute_id            =a.attribute_id
    AND UPPER(DFA.ATTR_NAME) LIKE UPPER('attr_%')
    AND UPPER(a.ATTRIBUTE_NAME)=UPPER(REPLACE(DFA.ATTR_NAME,'attr_',''))
    GROUP BY ITEM_ID
    ) IFAV,
    --PRODUCTS P,
    (
    SELECT LP.PRODUCT_DESC1
      ||' '
      || LP.PRODUCT_DESC2 AS PRODUCT_DESC,
      PI.IMAGE_NAME       AS PRODUCT_IMAGE_NAME,
      PI.IMAGE_TYPE       AS PRODUCT_IMAGE_TYPE ,
      PRD.*,
      IM2.PRODUCT_ITEM_COUNT
    FROM PRODUCTS PRD,
      (SELECT IM.PRODUCT_ID,
        COUNT(1) PRODUCT_ITEM_COUNT
      FROM ITEM_MASTER IM
      WHERE IM.ACTIVE!='D'
      GROUP BY IM.PRODUCT_ID
      ) IM2,
      LOC_PRODUCTS LP,
      PRODUCT_IMAGES PI
    WHERE PRD.PRODUCT_ID        = IM2.PRODUCT_ID(+)
    AND LP.PRODUCT_ID(+)        = PRD.PRODUCT_ID
    AND PI.PRODUCT_IMAGES_ID (+)= LP.PRODUCT_IMAGES_ID
    AND NVL(PRD.STATUS,'Y')     = 'Y'
    ) P,
    LOC_PRODUCTS LP,
    EXTERNAL_HITS EH,
    BEST_SELLER BS,
    MANUFACTURER_DISPLAY_NAME MDN,
    DEFAULT_PRODUCT_ITEM_VIEW DPI
  WHERE m.manufacturer_id(+) = im.manufacturer_id
  AND b.brand_id(+)          = im.brand_id
  AND ICV.item_id(+)         = im.item_id
  AND im.item_id             = lim.item_id(+)
  AND lim.locale_id(+)       = 1
  AND ii.item_image_id(+)    = lim.item_image_id
  AND ICVV.field_name(+)     = 'Collections'
  AND IM.ITEM_ID             = ICVV.ITEM_ID(+)
  AND EH.ITEM_ID(+)          = IM.ITEM_ID
  AND BS.ITEM_ID(+)          = IM.ITEM_ID
  AND DPI.ITEM_ID(+)         = IM.ITEM_ID
  AND P.PRODUCT_ID(+)        =IM.PRODUCT_ID
  AND LP.PRODUCT_ID(+)       =P.PRODUCT_ID
  AND LP.LOCALE_ID(+)        =1
  AND IM.ITEM_ID             =IFAV.IFAV_ITEM_ID(+)
  AND IM.ITEM_ID             =MDN.ITEM_ID(+)
  AND im.item_id             = FP.item_id(+)
  ),
  t2 AS
  (SELECT LISTAGG(iavv.attribute_name
    ||'|~|'
    || iavv.attribute_value
    ||' '
    || iavv.attribute_uom, '}~}') WITHIN GROUP (
  ORDER BY filter_seq) ATTRIBUTE_VALUES ,
    iavv.item_id T2_ITEM_ID,
    ic.item_classificaton_id T2_ITEM_CLASSIFICATION_ID
  FROM iav_view iavv,
    category_attributes ca,
    item_classification ic
  WHERE iavv.attribute_id = ca.attribute_id
  AND ca.filter_enabled   ='Y'
  AND iavv.item_id        = ic.item_id(+)
  AND ic.taxonomy_tree_id = ca.taxonomy_tree_id
  AND iavv.locale_id      =1
  GROUP BY iavv.item_id,
    IC.ITEM_CLASSIFICATON_ID
  ),
  T4 AS
  (SELECT LISTAGG(ICVV.FIELD_NAME
    ||'|~|'
    || ICVV.FIELD_VALUE , '}~}') WITHIN GROUP (
  ORDER BY ICVV.DISPLAY_SEQUENCE) CUSTOM_FIELD_VALUES ,
    ICVV.ITEM_ID T4_ITEM_ID
  FROM ITEM_CF_VALUES_VIEW ICVV
  GROUP BY ICVV.ITEM_ID
  )
SELECT KEY,
  ITEM_CLASSIFICATON_ID,
  ITEM_ID,
  PARTNUMBER_KEYWORDS,
  KEYWORDS,
  PART_NUMBER,
  POPULARITY,
  MANUFACTURER_ID,
  BRAND_ID,
  MANUFACTURER_PART_NUMBER,
  UPC,
  NET_PRICE,
  DISPLAY_ONLINE,
  ACTIVE,
  MANUFACTURER_NAME,
  BRAND_NAME,
  PRODUCT_CATEGORY_ID,
  PRODUCT_ID,
  PRODUCT_CATEGORY,
  COLLECTION_KEYWORD,
  LEVEL1_CATEGORY,
  TAXONOMY_ID,
  DEFAULT_CATEGORY,
  SHORT_DESC,
  DISPLAY_PRIORITY,
  BRAND_IMAGE,
  ITEM_IMAGE,
  IMAGE_TYPE,
  LAST_UPDATED ,
  PRODUCT_NAME,
  PRODUCT_NUMBER,
  PAGE_TITLE,
  BEST_SELLER,
  PRODUCT_ITEM_KEYWORDS,
  PRODUCT_PARTNUMBER_KEYWORDS,
  ATTRIBUTE_VALUES,
  T2_ITEM_ID,
  T2_ITEM_CLASSIFICATION_ID,
  HITS,
  CATEGORY_CODE_PATH,
  CATEGORY_NAME_PATH,
  EXTERNAL_HITS,
  NVL(DEFAULT_PRODUCT_ITEM,'N') DEFAULT_PRODUCT_ITEM,
  PRODUCT_ITEM_COUNT,
  CUSTOM_FIELD_VALUES,
  SALES_UOM,
  LONG_DESC1,
  LONG_DESC2,
  MANUFACTURER_DISPLAY_NAME,
  ALT_PART_NUMBER1,
  ALT_PART_NUMBER2,
  PRODUCT_DESC,
  PRODUCT_IMAGE_NAME,
  PRODUCT_IMAGE_TYPE,
  USER_COUNT
FROM T1,
  T2,
  T4
WHERE T1.ITEM_ID            =T2.T2_ITEM_ID(+)
AND T1.ITEM_CLASSIFICATON_ID=T2.T2_ITEM_CLASSIFICATION_ID(+)
AND T1.ITEM_ID              = T4.T4_ITEM_ID(+);


  
  -- For Previously Purchased Items
  
  -- Updated catalog View
  CREATE OR REPLACE FORCE EDITIONABLE VIEW SOLR_CATALOG_NAV_V2
AS
WITH T3 AS
  (SELECT TT.TAXONOMY_TREE_ID,
    TT.LEVEL_NUMBER,
    TT.UPDATED_DATETIME LAST_UPDATE,
    TT.TAXONOMY_ID,
    TT.CATEGORY_NAME,
    SUBSTR(SYS_CONNECT_BY_PATH(TT.CATEGORY_NAME, ' > '), 4) PATH,
    SUBSTR(SYS_CONNECT_BY_PATH(TT.CATEGORY_NAME
    ||'{'
    ||TT.TAXONOMY_TREE_ID
    ||'}', ' > '), 4) SOLR_PATH,
    TT.DISP_SEQ,
    TT.CATEGORY_DESC,
    TT.BANNER_ID,
    TT.IMAGE_NAME,
    TT.VALUE_LIST_ID,
    TT.PARENT_TT_ID,
    TT.TOP_BANNER_ID,
    TT.LEFT_BANNER_ID,
    TT.RIGHT_BANNER_ID,
    TT.BOTTOM_BANNER_ID,
    TT.STATIC_PAGE_ID
  FROM TAXONOMY_TREE TT,
    TAXONOMIES T
  WHERE NVL(T.CIMM_OR_ES,'CIMM') ='CIMM'
  AND T.TAXONOMY_ID              =TT.TAXONOMY_ID
  AND T.TAXONOMY_NAME           IN
    (SELECT Distinct SP.CONFIG_VALUE
    FROM SYSTEM_PARAMETERS_view SP
    WHERE SP.CONFIG_KEY='ACTIVE_TAXONOMY_VERSION'
    )
    START WITH TT.LEVEL_NUMBER                   =1
    CONNECT BY NOCYCLE PRIOR TT.TAXONOMY_TREE_ID = TT.PARENT_TT_ID
  ORDER SIBLINGS BY DISP_SEQ
  ),
  T1 AS
  (SELECT TO_NUMBER(CONFIG_VALUE) GENERAL_CATALOGID
  FROM SYSTEM_PARAMETERS
  WHERE CONFIG_KEY = 'GENERALCATALOGID'
  ),
  T2 AS
  (SELECT DISTINCT BC2.SUBSET_ID,
    T1.GENERAL_CATALOGID
  FROM SUBSETS BC2,
    T1
  WHERE BC2.SUBSET_ID          IS NOT NULL
   ),
  T4 AS
  (SELECT DISTINCT BC1.SUBSET_ID
  FROM SUBSETS BC1
  WHERE BC1.SUBSET_ID          IS NOT NULL
  ),
  T8 AS
  (SELECT DISTINCT SEARCH_IDX,
    TAXONOMY_TREE_ID
  FROM
    ( SELECT DISTINCT 'PH_SEARCH_'
      ||T2.GENERAL_CATALOGID
      ||'_'
      ||T2.SUBSET_ID SEARCH_IDX,
      IC.TAXONOMY_TREE_ID
    FROM ITEM_CLASSIFICATION IC,
      T2,
      ITEM_PRICES IP3,
      ITEM_MASTER IM
    WHERE IC.ITEM_ID      =IP3.ITEM_ID
    AND IP3.STATUS        ='A'
    AND IP3.SUBSET_ID    IN (T2.SUBSET_ID)
    AND T2.SUBSET_ID!     =T2.GENERAL_CATALOGID
    AND IM.ITEM_ID        = IP3.ITEM_ID
    AND IM.DISPLAY_ONLINE ='Y'
    AND IM.ACTIVE         = 'Y'
    UNION ALL
    SELECT DISTINCT 'PH_SEARCH_'
      ||T2.GENERAL_CATALOGID
      ||'_'
      ||T2.SUBSET_ID SEARCH_IDX,
      IC.TAXONOMY_TREE_ID
    FROM ITEM_CLASSIFICATION IC,
      T2,
      ITEM_PRICES IP3,
      ITEM_MASTER IM
    WHERE IC.ITEM_ID      =IP3.ITEM_ID
    AND IP3.STATUS        ='A'
    AND IP3.SUBSET_ID    IN (T2.GENERAL_CATALOGID)
    AND T2.SUBSET_ID!     =T2.GENERAL_CATALOGID
    AND IM.ITEM_ID        = IP3.ITEM_ID
    AND IM.DISPLAY_ONLINE ='Y'
    AND IM.ACTIVE         = 'Y'
    UNION ALL
    SELECT DISTINCT 'PH_SEARCH_'
      ||T1.GENERAL_CATALOGID SEARCH_IDX,
      IC.TAXONOMY_TREE_ID
    FROM T1 T1,
      ITEM_CLASSIFICATION IC,
      ITEM_PRICES IP3,
      ITEM_MASTER IM
    WHERE IC.ITEM_ID      =IP3.ITEM_ID
    AND IP3.SUBSET_ID     =T1.GENERAL_CATALOGID
    AND IP3.STATUS        ='A'
    AND IM.ITEM_ID        = IP3.ITEM_ID
    AND IM.DISPLAY_ONLINE ='Y'
    AND IM.ACTIVE         = 'Y'
    UNION ALL
    SELECT DISTINCT 'PH_SEARCH_'
      ||T4.SUBSET_ID SEARCH_IDX,
      IC.TAXONOMY_TREE_ID
    FROM T4 T4,
      ITEM_CLASSIFICATION IC,
      ITEM_PRICES IP1,
      ITEM_MASTER IM
    WHERE IC.ITEM_ID      =IP1.ITEM_ID
    AND IM.ITEM_ID        = IP1.ITEM_ID
    AND IM.DISPLAY_ONLINE ='Y'
    AND IM.ACTIVE         = 'Y'
    AND IP1.STATUS        ='A'
    AND IP1.SUBSET_ID    IN (T4.SUBSET_ID)
    AND IP1.SUBSET_ID!    =
      (SELECT T1.GENERAL_CATALOGID FROM T1
      )
    )
  ),
  T9 AS
  (SELECT DISTINCT SEARCH_IDX,
    TAXONOMY_TREE_ID
  FROM
    (SELECT T8.SEARCH_IDX,
      T3.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3
    WHERE T8.TAXONOMY_TREE_ID=T3.TAXONOMY_TREE_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID                      =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL8                                 IS NOT NULL
    AND T3.LEVEL_NUMBER!                           =8
    AND T12.TAXONOMY_TREE_ID                       =T3.LEVEL8
      CONNECT BY NOCYCLE PRIOR T12.TAXONOMY_TREE_ID=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID                      =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL7                                 IS NOT NULL
    AND T3.LEVEL_NUMBER!                           =7
    AND T12.TAXONOMY_TREE_ID                       =T3.LEVEL7
      CONNECT BY NOCYCLE PRIOR T12.TAXONOMY_TREE_ID=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID                      =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL6                                 IS NOT NULL
    AND T3.LEVEL_NUMBER!                           =6
    AND T12.TAXONOMY_TREE_ID                       =T3.LEVEL6
      CONNECT BY NOCYCLE PRIOR T12.TAXONOMY_TREE_ID=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID                      =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL5                                 IS NOT NULL
    AND T3.LEVEL_NUMBER!                           =5
    AND T12.TAXONOMY_TREE_ID                       =T3.LEVEL5
      CONNECT BY NOCYCLE PRIOR T12.TAXONOMY_TREE_ID=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID                      =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL4                                 IS NOT NULL
    AND T3.LEVEL_NUMBER!                           =4
    AND T12.TAXONOMY_TREE_ID                       =T3.LEVEL4
      CONNECT BY NOCYCLE PRIOR T12.TAXONOMY_TREE_ID=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID            =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL3                       IS NOT NULL
    AND T3.LEVEL_NUMBER!                 =3
    AND T12.TAXONOMY_TREE_ID             =T3.LEVEL3
      CONNECT BY NOCYCLE PRIOR T12.LEVEL3=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID            =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL2                       IS NOT NULL
    AND T3.LEVEL_NUMBER!                 =2
    AND T12.TAXONOMY_TREE_ID             =T3.LEVEL2
      CONNECT BY NOCYCLE PRIOR T12.LEVEL2=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID            =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL1                       IS NOT NULL
    AND T3.LEVEL_NUMBER!                 =1
    AND T12.TAXONOMY_TREE_ID             =T3.LEVEL1
      CONNECT BY NOCYCLE PRIOR T12.LEVEL1=T12.PARENT_TT_ID
    )
  )
SELECT T9.SEARCH_IDX,
  TT.TAXONOMY_TREE_ID,
  TT.CATEGORY_NAME,
  TT.LEVEL_NUMBER,
  PATH,
  TT.LAST_UPDATE,
  ROWNUM ID,
  NULL ACTION,
  T9.SEARCH_IDX
  ||'_'
  ||TT.TAXONOMY_TREE_ID KEY,
  TT.TAXONOMY_ID,
  --TRIM(SUBSTR(SOLR_PATH, 1, (INSTR(SOLR_PATH, '{', -1)-1))) SOLR_PATH,
  TRIM(SOLR_PATH) SOLR_PATH,
  TT.DISP_SEQ,
  TT.CATEGORY_DESC,
  TT.BANNER_ID,
  TT.IMAGE_NAME,
  TT.VALUE_LIST_ID,
  TT.PARENT_TT_ID,
  TT.TOP_BANNER_ID,
  TT.LEFT_BANNER_ID,
  TT.RIGHT_BANNER_ID,
  TT.BOTTOM_BANNER_ID,
  TT.STATIC_PAGE_ID
FROM T9,
  T3 TT
WHERE T9.TAXONOMY_TREE_ID=TT.TAXONOMY_TREE_ID;
--Updated Catalog View


-- Update Prise Data view
CREATE OR REPLACE FORCE EDITIONABLE VIEW CATALOG_IDX_NEW_V2
AS
SELECT CIDX."SEARCH_IDX",
    CIDX."ITEM_PRICE_ID",
    CIDX."ITEM_ID",
    CIDX."NET_PRICE",
	CIDX."CLEARANCE",
    CIDX."PACK_DESC",
    CIDX."SALES_UOM",
    CIDX."SALES_QTY",
    CIDX."CUSTOMER_PARTNUMBER_KEYWORDS",
    CIDX."MIN_ORDER_QTY",
    CIDX."ORDER_QTY_INTERVAL",
    CIDX."IS_FEATURED_PRODUCT",
    CIDX."DISPLAY_PRICING",
    CIDX."UNSPSC",
    CIDX."CUSTOMER_PART_NUMBER",
    CIDX."MATERIAL_GROUP",
    CIDX."MATERIAL_NUMBER",
    CIDX."PACKAGE_FLAG",
    CIDX."PACKAGE_QTY",
    CIDX."UPDATED_DATETIME",
    CIDX."KEY",
    UM.UOM_DESC
  FROM
    ( WITH T1 AS
    (SELECT TO_NUMBER(CONFIG_VALUE) GENERAL_CATALOGID
    FROM SYSTEM_PARAMETERS
    WHERE CONFIG_KEY = 'GENERALCATALOGID'
    ),
    T2 AS
    (SELECT DISTINCT BC2.SUBSET_ID,
      T1.GENERAL_CATALOGID
    FROM SUBSETS BC2,
      T1
    WHERE BC2.SUBSET_ID          IS NOT NULL
    )
  SELECT 'PH_SEARCH_'
    ||T2.GENERAL_CATALOGID
    ||'_'
    ||T2.SUBSET_ID SEARCH_IDX,
    IP3.ITEM_PRICE_ID,
    IP3.ITEM_ID,
    IP3.NET_PRICE,
	IP3.CLEARANCE,
    NVL(IP3.PACK_DESC,IM.PACK_DESC) PACK_DESC,
    NVL(IP3.SALES_UOM,IM.SALES_UOM) SALES_UOM,
    IP3.SALES_QTY,
    IP3.CUSTOMER_PARTNUMBER_KEYWORDS,
    CASE
      WHEN NVL(IP3.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP3.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP3.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP3.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP3.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP3.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
    IP3.IS_FEATURED_PRODUCT,
    IP3.DISPLAY_PRICING,
    NVL(IP3.UNSPSC,IM.UNSPSC) UNSPSC,
    IP3.CUSTOMER_PART_NUMBER,
    IP3.MATERIAL_GROUP,
    IP3.MATERIAL_NUMBER,
    IP3.PACKAGE_FLAG,
    CASE
      WHEN NVL(IP3.PACKAGE_QTY,1) < 2
      THEN NVL(IM.PACKAGE_QTY,1)
      WHEN NVL(IP3.PACKAGE_QTY,1) > 1
      THEN NVL(IP3.PACKAGE_QTY,1)
    END PACKAGE_QTY,
    IP3.UPDATED_DATETIME,
    'PH_SEARCH_'
    ||T2.GENERAL_CATALOGID
    ||'_'
    ||T2.SUBSET_ID
    ||'_'
    ||IP3.ITEM_PRICE_ID KEY
  FROM ITEM_PRICES IP3,
    ITEM_MASTER IM,
    T2
  WHERE IM.ITEM_ID     = IP3.ITEM_ID
  AND IP3.SUBSET_ID    =T2.GENERAL_CATALOGID
  AND IP3.ITEM_ID NOT IN
    (SELECT IP4.ITEM_ID FROM ITEM_PRICES IP4 WHERE IP4.SUBSET_ID=T2.SUBSET_ID
    )
  AND IP3.STATUS='A'
  UNION ALL
  SELECT 'PH_SEARCH_'
    ||T1.GENERAL_CATALOGID
    ||'_'
    ||IP.SUBSET_ID SEARCH_IDX,
    IP.ITEM_PRICE_ID,
    IP.ITEM_ID,
    IP.NET_PRICE,
	IP.CLEARANCE,
    NVL(IP.PACK_DESC,IM.PACK_DESC) PACK_DESC,
    NVL(IP.SALES_UOM,IM.SALES_UOM) SALES_UOM,
    IP.SALES_QTY,
    IP.CUSTOMER_PARTNUMBER_KEYWORDS,
    CASE
      WHEN NVL(IP.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
    IP.IS_FEATURED_PRODUCT,
    IP.DISPLAY_PRICING,
    NVL(IP.UNSPSC,IM.UNSPSC) UNSPSC,
    IP.CUSTOMER_PART_NUMBER,
    IP.MATERIAL_GROUP,
    IP.MATERIAL_NUMBER,
    IP.PACKAGE_FLAG,
    CASE
      WHEN NVL(IP.PACKAGE_QTY,1) < 2
      THEN NVL(IM.PACKAGE_QTY,1)
      WHEN NVL(IP.PACKAGE_QTY,1) > 1
      THEN NVL(IP.PACKAGE_QTY,1)
    END PACKAGE_QTY,
    IP.UPDATED_DATETIME,
    'PH_SEARCH_'
    ||T1.GENERAL_CATALOGID
    ||'_'
    ||IP.SUBSET_ID
    ||'_'
    ||IP.ITEM_PRICE_ID KEY
  FROM ITEM_PRICES IP,
    ITEM_MASTER IM,
    T1
  WHERE IM.ITEM_ID  = IP.ITEM_ID
  AND IP.STATUS     ='A'
  AND IP.SUBSET_ID IN
    (SELECT DISTINCT BC2.SUBSET_ID
    FROM SUBSETS BC2
    WHERE BC2.SUBSET_ID          IS NOT NULL
    )
  AND IP.SUBSET_ID!=
    (SELECT T1.GENERAL_CATALOGID FROM T1
    )
  UNION ALL
  SELECT 'PH_SEARCH_'
    ||T1.GENERAL_CATALOGID SEARCH_IDX,
    IP3.ITEM_PRICE_ID,
    IP3.ITEM_ID,
    IP3.NET_PRICE,
	IP3.CLEARANCE,
    NVL(IP3.PACK_DESC,IM.PACK_DESC) PACK_DESC,
    NVL(IP3.SALES_UOM,IM.SALES_UOM) SALES_UOM,
    IP3.SALES_QTY,
    IP3.CUSTOMER_PARTNUMBER_KEYWORDS,
    CASE
      WHEN NVL(IP3.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP3.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP3.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP3.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP3.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP3.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
    IP3.IS_FEATURED_PRODUCT,
    IP3.DISPLAY_PRICING,
    NVL(IP3.UNSPSC,IM.UNSPSC) UNSPSC,
    IP3.CUSTOMER_PART_NUMBER,
    IP3.MATERIAL_GROUP,
    IP3.MATERIAL_NUMBER,
    IP3.PACKAGE_FLAG,
    CASE
      WHEN NVL(IP3.PACKAGE_QTY,1) < 2
      THEN NVL(IM.PACKAGE_QTY,1)
      WHEN NVL(IP3.PACKAGE_QTY,1) > 1
      THEN NVL(IP3.PACKAGE_QTY,1)
    END PACKAGE_QTY,
    IP3.UPDATED_DATETIME,
    'PH_SEARCH_'
    ||T1.GENERAL_CATALOGID
    ||'_'
    ||IP3.ITEM_PRICE_ID KEY
  FROM ITEM_PRICES IP3,
    ITEM_MASTER IM,
    T1
  WHERE IM.ITEM_ID = IP3.ITEM_ID
  AND IP3.SUBSET_ID=T1.GENERAL_CATALOGID
  AND IP3.STATUS   ='A'
  UNION ALL
  SELECT 'PH_SEARCH_'
    ||IP1.SUBSET_ID SEARCH_IDX,
    IP1.ITEM_PRICE_ID,
    IP1.ITEM_ID,
    IP1.NET_PRICE,
	IP1.CLEARANCE,
    NVL(IP1.PACK_DESC,IM.PACK_DESC) PACK_DESC,
    NVL(IP1.SALES_UOM,IM.SALES_UOM) SALES_UOM,
    IP1.SALES_QTY,
    IP1.CUSTOMER_PARTNUMBER_KEYWORDS,
    CASE
      WHEN NVL(IP1.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP1.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP1.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP1.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP1.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP1.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
    IP1.IS_FEATURED_PRODUCT,
    IP1.DISPLAY_PRICING,
    NVL(IP1.UNSPSC,IM.UNSPSC) UNSPSC,
    IP1.CUSTOMER_PART_NUMBER,
    IP1.MATERIAL_GROUP,
    IP1.MATERIAL_NUMBER,
    IP1.PACKAGE_FLAG,
    CASE
      WHEN NVL(IP1.PACKAGE_QTY,1) < 2
      THEN NVL(IM.PACKAGE_QTY,1)
      WHEN NVL(IP1.PACKAGE_QTY,1) > 1
      THEN NVL(IP1.PACKAGE_QTY,1)
    END PACKAGE_QTY,
    IP1.UPDATED_DATETIME,
    'PH_SEARCH_'
    ||IP1.SUBSET_ID
    ||'_'
    ||IP1.ITEM_PRICE_ID KEY
  FROM ITEM_PRICES IP1,
    ITEM_MASTER IM,
    T1
  WHERE IM.ITEM_ID   = IP1.ITEM_ID
  AND IP1.STATUS     ='A'
  AND IP1.SUBSET_ID IN
    (SELECT DISTINCT BC1.SUBSET_ID
    FROM Subsets BC1
    WHERE BC1.SUBSET_ID          IS NOT NULL
       )
  AND IP1.SUBSET_ID!=
    (SELECT T1.GENERAL_CATALOGID FROM T1
    )
    ) CIDX,
    UNIT_OF_MEASURE UM
  WHERE CIDX.SALES_UOM=UM.UOM_NAME(+);
  
  -- Category Image Url TYPe
  CREATE OR REPLACE FORCE EDITIONABLE VIEW SOLR_CATALOG_NAV_V2
        AS
WITH T3 AS
  (SELECT TT.TAXONOMY_TREE_ID,
    TT.LEVEL_NUMBER,
    TT.UPDATED_DATETIME LAST_UPDATE,
    TT.TAXONOMY_ID,
    TT.CATEGORY_NAME,
    SUBSTR(SYS_CONNECT_BY_PATH(TT.CATEGORY_NAME, ' > '), 4) PATH,
    SUBSTR(SYS_CONNECT_BY_PATH(TT.CATEGORY_NAME
    ||'{'
    ||TT.TAXONOMY_TREE_ID
    ||'}', ' > '), 4) SOLR_PATH,
    TT.DISP_SEQ,
    TT.CATEGORY_DESC,
    TT.BANNER_ID,
    TT.IMAGE_NAME,
	TT.IMAGE_TYPE,
    TT.VALUE_LIST_ID,
    TT.PARENT_TT_ID,
    TT.TOP_BANNER_ID,
    TT.LEFT_BANNER_ID,
    TT.RIGHT_BANNER_ID,
    TT.BOTTOM_BANNER_ID,
    TT.STATIC_PAGE_ID
  FROM TAXONOMY_TREE TT,
    TAXONOMIES T
  WHERE NVL(T.CIMM_OR_ES,'CIMM') ='CIMM'
  AND T.TAXONOMY_ID              =TT.TAXONOMY_ID
  AND T.TAXONOMY_NAME           IN
    (SELECT SP.CONFIG_VALUE
    FROM SYSTEM_PARAMETERS SP
    WHERE SP.CONFIG_KEY='ACTIVE_TAXONOMY_VERSION'
    )
    START WITH TT.LEVEL_NUMBER                   =1
    CONNECT BY NOCYCLE PRIOR TT.TAXONOMY_TREE_ID = TT.PARENT_TT_ID
  ORDER SIBLINGS BY DISP_SEQ
  ),
  T1 AS
  (SELECT TO_NUMBER(CONFIG_VALUE) GENERAL_CATALOGID
  FROM SYSTEM_PARAMETERS
  WHERE CONFIG_KEY = 'GENERALCATALOGID'
  ),
  T2 AS
  (SELECT DISTINCT BC2.SUBSET_ID,
    T1.GENERAL_CATALOGID
  FROM BUYING_COMPANY BC2,
    T1
  WHERE BC2.SUBSET_ID          IS NOT NULL
  AND BC2.GENERAL_CATALOG_ACCESS='Y'
  ),
  T4 AS
  (SELECT DISTINCT BC1.SUBSET_ID
  FROM BUYING_COMPANY BC1
  WHERE BC1.SUBSET_ID          IS NOT NULL
  AND BC1.GENERAL_CATALOG_ACCESS='N'
  ),
  T8 AS
  (SELECT DISTINCT SEARCH_IDX,
    TAXONOMY_TREE_ID
  FROM
    ( SELECT DISTINCT 'PH_SEARCH_'
      ||T2.GENERAL_CATALOGID
      ||'_'
      ||T2.SUBSET_ID SEARCH_IDX,
      IC.TAXONOMY_TREE_ID
    FROM ITEM_CLASSIFICATION IC,
      T2,
      ITEM_PRICES IP3,
      ITEM_MASTER IM
    WHERE IC.ITEM_ID      =IP3.ITEM_ID
    AND IP3.STATUS        ='A'
    AND IP3.SUBSET_ID    IN (T2.SUBSET_ID)
    AND T2.SUBSET_ID!     =T2.GENERAL_CATALOGID
    AND IM.ITEM_ID        = IP3.ITEM_ID
    AND IM.DISPLAY_ONLINE ='Y'
    AND IM.ACTIVE         = 'Y'
    UNION ALL
    SELECT DISTINCT 'PH_SEARCH_'
      ||T2.GENERAL_CATALOGID
      ||'_'
      ||T2.SUBSET_ID SEARCH_IDX,
      IC.TAXONOMY_TREE_ID
    FROM ITEM_CLASSIFICATION IC,
      T2,
      ITEM_PRICES IP3,
      ITEM_MASTER IM
    WHERE IC.ITEM_ID      =IP3.ITEM_ID
    AND IP3.STATUS        ='A'
    AND IP3.SUBSET_ID    IN (T2.GENERAL_CATALOGID)
    AND T2.SUBSET_ID!     =T2.GENERAL_CATALOGID
    AND IM.ITEM_ID        = IP3.ITEM_ID
    AND IM.DISPLAY_ONLINE ='Y'
    AND IM.ACTIVE         = 'Y'
    UNION ALL
    SELECT DISTINCT 'PH_SEARCH_'
      ||T1.GENERAL_CATALOGID SEARCH_IDX,
      IC.TAXONOMY_TREE_ID
    FROM T1 T1,
      ITEM_CLASSIFICATION IC,
      ITEM_PRICES IP3,
      ITEM_MASTER IM
    WHERE IC.ITEM_ID      =IP3.ITEM_ID
    AND IP3.SUBSET_ID     =T1.GENERAL_CATALOGID
    AND IP3.STATUS        ='A'
    AND IM.ITEM_ID        = IP3.ITEM_ID
    AND IM.DISPLAY_ONLINE ='Y'
    AND IM.ACTIVE         = 'Y'
    UNION ALL
    SELECT DISTINCT 'PH_SEARCH_'
      ||T4.SUBSET_ID SEARCH_IDX,
      IC.TAXONOMY_TREE_ID
    FROM T4 T4,
      ITEM_CLASSIFICATION IC,
      ITEM_PRICES IP1,
      ITEM_MASTER IM
    WHERE IC.ITEM_ID      =IP1.ITEM_ID
    AND IM.ITEM_ID        = IP1.ITEM_ID
    AND IM.DISPLAY_ONLINE ='Y'
    AND IM.ACTIVE         = 'Y'
    AND IP1.STATUS        ='A'
    AND IP1.SUBSET_ID    IN (T4.SUBSET_ID)
    AND IP1.SUBSET_ID!    =
      (SELECT T1.GENERAL_CATALOGID FROM T1
      )
    )
  ),
  T9 AS
  (SELECT DISTINCT SEARCH_IDX,
    TAXONOMY_TREE_ID
  FROM
    (SELECT T8.SEARCH_IDX,
      T3.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3
    WHERE T8.TAXONOMY_TREE_ID=T3.TAXONOMY_TREE_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID                      =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL8                                 IS NOT NULL
    AND T3.LEVEL_NUMBER!                           =8
    AND T12.TAXONOMY_TREE_ID                       =T3.LEVEL8
      CONNECT BY NOCYCLE PRIOR T12.TAXONOMY_TREE_ID=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID                      =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL7                                 IS NOT NULL
    AND T3.LEVEL_NUMBER!                           =7
    AND T12.TAXONOMY_TREE_ID                       =T3.LEVEL7
      CONNECT BY NOCYCLE PRIOR T12.TAXONOMY_TREE_ID=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID                      =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL6                                 IS NOT NULL
    AND T3.LEVEL_NUMBER!                           =6
    AND T12.TAXONOMY_TREE_ID                       =T3.LEVEL6
      CONNECT BY NOCYCLE PRIOR T12.TAXONOMY_TREE_ID=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID                      =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL5                                 IS NOT NULL
    AND T3.LEVEL_NUMBER!                           =5
    AND T12.TAXONOMY_TREE_ID                       =T3.LEVEL5
      CONNECT BY NOCYCLE PRIOR T12.TAXONOMY_TREE_ID=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID                      =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL4                                 IS NOT NULL
    AND T3.LEVEL_NUMBER!                           =4
    AND T12.TAXONOMY_TREE_ID                       =T3.LEVEL4
      CONNECT BY NOCYCLE PRIOR T12.TAXONOMY_TREE_ID=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID            =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL3                       IS NOT NULL
    AND T3.LEVEL_NUMBER!                 =3
    AND T12.TAXONOMY_TREE_ID             =T3.LEVEL3
      CONNECT BY NOCYCLE PRIOR T12.LEVEL3=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID            =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL2                       IS NOT NULL
    AND T3.LEVEL_NUMBER!                 =2
    AND T12.TAXONOMY_TREE_ID             =T3.LEVEL2
      CONNECT BY NOCYCLE PRIOR T12.LEVEL2=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID            =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL1                       IS NOT NULL
    AND T3.LEVEL_NUMBER!                 =1
    AND T12.TAXONOMY_TREE_ID             =T3.LEVEL1
      CONNECT BY NOCYCLE PRIOR T12.LEVEL1=T12.PARENT_TT_ID
    )
  )
SELECT T9.SEARCH_IDX,
  TT.TAXONOMY_TREE_ID,
  TT.CATEGORY_NAME,
  TT.LEVEL_NUMBER,
  PATH,
  TT.LAST_UPDATE,
  ROWNUM ID,
  NULL ACTION,
  T9.SEARCH_IDX
  ||'_'
  ||TT.TAXONOMY_TREE_ID KEY,
  TT.TAXONOMY_ID,
  --TRIM(SUBSTR(SOLR_PATH, 1, (INSTR(SOLR_PATH, '{', -1)-1))) SOLR_PATH,
  TRIM(SOLR_PATH) SOLR_PATH,
  TT.DISP_SEQ,
  TT.CATEGORY_DESC,
  TT.BANNER_ID,
  TT.IMAGE_NAME,
  TT.IMAGE_TYPE,
  TT.VALUE_LIST_ID,
  TT.PARENT_TT_ID,
  TT.TOP_BANNER_ID,
  TT.LEFT_BANNER_ID,
  TT.RIGHT_BANNER_ID,
  TT.BOTTOM_BANNER_ID,
  TT.STATIC_PAGE_ID
FROM T9,
  T3 TT
WHERE T9.TAXONOMY_TREE_ID=TT.TAXONOMY_TREE_ID;
-- Category Image Url Type

-- Sep 11 2017 before changing the view - removed concatinate keyword and product keyword
 CREATE OR REPLACE FORCE EDITIONABLE VIEW "PRODUCTION"."SEARCH_ITEM_MASTER_VIEW_V8" ("KEY", "ITEM_CLASSIFICATON_ID", "ITEM_ID", "PARTNUMBER_KEYWORDS", "KEYWORDS", "PART_NUMBER", "POPULARITY", "MANUFACTURER_ID", "BRAND_ID", "MANUFACTURER_PART_NUMBER", "UPC", "NET_PRICE", "DISPLAY_ONLINE", "ACTIVE", "MANUFACTURER_NAME", "BRAND_NAME", "PRODUCT_CATEGORY_ID", "PRODUCT_ID", "PRODUCT_CATEGORY", "COLLECTION_KEYWORD", "LEVEL1_CATEGORY", "TAXONOMY_ID", "DEFAULT_CATEGORY", "SHORT_DESC", "DISPLAY_PRIORITY", "BRAND_IMAGE", "ITEM_IMAGE", "IMAGE_TYPE", "LAST_UPDATED", "PRODUCT_NAME", "PRODUCT_NUMBER", "PAGE_TITLE", "BEST_SELLER", "PRODUCT_ITEM_KEYWORDS", "PRODUCT_PARTNUMBER_KEYWORDS", "ATTRIBUTE_VALUES", "T2_ITEM_ID", "T2_ITEM_CLASSIFICATION_ID", "HITS", "CATEGORY_CODE_PATH", "CATEGORY_NAME_PATH", "EXTERNAL_HITS", "DEFAULT_PRODUCT_ITEM", "PRODUCT_ITEM_COUNT", "CUSTOM_FIELD_VALUES", "SALES_UOM", "LONG_DESC1", "LONG_DESC2", "MANUFACTURER_DISPLAY_NAME", "ALT_PART_NUMBER1", "ALT_PART_NUMBER2", "PRODUCT_DESC", "PRODUCT_IMAGE_NAME", "PRODUCT_IMAGE_TYPE", "USER_COUNT") AS 
  WITH t1 AS
  (SELECT nvl2(ICV.item_classificaton_id,ICV.item_classificaton_id
    || '||'
    || IM.ITEM_ID,IM.ITEM_ID) KEY,
    NVL2(ICV.CATEGORY_CODE_PATH,'0:'
    ||ICV.CATEGORY_CODE_PATH,'0') CATEGORY_CODE_PATH,
    icv.CATEGORY_NAME_PATH,
    ICV.item_classificaton_id,
    im.item_id,
    IM.PARTNUMBER_KEYWORDS PARTNUMBER_KEYWORDS,
    IM.KEYWORDS ||' ; '||
    REGEXP_REPLACE(B.BRAND_NAME, '[^a-zA-Z0-9]', '') ||' '|| IM.MANUFACTURER_PART_NUMBER || ' ; ' ||
    REGEXP_REPLACE(M.manufacturer_name, '[^a-zA-Z0-9]', '') ||' '|| IM.MANUFACTURER_PART_NUMBER || ' ; ' ||
    B.BRAND_NAME ||' '|| REGEXP_REPLACE(IM.MANUFACTURER_PART_NUMBER, '[^a-zA-Z0-9]', '')  || ' ; ' ||
    M.manufacturer_name ||' '|| REGEXP_REPLACE(IM.MANUFACTURER_PART_NUMBER, '[^a-zA-Z0-9]', '')  || ' ; ' ||
    REGEXP_REPLACE(B.BRAND_NAME, '[^a-zA-Z0-9]', '') ||' '|| REGEXP_REPLACE(IM.MANUFACTURER_PART_NUMBER, '[^a-zA-Z0-9]', '')   || ' ; ' ||
    REGEXP_REPLACE(M.manufacturer_name, '[^a-zA-Z0-9]', '') ||' '|| REGEXP_REPLACE(IM.MANUFACTURER_PART_NUMBER, '[^a-zA-Z0-9]', '') || ' ; ' ||
    REGEXP_REPLACE(NVL(lim.short_desc,LIM.INVOICE_DESC), '[^a-zA-Z0-9-]', '') || ' ; ' ||
    LP.PRODUCT_ITEM_KEYWORDS || ' ; ' ||
    LP.PRODUCT_PARTNUMBER_KEYWORDS  AS 
    KEYWORDS,
	IM.KEYWORDS ||' ; '||
    REGEXP_REPLACE(B.BRAND_NAME, '[^a-zA-Z0-9]', '') ||' '|| IM.MANUFACTURER_PART_NUMBER || ' ; ' ||
    REGEXP_REPLACE(M.manufacturer_name, '[^a-zA-Z0-9]', '') ||' '|| IM.MANUFACTURER_PART_NUMBER || ' ; ' ||
    B.BRAND_NAME ||' '|| REGEXP_REPLACE(IM.MANUFACTURER_PART_NUMBER, '[^a-zA-Z0-9]', '')  || ' ; ' ||
    M.manufacturer_name ||' '|| REGEXP_REPLACE(IM.MANUFACTURER_PART_NUMBER, '[^a-zA-Z0-9]', '')  || ' ; ' ||
    REGEXP_REPLACE(B.BRAND_NAME, '[^a-zA-Z0-9]', '') ||' '|| REGEXP_REPLACE(IM.MANUFACTURER_PART_NUMBER, '[^a-zA-Z0-9]', '')   || ' ; ' ||
    REGEXP_REPLACE(M.manufacturer_name, '[^a-zA-Z0-9]', '') ||' '|| REGEXP_REPLACE(IM.MANUFACTURER_PART_NUMBER, '[^a-zA-Z0-9]', '') || ' ; ' ||
    REGEXP_REPLACE(NVL(lim.short_desc,LIM.INVOICE_DESC), '[^a-zA-Z0-9-]', '') || ' ; ' ||
    LP.PRODUCT_ITEM_KEYWORDS || ' ; ' ||
    LP.PRODUCT_PARTNUMBER_KEYWORDS AS PRODUCT_ITEM_KEYWORDS,
    im.part_number,
    im.popularity,
    im.manufacturer_id,
    im.brand_id,
    im.manufacturer_part_number,
    im.upc,
    IM.NET_PRICE,
    LIM.PAGE_TITLE,
    im.ALT_PART_NUMBER1,
    im.ALT_PART_NUMBER2,
    im.display_online,
    im.active,
    IM.HITS,
    EH.EXTERNAL_HITS,
    BS.BEST_SELLER,
    MDN.MANUFACTURER_DISPLAY_NAME,
    ICVV.FIELD_VALUE COLLECTION_KEYWORD,
    nvl2(LP.PRODUCT_ID,DPI.DEFAULT_PRODUCT_ITEM,'Y') DEFAULT_PRODUCT_ITEM,
    m.manufacturer_name,
    b.brand_name,
    ICV.PRODUCT_CATEGORY_ID,
    LP.PRODUCT_ID PRODUCT_ID,
    ICV.PRODUCT_category,
    ICV.LEVEL1_CATEGORY,
    ICV.TAXONOMY_ID,
    NVL2(ICV.DEFAULT_CATEGORY,ICV.DEFAULT_CATEGORY,'Y') DEFAULT_CATEGORY,
    NVL(lim.short_desc,LIM.INVOICE_DESC) SHORT_DESC,
    ICV.display_priority,
    b.brand_image,
    ii.image_name ITEM_IMAGE,
    ii.image_type,
    NVL2(IM.UPDATED_DATETIME,IM.UPDATED_DATETIME,SYSDATE) LAST_UPDATED,
    NVL(P.PRODUCT_NAME,M.MANUFACTURER_NAME
    ||' '
    ||NVL(IM.MANUFACTURER_PART_NUMBER,IM.PART_NUMBER)) PRODUCT_NAME,
    NVL(P.PRODUCT_NUMBER,NVL(IM.MANUFACTURER_PART_NUMBER,IM.PART_NUMBER)) PRODUCT_NUMBER,
    LP.PRODUCT_PARTNUMBER_KEYWORDS PRODUCT_PARTNUMBER_KEYWORDS,
    P.PRODUCT_ITEM_COUNT,
    IM.SALES_UOM,
    LIM.LONG_DESC1,
    LIM.LONG_DESC2,
    P.PRODUCT_DESC,
    P.PRODUCT_IMAGE_NAME,
    P.PRODUCT_IMAGE_TYPE,
    FP.USER_COUNT
  FROM item_master im,
    manufacturer m,
    BRANDS B,
    FREQUENTLY_PURCHASED FP,
    (SELECT *
    FROM CATEGORY_PATH_VIEW1 CP,
      ITEM_CATEGORY_VIEW IV
    WHERE CP.t3_TAXONOMY_TREE_ID=IV.PRODUCT_CATEGORY_ID
    ) ICV,
    loc_item_master lim,
    item_images ii,
    ITEM_CF_VALUES_VIEW ICVV,
    (SELECT ITEM_ID IFAV_ITEM_ID,
      (RTRIM (XMLAGG (xmlelement (ATTR_VAL, LAV.ATTRIBUTE_VALUE
      || ';')).extract ('//text()'))) FILTER_ATTRIBUTE_VALUES
    FROM ITEM_ATTRIBUTE_VALUES IAV,
      LOC_ATTRIBUTE_VALUES LAV,
      attributes a,
      (SELECT ATTR_NAME FROM DEFAULT_FILTER_ATTRIBUTE
      UNION ALL
      SELECT 'attr_Finish' FROM dual
      ) DFA
    WHERE IAV.LOC_ATTRIBUTE_VALUE_ID=LAV.LOC_ATTRIBUTE_VALUE_ID
    AND iav.attribute_id            =a.attribute_id
    AND UPPER(DFA.ATTR_NAME) LIKE UPPER('attr_%')
    AND UPPER(a.ATTRIBUTE_NAME)=UPPER(REPLACE(DFA.ATTR_NAME,'attr_',''))
    GROUP BY ITEM_ID
    ) IFAV,
    --PRODUCTS P,
    (
    SELECT LP.PRODUCT_DESC1
      ||' '
      || LP.PRODUCT_DESC2 AS PRODUCT_DESC,
      PI.IMAGE_NAME       AS PRODUCT_IMAGE_NAME,
      PI.IMAGE_TYPE       AS PRODUCT_IMAGE_TYPE ,
      PRD.*,
      IM2.PRODUCT_ITEM_COUNT
    FROM PRODUCTS PRD,
      (SELECT IM.PRODUCT_ID,
        COUNT(1) PRODUCT_ITEM_COUNT
      FROM ITEM_MASTER IM
      WHERE IM.ACTIVE!='D'
      GROUP BY IM.PRODUCT_ID
      ) IM2,
      LOC_PRODUCTS LP,
      PRODUCT_IMAGES PI
    WHERE PRD.PRODUCT_ID        = IM2.PRODUCT_ID(+)
    AND LP.PRODUCT_ID(+)        = PRD.PRODUCT_ID
    AND PI.PRODUCT_IMAGES_ID (+)= LP.PRODUCT_IMAGES_ID
    AND NVL(PRD.STATUS,'Y')     = 'Y'
    ) P,
    LOC_PRODUCTS LP,
    EXTERNAL_HITS EH,
    BEST_SELLER BS,
    MANUFACTURER_DISPLAY_NAME MDN,
    DEFAULT_PRODUCT_ITEM_VIEW DPI
  WHERE m.manufacturer_id(+) = im.manufacturer_id
  AND b.brand_id(+)          = im.brand_id
  AND ICV.item_id(+)         = im.item_id
  AND im.item_id             = lim.item_id(+)
  AND lim.locale_id(+)       = 1
  AND ii.item_image_id(+)    = lim.item_image_id
  AND ICVV.field_name(+)     = 'Collections'
  AND IM.ITEM_ID             = ICVV.ITEM_ID(+)
  AND EH.ITEM_ID(+)          = IM.ITEM_ID
  AND BS.ITEM_ID(+)          = IM.ITEM_ID
  AND DPI.ITEM_ID(+)         = IM.ITEM_ID
  AND P.PRODUCT_ID(+)        =IM.PRODUCT_ID
  AND LP.PRODUCT_ID(+)       =P.PRODUCT_ID
  AND LP.LOCALE_ID(+)        =1
  AND IM.ITEM_ID             =IFAV.IFAV_ITEM_ID(+)
  AND IM.ITEM_ID             =MDN.ITEM_ID(+)
  AND im.item_id             = FP.item_id(+)
  ),
  t2 AS
  (SELECT LISTAGG(iavv.attribute_name
    ||'|~|'
    || iavv.attribute_value
    ||' '
    || iavv.attribute_uom, '}~}') WITHIN GROUP (
  ORDER BY filter_seq) ATTRIBUTE_VALUES ,
    iavv.item_id T2_ITEM_ID,
    ic.item_classificaton_id T2_ITEM_CLASSIFICATION_ID
  FROM iav_view iavv,
    category_attributes ca,
    item_classification ic
  WHERE iavv.attribute_id = ca.attribute_id
  AND ca.filter_enabled   ='Y'
  AND iavv.item_id        = ic.item_id(+)
  AND ic.taxonomy_tree_id = ca.taxonomy_tree_id
  AND iavv.locale_id      =1
  GROUP BY iavv.item_id,
    IC.ITEM_CLASSIFICATON_ID
  ),
  T4 AS
  (SELECT LISTAGG(ICVV.FIELD_NAME
    ||'|~|'
    || ICVV.FIELD_VALUE , '}~}') WITHIN GROUP (
  ORDER BY ICVV.DISPLAY_SEQUENCE) CUSTOM_FIELD_VALUES ,
    ICVV.ITEM_ID T4_ITEM_ID
  FROM ITEM_CF_VALUES_VIEW ICVV
  GROUP BY ICVV.ITEM_ID
  )
SELECT KEY,
  ITEM_CLASSIFICATON_ID,
  ITEM_ID,
  PARTNUMBER_KEYWORDS,
  KEYWORDS,
  PART_NUMBER,
  POPULARITY,
  MANUFACTURER_ID,
  BRAND_ID,
  MANUFACTURER_PART_NUMBER,
  UPC,
  NET_PRICE,
  DISPLAY_ONLINE,
  ACTIVE,
  MANUFACTURER_NAME,
  BRAND_NAME,
  PRODUCT_CATEGORY_ID,
  PRODUCT_ID,
  PRODUCT_CATEGORY,
  COLLECTION_KEYWORD,
  LEVEL1_CATEGORY,
  TAXONOMY_ID,
  DEFAULT_CATEGORY,
  SHORT_DESC,
  DISPLAY_PRIORITY,
  BRAND_IMAGE,
  ITEM_IMAGE,
  IMAGE_TYPE,
  LAST_UPDATED ,
  PRODUCT_NAME,
  PRODUCT_NUMBER,
  PAGE_TITLE,
  BEST_SELLER,
  PRODUCT_ITEM_KEYWORDS,
  PRODUCT_PARTNUMBER_KEYWORDS,
  ATTRIBUTE_VALUES,
  T2_ITEM_ID,
  T2_ITEM_CLASSIFICATION_ID,
  HITS,
  CATEGORY_CODE_PATH,
  CATEGORY_NAME_PATH,
  EXTERNAL_HITS,
  NVL(DEFAULT_PRODUCT_ITEM,'N') DEFAULT_PRODUCT_ITEM,
  PRODUCT_ITEM_COUNT,
  CUSTOM_FIELD_VALUES,
  SALES_UOM,
  LONG_DESC1,
  LONG_DESC2,
  MANUFACTURER_DISPLAY_NAME,
  ALT_PART_NUMBER1,
  ALT_PART_NUMBER2,
  PRODUCT_DESC,
  PRODUCT_IMAGE_NAME,
  PRODUCT_IMAGE_TYPE,
  USER_COUNT
FROM T1,
  T2,
  T4
WHERE T1.ITEM_ID            =T2.T2_ITEM_ID(+)
AND T1.ITEM_CLASSIFICATON_ID=T2.T2_ITEM_CLASSIFICATION_ID(+)
AND T1.ITEM_ID              = T4.T4_ITEM_ID(+);

-- Sep 11 2017 before changing the view - removed concatinate keyword and product keyword

--Updated View Sep 11 2017 After changing the view - removed concatinate keyword and product keyword and Fayt part removed

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "PRODUCTION"."SEARCH_ITEM_MASTER_VIEW_V8" ("KEY", "ITEM_CLASSIFICATON_ID", "ITEM_ID", "PARTNUMBER_KEYWORDS", "KEYWORDS", "PART_NUMBER", "POPULARITY", "MANUFACTURER_ID", "BRAND_ID", "MANUFACTURER_PART_NUMBER", "UPC", "NET_PRICE", "DISPLAY_ONLINE", "ACTIVE", "MANUFACTURER_NAME", "BRAND_NAME", "PRODUCT_CATEGORY_ID", "PRODUCT_ID", "PRODUCT_CATEGORY", "COLLECTION_KEYWORD", "LEVEL1_CATEGORY", "TAXONOMY_ID", "DEFAULT_CATEGORY", "SHORT_DESC", "DISPLAY_PRIORITY", "BRAND_IMAGE", "ITEM_IMAGE", "IMAGE_TYPE", "LAST_UPDATED", "PRODUCT_NAME", "PRODUCT_NUMBER", "PAGE_TITLE", "BEST_SELLER", "ATTRIBUTE_VALUES", "T2_ITEM_ID", "T2_ITEM_CLASSIFICATION_ID", "HITS", "CATEGORY_CODE_PATH", "CATEGORY_NAME_PATH", "EXTERNAL_HITS", "DEFAULT_PRODUCT_ITEM", "PRODUCT_ITEM_COUNT", "CUSTOM_FIELD_VALUES", "SALES_UOM", "LONG_DESC1", "LONG_DESC2", "MANUFACTURER_DISPLAY_NAME", "ALT_PART_NUMBER1", "ALT_PART_NUMBER2", "PRODUCT_DESC", "PRODUCT_IMAGE_NAME", "PRODUCT_IMAGE_TYPE", "USER_COUNT") AS 
  WITH t1 AS
  (SELECT nvl2(ICV.item_classificaton_id,ICV.item_classificaton_id
    || '||'
    || IM.ITEM_ID,IM.ITEM_ID) KEY,
    NVL2(ICV.CATEGORY_CODE_PATH,'0:'
    ||ICV.CATEGORY_CODE_PATH,'0') CATEGORY_CODE_PATH,
    icv.CATEGORY_NAME_PATH,
    ICV.item_classificaton_id,
    im.item_id,
    IM.PARTNUMBER_KEYWORDS PARTNUMBER_KEYWORDS,
   im.CUSTOM_KEYWORDS  AS 
    KEYWORDS,
    im.part_number,
    im.popularity,
    im.manufacturer_id,
    im.brand_id,
    im.manufacturer_part_number,
    im.upc,
    IM.NET_PRICE,
    LIM.PAGE_TITLE,
    im.ALT_PART_NUMBER1,
    im.ALT_PART_NUMBER2,
    im.display_online,
    im.active,
    IM.HITS,
    EH.EXTERNAL_HITS,
    BS.BEST_SELLER,
    MDN.MANUFACTURER_DISPLAY_NAME,
    ICVV.FIELD_VALUE COLLECTION_KEYWORD,
    nvl2(LP.PRODUCT_ID,DPI.DEFAULT_PRODUCT_ITEM,'Y') DEFAULT_PRODUCT_ITEM,
    m.manufacturer_name,
    b.brand_name,
    ICV.PRODUCT_CATEGORY_ID,
    LP.PRODUCT_ID PRODUCT_ID,
    ICV.PRODUCT_category,
    ICV.LEVEL1_CATEGORY,
    ICV.TAXONOMY_ID,
    NVL2(ICV.DEFAULT_CATEGORY,ICV.DEFAULT_CATEGORY,'Y') DEFAULT_CATEGORY,
    NVL(lim.short_desc,LIM.INVOICE_DESC) SHORT_DESC,
    ICV.display_priority,
    b.brand_image,
    ii.image_name ITEM_IMAGE,
    ii.image_type,
    NVL2(IM.UPDATED_DATETIME,IM.UPDATED_DATETIME,SYSDATE) LAST_UPDATED,
    NVL(P.PRODUCT_NAME,M.MANUFACTURER_NAME
    ||' '
    ||NVL(IM.MANUFACTURER_PART_NUMBER,IM.PART_NUMBER)) PRODUCT_NAME,
    NVL(P.PRODUCT_NUMBER,NVL(IM.MANUFACTURER_PART_NUMBER,IM.PART_NUMBER)) PRODUCT_NUMBER,
    LP.PRODUCT_PARTNUMBER_KEYWORDS PRODUCT_PARTNUMBER_KEYWORDS,
    P.PRODUCT_ITEM_COUNT,
    IM.SALES_UOM,
    LIM.LONG_DESC1,
    LIM.LONG_DESC2,
    P.PRODUCT_DESC,
    P.PRODUCT_IMAGE_NAME,
    P.PRODUCT_IMAGE_TYPE,
    FP.USER_COUNT
  FROM item_master im,
    manufacturer m,
    BRANDS B,
    FREQUENTLY_PURCHASED FP,
    (SELECT *
    FROM CATEGORY_PATH_VIEW1 CP,
      ITEM_CATEGORY_VIEW IV
    WHERE CP.t3_TAXONOMY_TREE_ID=IV.PRODUCT_CATEGORY_ID
    ) ICV,
    loc_item_master lim,
    item_images ii,
    ITEM_CF_VALUES_VIEW ICVV,
   
    --PRODUCTS P,
    (
    SELECT LP.PRODUCT_DESC1
      ||' '
      || LP.PRODUCT_DESC2 AS PRODUCT_DESC,
      PI.IMAGE_NAME       AS PRODUCT_IMAGE_NAME,
      PI.IMAGE_TYPE       AS PRODUCT_IMAGE_TYPE ,
      PRD.*,
      IM2.PRODUCT_ITEM_COUNT
    FROM PRODUCTS PRD,
      (SELECT IM.PRODUCT_ID,
        COUNT(1) PRODUCT_ITEM_COUNT
      FROM ITEM_MASTER IM
      WHERE IM.ACTIVE!='D'
      GROUP BY IM.PRODUCT_ID
      ) IM2,
      LOC_PRODUCTS LP,
      PRODUCT_IMAGES PI
    WHERE PRD.PRODUCT_ID        = IM2.PRODUCT_ID(+)
    AND LP.PRODUCT_ID(+)        = PRD.PRODUCT_ID
    AND PI.PRODUCT_IMAGES_ID (+)= LP.PRODUCT_IMAGES_ID
    AND NVL(PRD.STATUS,'Y')     = 'Y'
    ) P,
    LOC_PRODUCTS LP,
    EXTERNAL_HITS EH,
    BEST_SELLER BS,
    MANUFACTURER_DISPLAY_NAME MDN,
    DEFAULT_PRODUCT_ITEM_VIEW DPI
  WHERE m.manufacturer_id(+) = im.manufacturer_id
  AND b.brand_id(+)          = im.brand_id
  AND ICV.item_id(+)         = im.item_id
  AND im.item_id             = lim.item_id(+)
  AND lim.locale_id(+)       = 1
  AND ii.item_image_id(+)    = lim.item_image_id
  AND ICVV.field_name(+)     = 'Collections'
  AND IM.ITEM_ID             = ICVV.ITEM_ID(+)
  AND EH.ITEM_ID(+)          = IM.ITEM_ID
  AND BS.ITEM_ID(+)          = IM.ITEM_ID
  AND DPI.ITEM_ID(+)         = IM.ITEM_ID
  AND P.PRODUCT_ID(+)        =IM.PRODUCT_ID
  AND LP.PRODUCT_ID(+)       =P.PRODUCT_ID
  AND LP.LOCALE_ID(+)        =1

  AND IM.ITEM_ID             =MDN.ITEM_ID(+)
  AND im.item_id             = FP.item_id(+)
  ),
  t2 AS
  (SELECT LISTAGG(iavv.attribute_name
    ||'|~|'
    || iavv.attribute_value
    ||' '
    || iavv.attribute_uom, '}~}') WITHIN GROUP (
  ORDER BY filter_seq) ATTRIBUTE_VALUES ,
    iavv.item_id T2_ITEM_ID,
    ic.item_classificaton_id T2_ITEM_CLASSIFICATION_ID
  FROM iav_view iavv,
    category_attributes ca,
    item_classification ic
  WHERE iavv.attribute_id = ca.attribute_id
  AND ca.filter_enabled   ='Y'
  AND iavv.item_id        = ic.item_id(+)
  AND ic.taxonomy_tree_id = ca.taxonomy_tree_id
  AND iavv.locale_id      =1
  GROUP BY iavv.item_id,
    IC.ITEM_CLASSIFICATON_ID
  ),
  T4 AS
  (SELECT LISTAGG(ICVV.FIELD_NAME
    ||'|~|'
    || ICVV.FIELD_VALUE , '}~}') WITHIN GROUP (
  ORDER BY ICVV.DISPLAY_SEQUENCE) CUSTOM_FIELD_VALUES ,
    ICVV.ITEM_ID T4_ITEM_ID
  FROM ITEM_CF_VALUES_VIEW ICVV
  GROUP BY ICVV.ITEM_ID
  )
SELECT KEY,
  ITEM_CLASSIFICATON_ID,
  ITEM_ID,
  PARTNUMBER_KEYWORDS,
  KEYWORDS,
  PART_NUMBER,
  POPULARITY,
  MANUFACTURER_ID,
  BRAND_ID,
  MANUFACTURER_PART_NUMBER,
  UPC,
  NET_PRICE,
  DISPLAY_ONLINE,
  ACTIVE,
  MANUFACTURER_NAME,
  BRAND_NAME,
  PRODUCT_CATEGORY_ID,
  PRODUCT_ID,
  PRODUCT_CATEGORY,
  COLLECTION_KEYWORD,
  LEVEL1_CATEGORY,
  TAXONOMY_ID,
  DEFAULT_CATEGORY,
  SHORT_DESC,
  DISPLAY_PRIORITY,
  BRAND_IMAGE,
  ITEM_IMAGE,
  IMAGE_TYPE,
  LAST_UPDATED ,
  PRODUCT_NAME,
  PRODUCT_NUMBER,
  PAGE_TITLE,
  BEST_SELLER,
  ATTRIBUTE_VALUES,
  T2_ITEM_ID,
  T2_ITEM_CLASSIFICATION_ID,
  HITS,
  CATEGORY_CODE_PATH,
  CATEGORY_NAME_PATH,
  EXTERNAL_HITS,
  NVL(DEFAULT_PRODUCT_ITEM,'N') DEFAULT_PRODUCT_ITEM,
  PRODUCT_ITEM_COUNT,
  CUSTOM_FIELD_VALUES,
  SALES_UOM,
  LONG_DESC1,
  LONG_DESC2,
  MANUFACTURER_DISPLAY_NAME,
  ALT_PART_NUMBER1,
  ALT_PART_NUMBER2,
  PRODUCT_DESC,
  PRODUCT_IMAGE_NAME,
  PRODUCT_IMAGE_TYPE,
  USER_COUNT
FROM T1,
  T2,
  T4
WHERE T1.ITEM_ID            =T2.T2_ITEM_ID(+)
AND T1.ITEM_CLASSIFICATON_ID=T2.T2_ITEM_CLASSIFICATION_ID(+)
AND T1.ITEM_ID              = T4.T4_ITEM_ID(+);


-- Updated View Sep 11 2017 After changing the view - removed concatinate keyword and product keyword


--Custom fields in events
  CREATE OR REPLACE FORCE EDITIONABLE VIEW EVENTS_CF_VALUES_VIEW AS 
SELECT E.EVENT_ID,
  E.EVENT_TITLE,
  E.EVENT_CATEGORY,
  E.FEATURED_EVENTS,
  ECFV.CUSTOM_FIELD_ID,
  LCFV.LOC_CUSTOM_FIELD_VALUE_ID,
  CF.FIELD_NAME,
  CF.FIELD_DATA_TYPE,
  CASE
    WHEN UPPER(CF.FIELD_DATA_TYPE)='TXT'
    OR UPPER(CF.FIELD_DATA_TYPE)  ='BOL'
    OR UPPER(CF.FIELD_DATA_TYPE)  ='DT'
    OR UPPER(CF.FIELD_DATA_TYPE)  ='URL'
    THEN LCFV.TEXT_FIELD_VALUE
    ELSE TO_CHAR(LCFV.NUMERIC_FIELD_VALUE)
  END FIELD_VALUE
FROM EVENT_MANAGER E,
  EVENT_CUSTOM_FIELD_VALUES ECFV,
  CUSTOM_FIELDS CF,
  LOC_CUSTOM_FIELD_VALUES LCFV
WHERE E.EVENT_ID              =ECFV.EVENT_ID
AND ECFV.CUSTOM_FIELD_ID          =CF.CUSTOM_FIELD_ID
AND LCFV.LOC_CUSTOM_FIELD_VALUE_ID=ECFV.LOC_CUSTOM_FIELD_VALUE_ID;