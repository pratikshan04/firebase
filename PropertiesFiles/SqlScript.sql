
update buying_company set buying_company_id = 1 where buying_company_id = 1749;
Insert into cimm_users (USER_ID,USER_NAME,PASSWORD,FIRST_NAME,LAST_NAME,MIDDLE_NAME,BUYING_COMPANY_ID,OFFICE_PHONE,CELL_PHONE,FAX,EMAIL,ADDRESS1,CITY,STATE,ZIP,COUNTRY,ECLIPSE_CONTACT_ID,EXTERNAL_SYSTEM2_USER_ID,REGISTERED_DATE,DEFAULT_BILLING_ADDRESS_ID,DEFAULT_SHIPPING_ADDRESS_ID,IS_TAXABLE,USER_EDITED,UPDATED_DATETIME,ADDRESS2,PUNCHOUT_USER,FIRST_LOGIN,STATUS,ACCEPT_ORDER_BY_PO_NUM,KEYWORDS,SUPPLIER_SPECIFIC,PARENT_USER_ID,EXISTING_CUSTOMER,WEB_SERVICE,APPROVAL_USER_LOGIN,APPROVAL_USER_ID,SITE_ID,TERMS_TYPE,TERMS_TYPE_DESC,SHIP_VIA,SHIP_VIA_DESC,WFL_PHASE_ID) values (1,'web','tsD3wQTBgXJrBQXeaXRDXQ','web',null,null,1,null,null,null,'alerts@cimm2.com',null,null,null,null,'US',0,null,to_timestamp('06-03-14','DD-MM-RR HH12:MI:SSXFF AM'),null,null,'N',3788,to_timestamp('06-03-14','DD-MM-RR HH12:MI:SSXFF AM'),null,'N','N','Y','Y','web ; web ;  ;  ; alerts@cimm2.com ;  ;  ;  ;  ; US ;  ;  ; ','Y',0,'N',null,null,null,null,null,null,null,null,null);

CREATE TABLE CUSTOMER_DEFAULT
  (
    CUST_DEFAULT_ID    NUMBER NOT NULL ENABLE,
    WAREHOUSE_CODE     VARCHAR2(20 CHAR),
    STATE              VARCHAR2(100 BYTE),
    STATE_CODE         VARCHAR2(5 BYTE),
    CREDIT_MANGER_CODE VARCHAR2(20 CHAR),
    DIVISION_NO        NUMBER,
    SALES_REP_OUT      VARCHAR2(20 BYTE),
    SALES_REP_IN       VARCHAR2(20 BYTE),
    USER_EDITED        NUMBER,
    UPDATED_DATETIME DATE,
    DEFAULT_WAREHOUSE VARCHAR2(1 BYTE) DEFAULT 'Y'
  );
  
  
ALTER TABLE BRANCH_LOCATIONS ADD WORK_HOUR VARCHAR2(1000 byte);
ALTER TABLE BRANCH_LOCATIONS ADD NOTE VARCHAR2(1000);
ALTER TABLE NEW_PRODUCT_REQUEST_ITEMS ADD QTY NUMBER NOT NULL;
ALTER TABLE CART_SHARE ADD NOTES VARCHAR2(1000 byte);

-- On Feb 01 2014

drop materialized view top_tab_counts_mv;
create or replace view top_tab_counts_mv as
 SELECT ip.subset_id,
    s.subset_name,
    tt1.level1,
    tt1.category_name,
    COUNT(*) cnt
  FROM item_classification ic,
    taxonomy_tree tt,
    taxonomy_tree tt1,
    item_prices ip,
    subsets s
  WHERE tt.taxonomy_tree_id = ic.taxonomy_tree_id
  AND ip.item_id            = ic.item_id
  AND ip.status             = 'A'
  AND ip.subset_id          = s.subset_id
  AND tt.taxonomy_id        =
    (SELECT taxonomy_id
    FROM taxonomies t,
      system_parameters sp
    WHERE config_key  = 'ACTIVE_TAXONOMY_VERSION'
    AND taxonomy_name = sp.config_value
    )
  AND tt1.taxonomy_tree_id =tt.level1
  GROUP BY ip.subset_id, s.subset_name, tt1.level1, tt1.category_name;
  
  -- On Feb 01 2014
  
  
   -- On Feb 05 2014
  CREATE OR REPLACE FORCE VIEW GOLDEN_ITEMS
AS
  (SELECT item_id,
    'Y' "IS_GOLDENITEM"
  FROM item_custom_field_values
  WHERE custom_field_id =
    (SELECT custom_field_id
    FROM custom_fields
    WHERE upper(field_name) =upper('GOLDENITEM')
    AND data_entity         ='ITEM'
    )
  AND loc_custom_field_value_id =
    (SELECT loc_custom_field_value_id
    FROM loc_custom_field_values
    WHERE upper(text_field_value) = upper('Y')
    )
  ) ; 
  
  CREATE OR REPLACE FORCE VIEW ITEM_DETAILS_MV AS
SELECT IM.ITEM_ID,
    IP.SUBSET_ID,
    IP.ITEM_PRICE_ID,
    IP.CUSTOMER_PART_NUMBER,
    LIM.LOC_ITEM_ID,
    IM.PRODUCT_ID,
    IM.BRAND_ID,
    B.BRAND_NAME,
    B.BRAND_IMAGE,
    IM.PART_NUMBER,
    IM.COMPETITOR_PART_NUMBER,
    IM.MANUFACTURER_PART_NUMBER,
    IM.MANUFACTURER_ID,
    IM.UPC,
    IM.PACKAGE_QTY,
    LIM.LOCALE_ID,
    LIM.SHORT_DESC,
    LIM.LONG_DESC1,
    LIM.LONG_DESC2,
    LIM.ITEM_MARKETING_DESC,
    LIM.ITEM_FEATURES,
    LIM.META_DESC,
    LIM.META_KEYWORD,
    LIM.PAGE_TITLE,
    LIM.INVOICE_DESC,
    IP.NET_PRICE,
    IP.PACK_DESC,
    CASE
      WHEN NVL(IP.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
    IP.SALES_UOM,
    IP.MATERIAL_GROUP,
    IP.UNSPSC,
    II.IMAGE_NAME,
    II.IMAGE_TYPE,
    INOT.NOTES,
    GI.IS_GOLDENITEM,
    IM.ROWID IM_ROWID,
    LIM.ROWID LIM_ROWID,
    IP.ROWID IP_ROWID,
    II.ROWID II_ROWID,
    B.ROWID B_ROWID,
    INOT.ROWID INOT_ROWID
  FROM ITEM_MASTER IM,
    LOC_ITEM_MASTER LIM,
    ITEM_PRICES IP,
    ITEM_IMAGES II,
    BRANDS b,
    ITEM_NOTES INOT,
    GOLDEN_ITEMS GI
  WHERE IM.ACTIVE       ='Y'
  AND LIM.ITEM_ID(+)    =IM.ITEM_ID
  AND LIM.ITEM_IMAGE_ID = II.ITEM_IMAGE_ID(+)
  AND IP.ITEM_ID        =IM.ITEM_ID(+)
  AND IP.STATUS         ='A'
  AND IP.NOTE_ID        = INOT.NOTE_ID(+)
  AND IM.BRAND_ID       = B.BRAND_ID(+)
  AND GI.ITEM_ID(+)     = IM.ITEM_ID;
     -- On Feb 05 2014
  
  
  -- On Feb 10 2014
  CREATE OR REPLACE FORCE VIEW CATALOG_IDX_NEW_V2
AS
  SELECT CIDX."SEARCH_IDX",
    CIDX."ITEM_PRICE_ID",
    CIDX."ITEM_ID",
    CIDX."NET_PRICE",
    CIDX."PACK_DESC",
    CIDX."SALES_UOM",
    CIDX."SALES_QTY",
    CIDX."CUSTOMER_PARTNUMBER_KEYWORDS",
    CIDX."MIN_ORDER_QTY",
    CIDX."ORDER_QTY_INTERVAL",
    CIDX."IS_FEATURED_PRODUCT",
    CIDX."DISPLAY_PRICING",
    CIDX."UNSPSC",
    CIDX."CUSTOMER_PART_NUMBER",
    CIDX."MATERIAL_GROUP",
    CIDX."MATERIAL_NUMBER",
    CIDX."PACKAGE_FLAG",
    CIDX."PACKAGE_QTY",
    CIDX."UPDATED_DATETIME",
    CIDX."KEY",
    UM.UOM_DESC
  FROM
    ( WITH T1 AS
    (SELECT TO_NUMBER(CONFIG_VALUE) GENERAL_CATALOGID
    FROM SYSTEM_PARAMETERS
    WHERE CONFIG_KEY = 'GENERALCATALOGID'
    ),
    T2 AS
    (SELECT DISTINCT BC2.SUBSET_ID,
      T1.GENERAL_CATALOGID
    FROM BUYING_COMPANY BC2,
      T1
    WHERE BC2.SUBSET_ID          IS NOT NULL
    AND BC2.GENERAL_CATALOG_ACCESS='Y'
    )
  SELECT 'PH_SEARCH_'
    ||T2.GENERAL_CATALOGID
    ||'_'
    ||T2.SUBSET_ID SEARCH_IDX,
    IP3.ITEM_PRICE_ID,
    IP3.ITEM_ID,
    IP3.NET_PRICE,
    NVL(IP3.PACK_DESC,IM.PACK_DESC) PACK_DESC,
    NVL(IP3.SALES_UOM,IM.SALES_UOM) SALES_UOM,
    IP3.SALES_QTY,
    IP3.CUSTOMER_PARTNUMBER_KEYWORDS,
    CASE
      WHEN NVL(IP3.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP3.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP3.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP3.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP3.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP3.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
    IP3.IS_FEATURED_PRODUCT,
    IP3.DISPLAY_PRICING,
    NVL(IP3.UNSPSC,IM.UNSPSC) UNSPSC,
    IP3.CUSTOMER_PART_NUMBER,
    IP3.MATERIAL_GROUP,
    IP3.MATERIAL_NUMBER,
    IP3.PACKAGE_FLAG,
    CASE
      WHEN NVL(IP3.PACKAGE_QTY,1) < 2
      THEN NVL(IM.PACKAGE_QTY,1)
      WHEN NVL(IP3.PACKAGE_QTY,1) > 1
      THEN NVL(IP3.PACKAGE_QTY,1)
    END PACKAGE_QTY,
    IP3.UPDATED_DATETIME,
    'PH_SEARCH_'
    ||T2.GENERAL_CATALOGID
    ||'_'
    ||T2.SUBSET_ID
    ||'_'
    ||IP3.ITEM_PRICE_ID KEY
  FROM ITEM_PRICES IP3,
    ITEM_MASTER IM,
    T2
  WHERE IM.ITEM_ID     = IP3.ITEM_ID
  AND IP3.SUBSET_ID    =T2.GENERAL_CATALOGID
  AND IP3.ITEM_ID NOT IN
    (SELECT IP4.ITEM_ID FROM ITEM_PRICES IP4 WHERE IP4.SUBSET_ID=T2.SUBSET_ID
    )
  AND IP3.STATUS='A'
  UNION ALL
  SELECT 'PH_SEARCH_'
    ||T1.GENERAL_CATALOGID
    ||'_'
    ||IP.SUBSET_ID SEARCH_IDX,
    IP.ITEM_PRICE_ID,
    IP.ITEM_ID,
    IP.NET_PRICE,
    NVL(IP.PACK_DESC,IM.PACK_DESC) PACK_DESC,
    NVL(IP.SALES_UOM,IM.SALES_UOM) SALES_UOM,
    IP.SALES_QTY,
    IP.CUSTOMER_PARTNUMBER_KEYWORDS,
    CASE
      WHEN NVL(IP.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
    IP.IS_FEATURED_PRODUCT,
    IP.DISPLAY_PRICING,
    NVL(IP.UNSPSC,IM.UNSPSC) UNSPSC,
    IP.CUSTOMER_PART_NUMBER,
    IP.MATERIAL_GROUP,
    IP.MATERIAL_NUMBER,
    IP.PACKAGE_FLAG,
    CASE
      WHEN NVL(IP.PACKAGE_QTY,1) < 2
      THEN NVL(IM.PACKAGE_QTY,1)
      WHEN NVL(IP.PACKAGE_QTY,1) > 1
      THEN NVL(IP.PACKAGE_QTY,1)
    END PACKAGE_QTY,
    IP.UPDATED_DATETIME,
    'PH_SEARCH_'
    ||T1.GENERAL_CATALOGID
    ||'_'
    ||IP.SUBSET_ID
    ||'_'
    ||IP.ITEM_PRICE_ID KEY
  FROM ITEM_PRICES IP,
    ITEM_MASTER IM,
    T1
  WHERE IM.ITEM_ID  = IP.ITEM_ID
  AND IP.STATUS     ='A'
  AND IP.SUBSET_ID IN
    (SELECT DISTINCT BC2.SUBSET_ID
    FROM BUYING_COMPANY BC2
    WHERE BC2.SUBSET_ID          IS NOT NULL
    AND BC2.GENERAL_CATALOG_ACCESS='Y'
    )
  AND IP.SUBSET_ID!=
    (SELECT T1.GENERAL_CATALOGID FROM T1
    )
  UNION ALL
  SELECT 'PH_SEARCH_'
    ||T1.GENERAL_CATALOGID SEARCH_IDX,
    IP3.ITEM_PRICE_ID,
    IP3.ITEM_ID,
    IP3.NET_PRICE,
    NVL(IP3.PACK_DESC,IM.PACK_DESC) PACK_DESC,
    NVL(IP3.SALES_UOM,IM.SALES_UOM) SALES_UOM,
    IP3.SALES_QTY,
    IP3.CUSTOMER_PARTNUMBER_KEYWORDS,
    CASE
      WHEN NVL(IP3.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP3.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP3.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP3.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP3.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP3.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
    IP3.IS_FEATURED_PRODUCT,
    IP3.DISPLAY_PRICING,
    NVL(IP3.UNSPSC,IM.UNSPSC) UNSPSC,
    IP3.CUSTOMER_PART_NUMBER,
    IP3.MATERIAL_GROUP,
    IP3.MATERIAL_NUMBER,
    IP3.PACKAGE_FLAG,
    CASE
      WHEN NVL(IP3.PACKAGE_QTY,1) < 2
      THEN NVL(IM.PACKAGE_QTY,1)
      WHEN NVL(IP3.PACKAGE_QTY,1) > 1
      THEN NVL(IP3.PACKAGE_QTY,1)
    END PACKAGE_QTY,
    IP3.UPDATED_DATETIME,
    'PH_SEARCH_'
    ||T1.GENERAL_CATALOGID
    ||'_'
    ||IP3.ITEM_PRICE_ID KEY
  FROM ITEM_PRICES IP3,
    ITEM_MASTER IM,
    T1
  WHERE IM.ITEM_ID = IP3.ITEM_ID
  AND IP3.SUBSET_ID=T1.GENERAL_CATALOGID
  AND IP3.STATUS   ='A'
  UNION ALL
  SELECT 'PH_SEARCH_'
    ||IP1.SUBSET_ID SEARCH_IDX,
    IP1.ITEM_PRICE_ID,
    IP1.ITEM_ID,
    IP1.NET_PRICE,
    NVL(IP1.PACK_DESC,IM.PACK_DESC) PACK_DESC,
    NVL(IP1.SALES_UOM,IM.SALES_UOM) SALES_UOM,
    IP1.SALES_QTY,
    IP1.CUSTOMER_PARTNUMBER_KEYWORDS,
    CASE
      WHEN NVL(IP1.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP1.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP1.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP1.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP1.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP1.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
    IP1.IS_FEATURED_PRODUCT,
    IP1.DISPLAY_PRICING,
    NVL(IP1.UNSPSC,IM.UNSPSC) UNSPSC,
    IP1.CUSTOMER_PART_NUMBER,
    IP1.MATERIAL_GROUP,
    IP1.MATERIAL_NUMBER,
    IP1.PACKAGE_FLAG,
    CASE
      WHEN NVL(IP1.PACKAGE_QTY,1) < 2
      THEN NVL(IM.PACKAGE_QTY,1)
      WHEN NVL(IP1.PACKAGE_QTY,1) > 1
      THEN NVL(IP1.PACKAGE_QTY,1)
    END PACKAGE_QTY,
    IP1.UPDATED_DATETIME,
    'PH_SEARCH_'
    ||IP1.SUBSET_ID
    ||'_'
    ||IP1.ITEM_PRICE_ID KEY
  FROM ITEM_PRICES IP1,
    ITEM_MASTER IM,
    T1
  WHERE IM.ITEM_ID   = IP1.ITEM_ID
  AND IP1.STATUS     ='A'
  AND IP1.SUBSET_ID IN
    (SELECT DISTINCT BC1.SUBSET_ID
    FROM BUYING_COMPANY BC1
    WHERE BC1.SUBSET_ID          IS NOT NULL
    AND BC1.GENERAL_CATALOG_ACCESS='N'
    )
  AND IP1.SUBSET_ID!=
    (SELECT T1.GENERAL_CATALOGID FROM T1
    )
    ) CIDX,
    UNIT_OF_MEASURE UM
  WHERE CIDX.SALES_UOM=UM.UOM_NAME(+) ;
  -- On Feb 10 2014
  
  -- On Feb 28 2014
  drop  MATERIALIZED VIEW ACTIVE_ONLINE_ITEMS_MV;
  CREATE or replace VIEW ACTIVE_ONLINE_ITEMS_MV AS
  (SELECT ITEM_ID FROM ITEM_MASTER WHERE ACTIVE ='Y' AND DISPLAY_ONLINE='Y'
  );
   -- On Feb 28 2014
   
  
  
  CREATE OR REPLACE FORCE VIEW EXTERNAL_HITS
AS
  SELECT ITEM_ID,
    LCFV.NUMERIC_FIELD_VALUE EXTERNAL_HITS
  FROM item_custom_field_values ICFV,
    CUSTOM_FIELDS CF,
    LOC_CUSTOM_FIELD_VALUES LCFV
  WHERE upper(field_name)            =upper('EXTERNAL_RANKING')
  AND data_entity                    ='ITEM'
  AND ICFV.custom_field_id           =CF.custom_field_id
  AND LCFV.LOC_CUSTOM_FIELD_VALUE_ID = ICFV.LOC_CUSTOM_FIELD_VALUE_ID ;

CREATE OR REPLACE VIEW SEARCH_ITEM_MASTER_VIEW_V2
        AS
WITH t1 AS
  (SELECT nvl2(ICV.item_classificaton_id,ICV.item_classificaton_id
    || '||'
    || IM.ITEM_ID,IM.ITEM_ID) KEY,
    ICV.item_classificaton_id,
    im.item_id,
    IM.PARTNUMBER_KEYWORDS,
    im.keywords
    ||'; '
    ||im.partnumber_keywords KEYWORDS,
    im.part_number,
    im.popularity,
    im.manufacturer_id,
    im.brand_id,
    im.manufacturer_part_number,
    im.upc,
    im.display_online,
    im.active,
    IM.HITS,
    m.manufacturer_name,
    b.brand_name,
    ICV.PRODUCT_CATEGORY_ID,
    ICV.PRODUCT_category,
    ICV.LEVEL1_CATEGORY,
    NVL2(ICV.DEFAULT_CATEGORY,ICV.DEFAULT_CATEGORY,'Y') DEFAULT_CATEGORY,
    NVL(lim.short_desc,LIM.INVOICE_DESC) SHORT_DESC,
    ICV.display_priority,
    b.brand_image,
    ii.image_name ITEM_IMAGE,
    ii.image_type,
    EH.EXTERNAL_HITS,
    nvl2(IM.UPDATED_DATETIME,IM.UPDATED_DATETIME,SYSDATE) LAST_UPDATED
  FROM item_master im,
    manufacturer m,
    brands b,
    ITEM_CATEGORY_VIEW ICV,
    loc_item_master lim,
    ITEM_IMAGES II,
    EXTERNAL_HITS EH
  WHERE m.manufacturer_id(+) = im.manufacturer_id
  AND b.brand_id(+)          = im.brand_id
  AND ICV.item_id(+)         = im.item_id
  AND im.item_id             = lim.item_id(+)
  AND lim.locale_id(+)       = 1
  AND ii.item_image_id(+)    = lim.item_image_id
  AND EH.ITEM_ID(+)          = IM.ITEM_ID
  ),
  t2 AS
  (SELECT LISTAGG(iavv.attribute_name
    ||'|~|'
    || iavv.attribute_value
    ||' '
    || iavv.attribute_uom, '}~}') WITHIN GROUP (
  ORDER BY filter_seq) ATTRIBUTE_VALUES ,
    iavv.item_id T2_ITEM_ID,
    ic.item_classificaton_id T2_ITEM_CLASSIFICATION_ID
  FROM iav_view iavv,
    category_attributes ca,
    item_classification ic
  WHERE iavv.attribute_id = ca.attribute_id
  AND ca.filter_enabled   ='Y'
  AND iavv.item_id        = ic.item_id(+)
  AND ic.taxonomy_tree_id = ca.taxonomy_tree_id
  AND iavv.locale_id      =1
  GROUP BY iavv.item_id,
    IC.ITEM_CLASSIFICATON_ID
  ),
  t3 AS
  (SELECT SUBSTR(SYS_CONNECT_BY_PATH(TT.TAXONOMY_TREE_ID,':'),2) CATEGORY_CODE_PATH,
    SUBSTR(SYS_CONNECT_BY_PATH(TT.CATEGORY_NAME, '/*/'), 4) CATEGORY_NAME_PATH,
    TT.TAXONOMY_TREE_ID T3_TAXONOMY_TREE_ID
  FROM TAXONOMY_TREE TT
    START WITH TT.LEVEL_NUMBER                   =1
    CONNECT BY NOCYCLE PRIOR TT.TAXONOMY_TREE_ID = TT.PARENT_TT_ID
  ORDER SIBLINGS BY TT.DISP_SEQ
  )
SELECT KEY,
  ITEM_CLASSIFICATON_ID,
  ITEM_ID,
  PARTNUMBER_KEYWORDS,
  KEYWORDS,
  PART_NUMBER,
  POPULARITY,
  MANUFACTURER_ID,
  BRAND_ID,
  MANUFACTURER_PART_NUMBER,
  UPC,
  DISPLAY_ONLINE,
  ACTIVE,
  MANUFACTURER_NAME,
  BRAND_NAME,
  PRODUCT_CATEGORY_ID,
  PRODUCT_CATEGORY,
  LEVEL1_CATEGORY,
  DEFAULT_CATEGORY,
  SHORT_DESC,
  DISPLAY_PRIORITY,
  BRAND_IMAGE,
  ITEM_IMAGE,
  IMAGE_TYPE,
  LAST_UPDATED,
  ATTRIBUTE_VALUES,
  T2_ITEM_ID,
  T2_ITEM_CLASSIFICATION_ID,
  EXTERNAL_HITS,
  HITS,
  T3.CATEGORY_CODE_PATH,
  t3.CATEGORY_NAME_PATH
FROM T1,
  t2,
  t3
WHERE T1.ITEM_ID            =T2.T2_ITEM_ID(+)
AND T1.ITEM_CLASSIFICATON_ID=T2.T2_ITEM_CLASSIFICATION_ID(+)
AND t1.PRODUCT_CATEGORY_ID  =t3.T3_TAXONOMY_TREE_ID(+);

ALTER TABLE ORDERS ADD TRANSACTION_ID VARCHAR2(500);


-- Item detail SP
CREATE OR REPLACE FORCE VIEW ITEM_CF_VALUES_VIEW
AS
  SELECT IM.ITEM_ID,
    IM.PART_NUMBER,
    IM.MANUFACTURER_PART_NUMBER,
    IM.UPC,
    M.MANUFACTURER_NAME,
    B.BRAND_NAME,
    CF.FIELD_NAME,
    CF.FIELD_DATA_TYPE,
    CF.DISPLAY_SEQUENCE,
    CASE
      WHEN UPPER(CF.FIELD_DATA_TYPE)='TXT'
      OR UPPER(CF.FIELD_DATA_TYPE)  ='BOL'
      OR UPPER(CF.FIELD_DATA_TYPE)  ='DT'
      THEN LCFV.TEXT_FIELD_VALUE
      ELSE TO_CHAR(LCFV.NUMERIC_FIELD_VALUE)
    END FIELD_VALUE
  FROM ITEM_MASTER IM,
    MANUFACTURER M,
    BRANDS B,
    ITEM_CUSTOM_FIELD_VALUES ICFV,
    CUSTOM_FIELDS CF,
    LOC_CUSTOM_FIELD_VALUES LCFV
  WHERE NVL(IM.ACTIVE,-1)          !='D'
  AND IM.MANUFACTURER_ID            =M.MANUFACTURER_ID
  AND IM.BRAND_ID                   =B.BRAND_ID
  AND IM.ITEM_ID                    =ICFV.ITEM_ID
  AND ICFV.CUSTOM_FIELD_ID          =CF.CUSTOM_FIELD_ID
  AND LCFV.LOC_CUSTOM_FIELD_VALUE_ID=ICFV.LOC_CUSTOM_FIELD_VALUE_ID ;
 
 
 / 
  create or replace
PROCEDURE GET_ITEM_DETAILS_IN_USE
(
    VAR_ITEM_PRICE_ID IN NUMBER,
--    VAR_SUBSETID IN NUMBER,
--    VAR_GENERAL_SUBSETID IN NUMBER,
    ITEM_DATA OUT SYS_REFCURSOR,
    ITEM_IMAGES OUT SYS_REFCURSOR,
    ITEM_ATTRIBUTES OUT SYS_REFCURSOR,
    ITEM_DOCUMENTS OUT SYS_REFCURSOR,
    PRODUCT_DATA OUT SYS_REFCURSOR,
    LINKED_ITEMS OUT SYS_REFCURSOR,
    QUERY_RESPONSE OUT NUMBER
)
IS
V_PRODUCT_ID NUMBER;
V_LOC_PRODUCT_ID NUMBER;
V_ITEM_ID NUMBER;
V_LOC_ITEM_ID NUMBER;
V_SUBSET_ID NUMBER;

TEMP_QUERY VARCHAR2(5000);


BEGIN

QUERY_RESPONSE :=1;
SELECT ITEM_ID, LOC_ITEM_ID, PRODUCT_ID,SUBSET_ID INTO V_ITEM_ID, V_LOC_ITEM_ID, V_PRODUCT_ID , V_SUBSET_ID
FROM ITEM_DETAILS_MV WHERE ITEM_PRICE_ID = VAR_ITEM_PRICE_ID;

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:-----SELECT ITEM_ID, LOC_ITEM_ID, PRODUCT_ID FROM ITEM_DETAILS_MV WHERE ITEM_PRICE_ID = '||VAR_ITEM_PRICE_ID);
 

  BEGIN
SELECT LOC_PRODUCT_ID INTO V_LOC_PRODUCT_ID FROM LOC_PRODUCTS WHERE PRODUCT_ID = V_PRODUCT_ID AND LOCALE_ID=1;

 EXCEPTION
      -- IF NOT FOUND SETTING VFOUNDFLAG TO 0
    WHEN no_data_found THEN
      V_LOC_PRODUCT_ID := 0;
    WHEN OTHERS THEN
      V_LOC_PRODUCT_ID := 0;
      END;

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:-----SELECT LOC_PRODUCT_ID FROM LOC_PRODUCTS WHERE PRODUCT_ID = '||V_PRODUCT_ID ||'AND LOCALE_ID=1');

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_DATA----->SELECT ITEM_ID, ITEM_PRICE_ID, BRAND_NAME, BRAND_IMAGE, PART_NUMBER,COMPETITOR_PART_NUMBER,MANUFACTURER_PART_NUMBER, UPC, SHORT_DESC, 
    ITEM_MARKETING_DESC,ITEM_FEATURES, LONG_DESC1, LONG_DESC2, META_DESC, META_KEYWORD, PAGE_TITLE, NET_PRICE, PACK_DESC, SALES_UOM, IMAGE_NAME, IMAGE_TYPE, NOTES
    FROM ITEM_DETAILS_MV WHERE ITEM_PRICE_ID ='||VAR_ITEM_PRICE_ID);


OPEN ITEM_DATA FOR
SELECT  IM.ITEM_ID,
  IP.ITEM_PRICE_ID,
  B.BRAND_NAME,
  B.BRAND_IMAGE,
  IM.PART_NUMBER,
  IM.COMPETITOR_PART_NUMBER,
  IP.CUSTOMER_PART_NUMBER,
  IM.MANUFACTURER_PART_NUMBER,
  IM.UPC,
  NVL(PRODUCT_ID,0) PRODUCT_ID, 
  LIM.SHORT_DESC,
  LIM.ITEM_MARKETING_DESC,
  LIM.ITEM_FEATURES,
  LIM.LONG_DESC1,
  LIM.LONG_DESC2,
  LIM.META_DESC,
  LIM.META_KEYWORD,
  LIM.PAGE_TITLE,
 CASE
      WHEN NVL(IP.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
 IP.NET_PRICE,
 ip.package_flag,
 IP.PACKAGE_QTY,
 IP.DISPLAY_PRICING,
  NVL(IP.PACK_DESC,IM.PACK_DESC) PACK_DESC,
NVL(IP.SALES_UOM,IM.SALES_UOM) SALES_UOM,
NVL(IP.UNSPSC,IM.UNSPSC) UNSPSC,
NVL(IP.IMAP,IM.IMAP_PRICE) IMAP,
  IP.SALES_QTY,
  IP.MATERIAL_GROUP,
  II.IMAGE_NAME,
  II.IMAGE_TYPE,
  INS.NOTES,
  IM.KEYWORDS,
  ICVV.FIELD_VALUE COLLECTION
  FROM ITEM_MASTER IM, LOC_ITEM_MASTER LIM, ITEM_PRICES IP, BRANDS B, MANUFACTURER M, ITEM_IMAGES II, ITEM_NOTES INS,ITEM_CF_VALUES_VIEW ICVV 
  WHERE IP.ITEM_PRICE_ID=VAR_ITEM_PRICE_ID AND IP.ITEM_ID=IM.ITEM_ID  AND  FIELD_NAME(+)='Collections'
  AND ICVV.ITEM_ID(+) = IM.ITEM_ID AND IM.ITEM_ID=LIM.ITEM_ID(+) AND LIM.LOCALE_ID(+)=1 AND LIM.ITEM_IMAGE_ID=II.ITEM_IMAGE_ID(+) 
  AND IM.MANUFACTURER_ID=M.MANUFACTURER_ID AND IM.BRAND_ID=B.BRAND_ID AND IP.NOTE_ID=INS.NOTE_ID(+);    


DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_IMAGES----->SELECT ''ITEM'' IMAGE_FROM,II.IMAGE_NAME IMAGE_NAME,II.IMAGE_TYPE IMAGE_TYPE FROM ITEM_IMAGE_LIST IIL, ITEM_IMAGES II 
    WHERE IIL.ITEM_ID = '||V_ITEM_ID||' AND II.ITEM_IMAGE_ID (+) = IIL.ITEM_IMAGES_ID UNION SELECT ''PRODUCT'' IMAGE_FROM, PI.IMAGE_NAME IMAGE_NAME, 
    PI.IMAGE_TYPE IMAGE_TYPE FROM PRODUCT_IMAGE_LIST PIL, PRODUCT_IMAGES PI WHERE PIL.PRODUCT_ID='||V_PRODUCT_ID||' AND PI.PRODUCT_IMAGES_ID(+) = PIL.PRODUCT_IMAGES_ID' );    

  
OPEN ITEM_IMAGES FOR
    SELECT 'ITEM' IMAGE_FROM,II.IMAGE_NAME IMAGE_NAME,II.IMAGE_TYPE IMAGE_TYPE FROM ITEM_IMAGE_LIST IIL, ITEM_IMAGES II 
    WHERE IIL.ITEM_ID = V_ITEM_ID 
    AND II.ITEM_IMAGE_ID (+) = IIL.ITEM_IMAGES_ID

  UNION

    SELECT 'PRODUCT' IMAGE_FROM, PI.IMAGE_NAME IMAGE_NAME, PI.IMAGE_TYPE IMAGE_TYPE FROM PRODUCT_IMAGE_LIST PIL, 
    PRODUCT_IMAGES PI WHERE PIL.PRODUCT_ID=V_PRODUCT_ID AND PI.PRODUCT_IMAGES_ID(+) = PIL.PRODUCT_IMAGES_ID;
    
   
   DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_DOCUMENTS----->SELECT ''ITEM'' DOC_FROM, IDOC.DOCUMENT_NAME DOCUMENT_NAME, IDOC.DOCUMENT_TYPE DOCUMENT_TYPE FROM ITEM_DOCUMENTS_LIST IDL, 
    ITEM_DOCUMENTS IDOC WHERE IDL.LOC_ITEM_ID ='||V_LOC_ITEM_ID||' and IDOC.ITEM_DOCUMENT_ID (+) = IDL.ITEM_DOCUMENT_ID 
    UNION 
    SELECT ''PRODUCT'' DOC_FROM, PD.DOC_NAME DOCUMENT_NAME,PD.DOC_TYPE DOCUMENT_TYPE FROM PRODUCT_DOCUMENTS_LIST PDL, 
    PRODUCT_DOCUMENTS PD WHERE PDL.LOC_PRODUCT_ID ='||V_LOC_PRODUCT_ID||' AND PD.PRODUCT_DOCUMENT_ID = PDL.PRODUCT_DOUMENT_ID' );    

OPEN ITEM_DOCUMENTS FOR
    SELECT 'ITEM' DOC_FROM, IDOC.DOCUMENT_NAME DOCUMENT_NAME, IDOC.DOCUMENT_TYPE DOCUMENT_TYPE,nvl2(IDL.CAPTION,IDL.CAPTION,IDOC.DOCUMENT_NAME) DOCUMENT_DESC FROM ITEM_DOCUMENTS_LIST IDL, 
    ITEM_DOCUMENTS IDOC WHERE IDL.LOC_ITEM_ID = V_LOC_ITEM_ID and IDOC.ITEM_DOCUMENT_ID (+) = IDL.ITEM_DOCUMENT_ID
  
  UNION
  
    SELECT 'PRODUCT' DOC_FROM, PD.DOC_NAME DOCUMENT_NAME,PD.DOC_TYPE DOCUMENT_TYPE,PDL.PRODUCT_DOC_DESC DOCUMENT_DESC FROM PRODUCT_DOCUMENTS_LIST PDL, 
        PRODUCT_DOCUMENTS PD WHERE PDL.LOC_PRODUCT_ID =V_LOC_PRODUCT_ID AND PD.PRODUCT_DOCUMENT_ID = PDL.PRODUCT_DOUMENT_ID;
        

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--PRODUCT_DATA ----->SELECT PRODUCT_NAME,PRODUCT_MARKETING_DESC,PRODUCT_DESC1,PRODUCT_DESC2,PRODUCT_FEATURES,PI.IMAGE_NAME, PI.IMAGE_TYPE
  FROM LOC_PRODUCTS LP, PRODUCT_IMAGES PI WHERE LP.LOC_PRODUCT_ID ='||V_LOC_PRODUCT_ID||' AND PI.PRODUCT_IMAGES_ID (+)= LP.PRODUCT_IMAGES_ID' );    

OPEN PRODUCT_DATA FOR
  SELECT PRODUCT_NAME,PRODUCT_MARKETING_DESC,PRODUCT_DESC1,PRODUCT_DESC2,PRODUCT_FEATURES,PI.IMAGE_NAME, PI.IMAGE_TYPE
  FROM LOC_PRODUCTS LP, PRODUCT_IMAGES PI WHERE LP.LOC_PRODUCT_ID = V_LOC_PRODUCT_ID
  AND PI.PRODUCT_IMAGES_ID (+)= LP.PRODUCT_IMAGES_ID;
  
  
  DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_ATTRIBUTES ----->SELECT IAV.ITEM_ID, IAV.CATEGORY_ATTRIBUTES_ID ,LA.ATTRIBUTE_NAME, LAV.ATTRIBUTE_VALUE, 
        LAU.ATTRIBUTE_UOM, LAVG.ATTRIBUTE_VALUE_GROUP FROM ITEM_ATTRIBUTE_VALUES IAV, 
        LOC_ATTRIBUTE_VALUES LAV, LOC_ATTRIBUTE_UOMS LAU,
      LOC_ATTRIBUTE_VALUE_GROUPS LAVG, LOC_ATTRIBUTES LA
    WHERE IAV.ITEM_ID ='||V_ITEM_ID||'  AND IAV.LOCALE_ID = 1
    and IAV.STATUS = ''A''
    AND IAV.LOC_ATTRIBUTE_ID = LA.LOC_ATTRIBUTE_ID (+)
    AND IAV.LOC_ATTRIBUTE_VALUE_ID = LAV.LOC_ATTRIBUTE_VALUE_ID (+)
    AND IAV.LOC_ATTRIBUTE_UOM_ID = LAU.LOC_ATTRIBUTE_UOM_ID (+)
    AND IAV.LOC_ATTRIBUTE_VALUE_GROUP_ID = LAVG.LOC_ATTRIBUTE_VALUE_GROUP_ID (+)' );    

OPEN ITEM_ATTRIBUTES FOR

  SELECT IAV.ITEM_ID,
  IAV.CATEGORY_ATTRIBUTES_ID ,
  LA.ATTRIBUTE_NAME,
  LAV.ATTRIBUTE_VALUE,
  LAU.ATTRIBUTE_UOM,
  LAVG.ATTRIBUTE_VALUE_GROUP,
  CA.DISP_SEQ
FROM ITEM_ATTRIBUTE_VALUES IAV,
  LOC_ATTRIBUTE_VALUES LAV,
  LOC_ATTRIBUTE_UOMS LAU,
  LOC_ATTRIBUTE_VALUE_GROUPS LAVG,
  LOC_ATTRIBUTES LA,
  ITEM_CLASSIFICATION ITC,
  CATEGORY_ATTRIBUTES CA
WHERE ITC.ITEM_ID                    = V_ITEM_ID
AND ITC.DEFAULT_CATEGORY             = 'Y'
AND IAV.ITEM_ID                      = ITC.ITEM_ID
AND IAV.LOCALE_ID                    = 1
--AND CA.TAXONOMY_TREE_ID              = ITC.TAXONOMY_TREE_ID
AND IAV.CATEGORY_ATTRIBUTES_ID       = CA.CATEGORY_ATTRIBUTES_ID(+)
AND IAV.LOC_ATTRIBUTE_ID             = LA.LOC_ATTRIBUTE_ID (+)
AND IAV.LOC_ATTRIBUTE_VALUE_ID       = LAV.LOC_ATTRIBUTE_VALUE_ID (+)
AND IAV.LOC_ATTRIBUTE_UOM_ID         = LAU.LOC_ATTRIBUTE_UOM_ID (+)
AND IAV.LOC_ATTRIBUTE_VALUE_GROUP_ID = LAVG.LOC_ATTRIBUTE_VALUE_GROUP_ID (+)
ORDER BY CA.DISP_SEQ ASC;
    
    DBMS_OUTPUT.PUT_LINE('Linked Item ----->  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, 
          IDMV.IMAGE_TYPE
        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV
        WHERE IL.LINKED_TO_ITEM_ID = '||V_ITEM_ID
       ||' AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
        AND IDMV.ITEM_ID = IL.ITEM_ID
             AND IDMV.SUBSET_ID = '||V_SUBSET_ID); 

OPEN LINKED_ITEMS FOR
  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.ITEM_PRICE_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, IP.SALES_QTY,IP.NET_PRICE,
          IDMV.IMAGE_TYPE
        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV,ITEM_PRICES IP
        WHERE IL.LINKED_TO_ITEM_ID = V_ITEM_ID
        AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
        AND IDMV.ITEM_ID = IL.ITEM_ID
        AND IDMV.SUBSET_ID = V_SUBSET_ID
         AND IP.ITEM_PRICE_ID = IDMV.ITEM_PRICE_ID;

--  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, 
--          IDMV.IMAGE_TYPE, IP.NET_PRICE, IP.SALES_UOM
--        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV, ITEM_PRICES IP
--        WHERE IL.LINKED_TO_ITEM_ID = V_ITEM_ID
--        AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
--        AND IDMV.ITEM_ID = IL.ITEM_ID
--        AND IDMV.SUBSET_ID = VAR_SUBSETID
--        AND IP.ITEM_PRICE_ID = IDMV.ITEM_PRICE_ID
--  
--  UNION
--  
--  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, 
--          IDMV.IMAGE_TYPE, IP.NET_PRICE, IP.SALES_UOM
--        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV, ITEM_PRICES IP
--        WHERE IL.LINKED_TO_ITEM_ID = V_ITEM_ID
--        AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
--        AND IDMV.ITEM_ID = IL.ITEM_ID
--        AND IDMV.SUBSET_ID = VAR_GENERAL_SUBSETID
--        AND IP.ITEM_PRICE_ID = IDMV.ITEM_PRICE_ID
--        AND IDMV.ITEM_ID NOT IN
--        (SELECT ITEM_ID FROM ITEM_DETAILS_MV WHERE SUBSET_ID=VAR_SUBSETID)  ;
EXCEPTION WHEN
  NO_DATA_FOUND THEN
  QUERY_RESPONSE :=0;

END ;
/
-- Item detail SP


-- April 01

CREATE TABLE BRANCH_LIST
  (
    "BRANCH_LIST_ID" NUMBER NOT NULL ENABLE,
    "BRANCH_ID"      VARCHAR2(20 BYTE),
    "BRANCH_NAME"    VARCHAR2(100 BYTE),
    "ADDRESS"        VARCHAR2(50 BYTE),
    "CITY"           VARCHAR2(50 BYTE),
    "STATE"          VARCHAR2(50 BYTE),
    "COUNTRY"        VARCHAR2(50 BYTE),
    "POSTAL_CODE"    VARCHAR2(20 BYTE),
    "LONGITUDE"      VARCHAR2(50 BYTE),
    "LATITUDE"       VARCHAR2(20 BYTE),
    "UPDATED_DATETIME" DATE
  );
  
  -- April 01
  
  
  --- April 09
  
  CREATE TABLE DEFAULT_FILTER_ATTRIBUTE
  (
    ATTR_NAME VARCHAR2(500 BYTE)
  );
Insert into DEFAULT_FILTER_ATTRIBUTE (ATTR_NAME) values ('category');
Insert into DEFAULT_FILTER_ATTRIBUTE (ATTR_NAME) values ('brand');
Insert into DEFAULT_FILTER_ATTRIBUTE (ATTR_NAME) values ('attr_Collections');
  
  --- April 09
  
  
  -- April 16
 ALTER TABLE CART ADD SITE_ID NUMBER;
 ALTER TABLE PRODUCT_GROUPS_V2 ADD SITE_ID NUMBER;
 ALTER TABLE SAVED_ITEM_LIST ADD SITE_ID NUMBER;
 --April 16
  
  
 -- May 28 2014
  / 
  create or replace
PROCEDURE ITEMS_COMPARE_IN_USE
(
    VAR_ITEM_PRICE_ID IN NUM_ARRAY,
    ITEM_DATA OUT SYS_REFCURSOR,
    ITEM_ATTRIBUTES OUT SYS_REFCURSOR,
    ATTR_NAMES OUT SYS_REFCURSOR
    )
IS 
  QRY_STR VARCHAR2(1000);
  I NUMBER;
  ITEM_QRY VARCHAR2(2000);
  ATTR_VAL_QRY VARCHAR2(2000);
  ATTR_NAME_QRY VARCHAR2(2000);
BEGIN

FOR I IN 1 .. VAR_ITEM_PRICE_ID.COUNT
  LOOP
  IF LENGTH(QRY_STR) >0 THEN
    QRY_STR := QRY_STR || ', ' || VAR_ITEM_PRICE_ID(I);
  ELSE
    QRY_STR := VAR_ITEM_PRICE_ID(I);
  END IF;
END LOOP;

ITEM_QRY := 'SELECT IM.ITEM_ID,
  IP.ITEM_PRICE_ID,
  B.BRAND_NAME,
  B.BRAND_IMAGE,
  IM.PART_NUMBER,
  IM.COMPETITOR_PART_NUMBER,
  IP.CUSTOMER_PART_NUMBER,
  IM.MANUFACTURER_PART_NUMBER,
  IM.UPC,
  LIM.SHORT_DESC,
  LIM.ITEM_MARKETING_DESC,
  LIM.ITEM_FEATURES,
  LIM.LONG_DESC1,
  LIM.LONG_DESC2,
  LIM.META_DESC,
  LIM.META_KEYWORD,
  LIM.PAGE_TITLE,
  CASE
    WHEN NVL(IP.MIN_ORDER_QTY,1) < 2
    THEN NVL(IM.MIN_ORDER_QTY,1)
    WHEN NVL(IP.MIN_ORDER_QTY,1) > 1
    THEN NVL(IP.MIN_ORDER_QTY,1)
  END MIN_ORDER_QTY,
  CASE
    WHEN NVL(IP.ORDER_QTY_INTERVAL,1) < 2
    THEN NVL(IM.ORDER_QTY_INTERVAL,1)
    WHEN NVL(IP.ORDER_QTY_INTERVAL,1) > 1
    THEN NVL(IP.ORDER_QTY_INTERVAL,1)
  END ORDER_QTY_INTERVAL,
  IP.NET_PRICE,
  ip.package_flag,
  IP.PACKAGE_QTY,
  IP.DISPLAY_PRICING,
  NVL(IP.PACK_DESC,IM.PACK_DESC) PACK_DESC,
  NVL(IP.SALES_UOM,IM.SALES_UOM) SALES_UOM,
  NVL(IP.UNSPSC,IM.UNSPSC) UNSPSC,
  NVL(IP.IMAP,IM.IMAP_PRICE) IMAP,
  IP.SALES_QTY,
  IP.MATERIAL_GROUP,
  II.IMAGE_NAME,
  II.IMAGE_TYPE,
  INS.NOTES,
  IM.KEYWORDS
FROM ITEM_MASTER IM,
  LOC_ITEM_MASTER LIM,
  ITEM_PRICES IP,
  BRANDS B,
  MANUFACTURER M,
  ITEM_IMAGES II,
  ITEM_NOTES INS
WHERE IP.ITEM_PRICE_ID IN (' || QRY_STR ||')
AND IP.ITEM_ID        =IM.ITEM_ID
AND IM.ITEM_ID        =LIM.ITEM_ID(+)
AND LIM.LOCALE_ID(+)  =1
AND LIM.ITEM_IMAGE_ID =II.ITEM_IMAGE_ID(+)
AND IM.MANUFACTURER_ID=M.MANUFACTURER_ID
AND IM.BRAND_ID       =B.BRAND_ID
AND IP.NOTE_ID        =INS.NOTE_ID(+) ORDER BY ITEM_ID';

OPEN ITEM_DATA FOR ITEM_QRY;

ATTR_VAL_QRY :='  SELECT IAV.ITEM_ID, IAV.CATEGORY_ATTRIBUTES_ID ,LA.ATTRIBUTE_NAME, LAV.ATTRIBUTE_VALUE, LAU.ATTRIBUTE_UOM, 
    LAVG.ATTRIBUTE_VALUE_GROUP FROM ITEM_ATTRIBUTE_VALUES IAV, LOC_ATTRIBUTE_VALUES LAV, LOC_ATTRIBUTE_UOMS LAU,
      LOC_ATTRIBUTE_VALUE_GROUPS LAVG, LOC_ATTRIBUTES LA
    WHERE IAV.ITEM_ID IN (SELECT ITEM_ID FROM ITEM_DETAILS_MV WHERE ITEM_PRICE_ID IN ('|| QRY_STR ||' ))
    AND IAV.LOCALE_ID = 1
    AND IAV.LOC_ATTRIBUTE_ID = LA.LOC_ATTRIBUTE_ID (+)
    AND IAV.LOC_ATTRIBUTE_VALUE_ID = LAV.LOC_ATTRIBUTE_VALUE_ID (+)
    AND IAV.LOC_ATTRIBUTE_UOM_ID = LAU.LOC_ATTRIBUTE_UOM_ID (+)
    AND IAV.LOC_ATTRIBUTE_VALUE_GROUP_ID = LAVG.LOC_ATTRIBUTE_VALUE_GROUP_ID (+) order by iav.item_id';

OPEN ITEM_ATTRIBUTES FOR ATTR_VAL_QRY;

ATTR_NAME_QRY :='SELECT LOC_ATTRIBUTE_ID,ATTRIBUTE_ID, ATTRIBUTE_NAME FROM LOC_ATTRIBUTES WHERE LOC_ATTRIBUTE_ID IN (
    SELECT DISTINCT IAV.LOC_ATTRIBUTE_ID FROM ITEM_ATTRIBUTE_VALUES IAV WHERE ITEM_ID IN (SELECT ITEM_ID FROM ITEM_DETAILS_MV WHERE ITEM_PRICE_ID IN ('|| QRY_STR ||' )))';
OPEN ATTR_NAMES FOR ATTR_NAME_QRY;
    
  
DBMS_OUTPUT.PUT_LINE('qry_str : ' || QRY_STR); 
DBMS_OUTPUT.PUT_LINE('ITEM_qry : ' || ITEM_QRY); 
DBMS_OUTPUT.PUT_LINE('ATTR_VAL_QRY: ' || ATTR_VAL_QRY); 
dbms_output.put_line('ATTR NAME QRY : ' || ATTR_NAME_QRY); 


END ;
 /
 -- May 28 2014
 
 -- June 06 2014
 /
 create or replace
PROCEDURE GET_FEATURED_PRODUCTS_IN_USE 
(
  VAR_SUBSETID IN NUMBER,
  VAR_GENERAL_SUBSETID IN NUMBER,
  FEATURED_PRODUCTS OUT SYS_REFCURSOR,
   QUERY_RESPONSE OUT NUMBER
)
IS

  FP_QRY VARCHAR2(2000);
  FP_QRY2 VARCHAR2(2000);
  
BEGIN

QUERY_RESPONSE := 1;
  
IF VAR_SUBSETID >0 THEN
  FP_QRY :=
  'SELECT ITEM_ID,ITEM_PRICE_ID,PART_NUMBER,MANUFACTURER_PART_NUMBER,BRAND_NAME,
        SHORT_DESC,NET_PRICE,SALES_UOM,PACK_DESC,IMAGE_NAME,UPC,IMAGE_TYPE,MIN_ORDER_QTY,ORDER_QTY_INTERVAL from item_details_mv where item_price_id in 
(select item_price_id from item_prices where is_featured_product =''Y'' and subset_id =' || VAR_SUBSETID ||')';
END IF;
  

IF VAR_GENERAL_SUBSETID>0 THEN
    FP_QRY2 := 'select ITEM_ID,ITEM_PRICE_ID,PART_NUMBER,MANUFACTURER_PART_NUMBER,BRAND_NAME,
                SHORT_DESC,NET_PRICE,SALES_UOM,PACK_DESC,IMAGE_NAME,UPC,IMAGE_TYPE,MIN_ORDER_QTY,ORDER_QTY_INTERVAL from item_details_mv idmv where idmv.item_price_id in
              (select item_price_id from item_prices where is_featured_product =''Y'' and subset_id ='|| VAR_GENERAL_SUBSETID||
              ') and item_price_id not in (select item_price_id from item_prices where is_featured_product =''Y'' and subset_id ='
              || VAR_SUBSETID || ')';
  IF LENGTH(FP_QRY) >0 THEN
    FP_QRY:= FP_QRY || ' UNION ' || FP_QRY2;
  ELSE
    FP_QRY:= FP_QRY2;
  END IF;
END IF;
dbms_output.put_line('FINAL QUERY:  ' || FP_QRY); 
  OPEN FEATURED_PRODUCTS FOR FP_QRY;
  
IF FEATURED_PRODUCTS%NOTFOUND THEN
QUERY_RESPONSE :=0;
END IF;
  
END GET_FEATURED_PRODUCTS_IN_USE;
  /
 -- June 06 2014
 
 -- June 11 2014
 ALTER TABLE order_items ADD EXT_PRICE NUMBER;
 -- June 11 2014
 
 -- June 14 2014
 ALTER TABLE EMAILS MODIFY TO2 varchar2(200);
 -- June 14 2014
 
 
 -- June 25 2014
 CREATE OR REPLACE FORCE VIEW TOP_TAB_COUNTS_MV AS
     SELECT ip.subset_id,
    s.subset_name,
    tt1.level1,
    tt1.category_name,
    COUNT(*) cnt
  FROM item_classification ic,
    taxonomy_tree tt,
    taxonomy_tree tt1,
    item_prices ip,
    item_master im,
    subsets s
  WHERE tt.taxonomy_tree_id = ic.taxonomy_tree_id
  AND ip.item_id            = ic.item_id
  AND IM.ITEM_ID = IP.ITEM_ID
  AND (IM.DISPLAY_ONLINE = 'Y' AND IM.ACTIVE = 'Y')
  AND ip.status             = 'A'
  AND ip.subset_id          = s.subset_id
  AND tt.taxonomy_id        =
    (SELECT taxonomy_id
    FROM taxonomies t,
      system_parameters sp
    WHERE config_key  = 'ACTIVE_TAXONOMY_VERSION'
    AND taxonomy_name = sp.config_value
    )
  AND tt1.taxonomy_tree_id =tt.level1
  GROUP BY ip.subset_id,
    s.subset_name,
    tt1.level1,
    tt1.category_name;
 -- June 25 2014
 
 
 -- July 09 2014 : Nglantz
 ALTER TABLE ORDERS ADD BILL_EMAIL_ADDRESS VARCHAR2(250);
 ALTER TABLE ORDERS ADD SHIP_EMAIL_ADDRESS VARCHAR2(250);
 -- July 09 2014 : Nglantz
 
  -- July 15 2014 : Nglantz
  ALTER TABLE ORDERS ADD CUSTOMER_NAME VARCHAR2(150);
   ALTER TABLE ORDERS ADD SHIP_FIRST_NAME VARCHAR2(150);
 ALTER TABLE ORDERS ADD SHIP_LAST_NAME VARCHAR2(150);
 -- July 15 2014 : Nglantz
 
 
 --Aug 1, 2014 : Torrco
 /
  create or replace
 
PROCEDURE GET_ITEM_DETAILS_IN_USE
(
    VAR_ITEM_PRICE_ID IN NUMBER,
--    VAR_SUBSETID IN NUMBER,
--    VAR_GENERAL_SUBSETID IN NUMBER,
    ITEM_DATA OUT SYS_REFCURSOR,
    ITEM_IMAGES OUT SYS_REFCURSOR,
    ITEM_ATTRIBUTES OUT SYS_REFCURSOR,
    ITEM_DOCUMENTS OUT SYS_REFCURSOR,
    PRODUCT_DATA OUT SYS_REFCURSOR,
    LINKED_ITEMS OUT SYS_REFCURSOR,
    QUERY_RESPONSE OUT NUMBER
)
IS
V_PRODUCT_ID NUMBER;
V_LOC_PRODUCT_ID NUMBER;
V_ITEM_ID NUMBER;
V_LOC_ITEM_ID NUMBER;
V_SUBSET_ID NUMBER;

TEMP_QUERY VARCHAR2(5000);


BEGIN

QUERY_RESPONSE :=1;
SELECT ITEM_ID, LOC_ITEM_ID, PRODUCT_ID,SUBSET_ID INTO V_ITEM_ID, V_LOC_ITEM_ID, V_PRODUCT_ID , V_SUBSET_ID
FROM ITEM_DETAILS_MV WHERE ITEM_PRICE_ID = VAR_ITEM_PRICE_ID;

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:-----SELECT ITEM_ID, LOC_ITEM_ID, PRODUCT_ID FROM ITEM_DETAILS_MV WHERE ITEM_PRICE_ID = '||VAR_ITEM_PRICE_ID);
 

  BEGIN
SELECT LOC_PRODUCT_ID INTO V_LOC_PRODUCT_ID FROM LOC_PRODUCTS WHERE PRODUCT_ID = V_PRODUCT_ID AND LOCALE_ID=1;

 EXCEPTION
      -- IF NOT FOUND SETTING VFOUNDFLAG TO 0
    WHEN no_data_found THEN
      V_LOC_PRODUCT_ID := 0;
    WHEN OTHERS THEN
      V_LOC_PRODUCT_ID := 0;
      END;

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:-----SELECT LOC_PRODUCT_ID FROM LOC_PRODUCTS WHERE PRODUCT_ID = '||V_PRODUCT_ID ||'AND LOCALE_ID=1');

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_DATA----->SELECT ITEM_ID, ITEM_PRICE_ID, BRAND_NAME, BRAND_IMAGE, PART_NUMBER,COMPETITOR_PART_NUMBER,MANUFACTURER_PART_NUMBER, UPC, SHORT_DESC, 
    ITEM_MARKETING_DESC,ITEM_FEATURES, LONG_DESC1, LONG_DESC2, META_DESC, META_KEYWORD, PAGE_TITLE, NET_PRICE, PACK_DESC, SALES_UOM, IMAGE_NAME, IMAGE_TYPE, NOTES
    FROM ITEM_DETAILS_MV WHERE ITEM_PRICE_ID ='||VAR_ITEM_PRICE_ID);


OPEN ITEM_DATA FOR
SELECT  IM.ITEM_ID,
  IP.ITEM_PRICE_ID,
  B.BRAND_ID,
  B.BRAND_NAME,
  B.BRAND_IMAGE,
  IM.PART_NUMBER,
  IM.COMPETITOR_PART_NUMBER,
  IP.CUSTOMER_PART_NUMBER,
  IM.MANUFACTURER_PART_NUMBER,
  IM.UPC,
  NVL(PRODUCT_ID,0) PRODUCT_ID, 
  LIM.SHORT_DESC,
  LIM.ITEM_MARKETING_DESC,
  LIM.ITEM_FEATURES,
  LIM.LONG_DESC1,
  LIM.LONG_DESC2,
  LIM.META_DESC,
  LIM.META_KEYWORD,
  LIM.PAGE_TITLE,
 CASE
      WHEN NVL(IP.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
 IP.NET_PRICE,
 ip.package_flag,
 IP.PACKAGE_QTY,
 IP.DISPLAY_PRICING,
  NVL(IP.PACK_DESC,IM.PACK_DESC) PACK_DESC,
NVL(IP.SALES_UOM,IM.SALES_UOM) SALES_UOM,
NVL(IP.UNSPSC,IM.UNSPSC) UNSPSC,
NVL(IP.IMAP,IM.IMAP_PRICE) IMAP,
  IP.SALES_QTY,
  IP.MATERIAL_GROUP,
  II.IMAGE_NAME,
  II.IMAGE_TYPE,
  INS.NOTES,
  IM.KEYWORDS,
  ICVV.FIELD_VALUE COLLECTION
  FROM ITEM_MASTER IM, LOC_ITEM_MASTER LIM, ITEM_PRICES IP, BRANDS B, MANUFACTURER M, ITEM_IMAGES II, ITEM_NOTES INS,ITEM_CF_VALUES_VIEW ICVV 
  WHERE IP.ITEM_PRICE_ID=VAR_ITEM_PRICE_ID AND IP.ITEM_ID=IM.ITEM_ID  AND  FIELD_NAME(+)='Collections'
  AND ICVV.ITEM_ID(+) = IM.ITEM_ID AND IM.ITEM_ID=LIM.ITEM_ID(+) AND LIM.LOCALE_ID(+)=1 AND LIM.ITEM_IMAGE_ID=II.ITEM_IMAGE_ID(+) 
  AND IM.MANUFACTURER_ID=M.MANUFACTURER_ID AND IM.BRAND_ID=B.BRAND_ID AND IP.NOTE_ID=INS.NOTE_ID(+);    


DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_IMAGES----->SELECT ''ITEM'' IMAGE_FROM,II.IMAGE_NAME IMAGE_NAME,II.IMAGE_TYPE IMAGE_TYPE FROM ITEM_IMAGE_LIST IIL, ITEM_IMAGES II 
    WHERE IIL.ITEM_ID = '||V_ITEM_ID||' AND II.ITEM_IMAGE_ID (+) = IIL.ITEM_IMAGES_ID UNION SELECT ''PRODUCT'' IMAGE_FROM, PI.IMAGE_NAME IMAGE_NAME, 
    PI.IMAGE_TYPE IMAGE_TYPE FROM PRODUCT_IMAGE_LIST PIL, PRODUCT_IMAGES PI WHERE PIL.PRODUCT_ID='||V_PRODUCT_ID||' AND PI.PRODUCT_IMAGES_ID(+) = PIL.PRODUCT_IMAGES_ID' );    

  
OPEN ITEM_IMAGES FOR
    SELECT 'ITEM' IMAGE_FROM,II.IMAGE_NAME IMAGE_NAME,II.IMAGE_TYPE IMAGE_TYPE, IIL.CAPTION  FROM ITEM_IMAGE_LIST IIL, ITEM_IMAGES II 
    WHERE IIL.ITEM_ID = V_ITEM_ID 
    AND II.ITEM_IMAGE_ID (+) = IIL.ITEM_IMAGES_ID

  UNION

    SELECT 'PRODUCT' IMAGE_FROM, PI.IMAGE_NAME IMAGE_NAME, PI.IMAGE_TYPE IMAGE_TYPE, PI.IMAGE_NAME CAPTION  FROM PRODUCT_IMAGE_LIST PIL, 
    PRODUCT_IMAGES PI WHERE PIL.PRODUCT_ID=V_PRODUCT_ID AND PI.PRODUCT_IMAGES_ID(+) = PIL.PRODUCT_IMAGES_ID;
    
   
   DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_DOCUMENTS----->SELECT ''ITEM'' DOC_FROM, IDOC.DOCUMENT_NAME DOCUMENT_NAME, IDOC.DOCUMENT_TYPE DOCUMENT_TYPE FROM ITEM_DOCUMENTS_LIST IDL, 
    ITEM_DOCUMENTS IDOC WHERE IDL.LOC_ITEM_ID ='||V_LOC_ITEM_ID||' and IDOC.ITEM_DOCUMENT_ID (+) = IDL.ITEM_DOCUMENT_ID 
    UNION 
    SELECT ''PRODUCT'' DOC_FROM, PD.DOC_NAME DOCUMENT_NAME,PD.DOC_TYPE DOCUMENT_TYPE FROM PRODUCT_DOCUMENTS_LIST PDL, 
    PRODUCT_DOCUMENTS PD WHERE PDL.LOC_PRODUCT_ID ='||V_LOC_PRODUCT_ID||' AND PD.PRODUCT_DOCUMENT_ID = PDL.PRODUCT_DOUMENT_ID' );    

OPEN ITEM_DOCUMENTS FOR
    SELECT 'ITEM' DOC_FROM, IDOC.DOCUMENT_NAME DOCUMENT_NAME, IDOC.DOCUMENT_TYPE DOCUMENT_TYPE,nvl2(IDL.CAPTION,IDL.CAPTION,IDOC.DOCUMENT_NAME) DOCUMENT_DESC FROM ITEM_DOCUMENTS_LIST IDL, 
    ITEM_DOCUMENTS IDOC WHERE IDL.LOC_ITEM_ID = V_LOC_ITEM_ID and IDOC.ITEM_DOCUMENT_ID (+) = IDL.ITEM_DOCUMENT_ID
  
  UNION
  
    SELECT 'PRODUCT' DOC_FROM, PD.DOC_NAME DOCUMENT_NAME,PD.DOC_TYPE DOCUMENT_TYPE,PDL.PRODUCT_DOC_DESC DOCUMENT_DESC FROM PRODUCT_DOCUMENTS_LIST PDL, 
        PRODUCT_DOCUMENTS PD WHERE PDL.LOC_PRODUCT_ID =V_LOC_PRODUCT_ID AND PD.PRODUCT_DOCUMENT_ID = PDL.PRODUCT_DOUMENT_ID;
        

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--PRODUCT_DATA ----->SELECT PRODUCT_NAME,PRODUCT_MARKETING_DESC,PRODUCT_DESC1,PRODUCT_DESC2,PRODUCT_FEATURES,PI.IMAGE_NAME, PI.IMAGE_TYPE
  FROM LOC_PRODUCTS LP, PRODUCT_IMAGES PI WHERE LP.LOC_PRODUCT_ID ='||V_LOC_PRODUCT_ID||' AND PI.PRODUCT_IMAGES_ID (+)= LP.PRODUCT_IMAGES_ID' );    

OPEN PRODUCT_DATA FOR
  SELECT PRODUCT_NAME,PRODUCT_MARKETING_DESC,PRODUCT_DESC1,PRODUCT_DESC2,PRODUCT_FEATURES,PI.IMAGE_NAME, PI.IMAGE_TYPE
  FROM LOC_PRODUCTS LP, PRODUCT_IMAGES PI WHERE LP.LOC_PRODUCT_ID = V_LOC_PRODUCT_ID
  AND PI.PRODUCT_IMAGES_ID (+)= LP.PRODUCT_IMAGES_ID;
  
  
  DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_ATTRIBUTES ----->SELECT IAV.ITEM_ID, IAV.CATEGORY_ATTRIBUTES_ID ,LA.ATTRIBUTE_NAME, LAV.ATTRIBUTE_VALUE, 
        LAU.ATTRIBUTE_UOM, LAVG.ATTRIBUTE_VALUE_GROUP FROM ITEM_ATTRIBUTE_VALUES IAV, 
        LOC_ATTRIBUTE_VALUES LAV, LOC_ATTRIBUTE_UOMS LAU,
      LOC_ATTRIBUTE_VALUE_GROUPS LAVG, LOC_ATTRIBUTES LA
    WHERE IAV.ITEM_ID ='||V_ITEM_ID||'  AND IAV.LOCALE_ID = 1
    and IAV.STATUS = ''A''
    AND IAV.LOC_ATTRIBUTE_ID = LA.LOC_ATTRIBUTE_ID (+)
    AND IAV.LOC_ATTRIBUTE_VALUE_ID = LAV.LOC_ATTRIBUTE_VALUE_ID (+)
    AND IAV.LOC_ATTRIBUTE_UOM_ID = LAU.LOC_ATTRIBUTE_UOM_ID (+)
    AND IAV.LOC_ATTRIBUTE_VALUE_GROUP_ID = LAVG.LOC_ATTRIBUTE_VALUE_GROUP_ID (+)' );    

OPEN ITEM_ATTRIBUTES FOR

  SELECT IAV.ITEM_ID,
  IAV.CATEGORY_ATTRIBUTES_ID ,
  LA.ATTRIBUTE_NAME,
  LAV.ATTRIBUTE_VALUE,
  LAU.ATTRIBUTE_UOM,
  LAVG.ATTRIBUTE_VALUE_GROUP,
  CA.DISP_SEQ
FROM ITEM_ATTRIBUTE_VALUES IAV,
  LOC_ATTRIBUTE_VALUES LAV,
  LOC_ATTRIBUTE_UOMS LAU,
  LOC_ATTRIBUTE_VALUE_GROUPS LAVG,
  LOC_ATTRIBUTES LA,
  ITEM_CLASSIFICATION ITC,
  CATEGORY_ATTRIBUTES CA
WHERE ITC.ITEM_ID                    = V_ITEM_ID
AND ITC.DEFAULT_CATEGORY             = 'Y'
AND IAV.ITEM_ID                      = ITC.ITEM_ID
AND IAV.LOCALE_ID                    = 1
--AND CA.TAXONOMY_TREE_ID              = ITC.TAXONOMY_TREE_ID
AND IAV.CATEGORY_ATTRIBUTES_ID       = CA.CATEGORY_ATTRIBUTES_ID(+)
AND IAV.LOC_ATTRIBUTE_ID             = LA.LOC_ATTRIBUTE_ID (+)
AND IAV.LOC_ATTRIBUTE_VALUE_ID       = LAV.LOC_ATTRIBUTE_VALUE_ID (+)
AND IAV.LOC_ATTRIBUTE_UOM_ID         = LAU.LOC_ATTRIBUTE_UOM_ID (+)
AND IAV.LOC_ATTRIBUTE_VALUE_GROUP_ID = LAVG.LOC_ATTRIBUTE_VALUE_GROUP_ID (+)
ORDER BY CA.DISP_SEQ ASC;
    
    DBMS_OUTPUT.PUT_LINE('Linked Item ----->  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, 
          IDMV.IMAGE_TYPE
        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV
        WHERE IL.LINKED_TO_ITEM_ID = '||V_ITEM_ID
       ||' AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
        AND IDMV.ITEM_ID = IL.ITEM_ID
             AND IDMV.SUBSET_ID = '||V_SUBSET_ID); 

OPEN LINKED_ITEMS FOR
  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.ITEM_PRICE_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, IP.SALES_QTY,IP.NET_PRICE,
          IDMV.IMAGE_TYPE
        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV,ITEM_PRICES IP
        WHERE IL.LINKED_TO_ITEM_ID = V_ITEM_ID
        AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
        AND IDMV.ITEM_ID = IL.ITEM_ID
        AND IDMV.SUBSET_ID = V_SUBSET_ID
         AND IP.ITEM_PRICE_ID = IDMV.ITEM_PRICE_ID;

--  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, 
--          IDMV.IMAGE_TYPE, IP.NET_PRICE, IP.SALES_UOM
--        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV, ITEM_PRICES IP
--        WHERE IL.LINKED_TO_ITEM_ID = V_ITEM_ID
--        AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
--        AND IDMV.ITEM_ID = IL.ITEM_ID
--        AND IDMV.SUBSET_ID = VAR_SUBSETID
--        AND IP.ITEM_PRICE_ID = IDMV.ITEM_PRICE_ID
--  
--  UNION
--  
--  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, 
--          IDMV.IMAGE_TYPE, IP.NET_PRICE, IP.SALES_UOM
--        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV, ITEM_PRICES IP
--        WHERE IL.LINKED_TO_ITEM_ID = V_ITEM_ID
--        AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
--        AND IDMV.ITEM_ID = IL.ITEM_ID
--        AND IDMV.SUBSET_ID = VAR_GENERAL_SUBSETID
--        AND IP.ITEM_PRICE_ID = IDMV.ITEM_PRICE_ID
--        AND IDMV.ITEM_ID NOT IN
--        (SELECT ITEM_ID FROM ITEM_DETAILS_MV WHERE SUBSET_ID=VAR_SUBSETID)  ;
EXCEPTION WHEN
  NO_DATA_FOUND THEN
  QUERY_RESPONSE :=0;

END ;
 /
 --Aug 1, 2014 : Torrco
 
--AUG 12, 2014 : Reynolds
ALTER TABLE cimm_users ADD JOB_TITLE VARCHAR2(100 byte);
ALTER TABLE cimm_users ADD SALES_REP_CONTACT VARCHAR2(100 byte);
ALTER TABLE EVENT_REGISTRATION ADD CONTACT_MOBILE_PHONE VARCHAR2(20 byte);
ALTER TABLE EVENT_REGISTRATION ADD CONTACT_MOBILE_PHONE VARCHAR2(10 byte);
ALTER TABLE AT_EVENT_REGISTRATION ADD NEWS_LETTER VARCHAR2(10 byte);
ALTER TABLE AT_EVENT_REGISTRATION ADD CONTACT_MOBILE_PHONE VARCHAR2(20 byte);
--AUG 12, 2014 : Reynolds 

--SEP 11 2014 : Nglantz Long Desc1 and 2 addet to view for SOLR For NGlantz
/*
CREATE OR REPLACE FORCE VIEW SEARCH_ITEM_MASTER_VIEW_V2
AS
WITH t1 AS
  (SELECT nvl2(ICV.item_classificaton_id,ICV.item_classificaton_id
    || '||'
    || IM.ITEM_ID,IM.ITEM_ID) KEY,
    ICV.item_classificaton_id,
    im.item_id,
    IM.PARTNUMBER_KEYWORDS,
    IM.KEYWORDS
    ||'; '
    ||LIM.PAGE_TITLE
    ||'; '
    ||im.partnumber_keywords KEYWORDS,
    im.part_number,
    im.popularity,
    im.manufacturer_id,
    im.brand_id,
    im.manufacturer_part_number,
    im.upc,
    im.display_online,
    im.active,
    IM.HITS,
    m.manufacturer_name,
    b.brand_name,
    ICV.PRODUCT_CATEGORY_ID,
    ICV.PRODUCT_category,
    ICV.LEVEL1_CATEGORY,
    NVL2(ICV.DEFAULT_CATEGORY,ICV.DEFAULT_CATEGORY,'Y') DEFAULT_CATEGORY,
    NVL(lim.short_desc,LIM.INVOICE_DESC) SHORT_DESC,
    ICV.display_priority,
    b.brand_image,
    ii.image_name ITEM_IMAGE,
    ii.image_type,
    EH.EXTERNAL_HITS,
    LIM.PAGE_TITLE,
    LIM.LONG_DESC1,
    LIM.LONG_DESC2,
    NVL2(IM.UPDATED_DATETIME,IM.UPDATED_DATETIME,sysdate) LAST_UPDATED,
    SVD.SHIP_DETAILS
  FROM item_master im,
    manufacturer m,
    brands b,
    ITEM_CATEGORY_VIEW ICV,
    loc_item_master lim,
    ITEM_IMAGES II,
    EXTERNAL_HITS EH,
    (SELECT LISTAGG(NVL(SV.SHIP_VIA_CODE,0)
      ||'|'
      ||NVL(SIR.WAREHOUSE_ID,0)
      ||'|'
      ||NVL(SIR.MIN_ORDER_QTY,0)
      ||'|'
      ||NVL(SIR.ORDER_QTY_INTERVAL,0)
      ||';') WITHIN GROUP (
    ORDER BY ITEM_ID) AS SHIP_DETAILS ,
      SIR.ITEM_ID
    FROM SHIPVIA_ITEMQTY_RESTRICTION SIR,
      SHIP_VIA SV
    WHERE SV.SHIP_VIA_ID=SIR.SHIP_VIA_ID
    GROUP BY ITEM_ID
    ) SVD
  WHERE m.manufacturer_id(+) = im.manufacturer_id
  AND b.brand_id(+)          = im.brand_id
  AND ICV.item_id(+)         = im.item_id
  AND im.item_id             = lim.item_id(+)
  AND lim.locale_id(+)       = 1
  AND ii.item_image_id(+)    = lim.item_image_id
  AND EH.ITEM_ID(+)          = IM.ITEM_ID
  AND IM.ITEM_ID             =SVD.ITEM_ID(+)
  ),
  t2 AS
  (SELECT LISTAGG(iavv.attribute_name
    ||'|~|'
    || iavv.attribute_value
    ||' '
    || iavv.attribute_uom, '}~}') WITHIN GROUP (
  ORDER BY filter_seq) ATTRIBUTE_VALUES ,
    iavv.item_id T2_ITEM_ID,
    ic.item_classificaton_id T2_ITEM_CLASSIFICATION_ID
  FROM iav_view iavv,
    category_attributes ca,
    item_classification ic
  WHERE iavv.attribute_id = ca.attribute_id
  AND ca.filter_enabled   ='Y'
  AND iavv.item_id        = ic.item_id(+)
  AND ic.taxonomy_tree_id = ca.taxonomy_tree_id
  AND iavv.locale_id      =1
  GROUP BY iavv.item_id,
    IC.ITEM_CLASSIFICATON_ID
  ),
  t3 AS
  (SELECT SUBSTR(SYS_CONNECT_BY_PATH(TT.TAXONOMY_TREE_ID,':'),2) CATEGORY_CODE_PATH,
    SUBSTR(SYS_CONNECT_BY_PATH(TT.CATEGORY_NAME, '/*/'), 4) CATEGORY_NAME_PATH,
    TT.TAXONOMY_TREE_ID T3_TAXONOMY_TREE_ID
  FROM TAXONOMY_TREE TT
    START WITH TT.LEVEL_NUMBER                   =1
    CONNECT BY NOCYCLE PRIOR TT.TAXONOMY_TREE_ID = TT.PARENT_TT_ID
  ORDER SIBLINGS BY TT.DISP_SEQ
  ),
  T4 AS
  (SELECT LISTAGG(ICVV.FIELD_NAME
    ||'|~|'
    || ICVV.FIELD_VALUE , '}~}') WITHIN GROUP (
  ORDER BY ICVV.DISPLAY_SEQUENCE) CUSTOM_FIELD_VALUES ,
    ICVV.ITEM_ID T4_ITEM_ID
  FROM ITEM_CF_VALUES_VIEW ICVV
  GROUP BY ICVV.ITEM_ID
  )
SELECT KEY,
  ITEM_CLASSIFICATON_ID,
  ITEM_ID,
  PARTNUMBER_KEYWORDS,
  KEYWORDS,
  PART_NUMBER,
  POPULARITY,
  MANUFACTURER_ID,
  BRAND_ID,
  MANUFACTURER_PART_NUMBER,
  UPC,
  DISPLAY_ONLINE,
  ACTIVE,
  MANUFACTURER_NAME,
  BRAND_NAME,
  PRODUCT_CATEGORY_ID,
  PRODUCT_CATEGORY,
  LEVEL1_CATEGORY,
  DEFAULT_CATEGORY,
  SHORT_DESC,
  DISPLAY_PRIORITY,
  BRAND_IMAGE,
  ITEM_IMAGE,
  IMAGE_TYPE,
  LAST_UPDATED,
  ATTRIBUTE_VALUES,
  T2_ITEM_ID,
  T2_ITEM_CLASSIFICATION_ID,
  EXTERNAL_HITS,
  page_title,
  LONG_DESC1,
  LONG_DESC2,
  HITS,
  nvl2(T3.CATEGORY_CODE_PATH,'0:'
  ||T3.CATEGORY_CODE_PATH,NULL) CATEGORY_CODE_PATH,
  T3.CATEGORY_NAME_PATH,
  CUSTOM_FIELD_VALUES,
  SHIP_DETAILS
FROM T1,
  t2,
  T3,
  T4
WHERE T1.ITEM_ID            =T2.T2_ITEM_ID(+)
AND T1.ITEM_CLASSIFICATON_ID=T2.T2_ITEM_CLASSIFICATION_ID(+)
AND t1.PRODUCT_CATEGORY_ID  =t3.T3_TAXONOMY_TREE_ID(+)
AND T1.ITEM_ID              =T4.T4_ITEM_ID(+);
*/
--SEP 11 2014 : Nglantz Long Desc1 and 2 addet to view for SOLR For NGlantz

/
-- Sep 11 2014 : Reynilds for Document category

create or replace
PROCEDURE GET_ITEM_DETAILS_IN_USE
(
    VAR_ITEM_PRICE_ID IN NUMBER,
--    VAR_SUBSETID IN NUMBER,
--    VAR_GENERAL_SUBSETID IN NUMBER,
    ITEM_DATA OUT SYS_REFCURSOR,
    ITEM_IMAGES OUT SYS_REFCURSOR,
    ITEM_ATTRIBUTES OUT SYS_REFCURSOR,
    ITEM_DOCUMENTS OUT SYS_REFCURSOR,
    PRODUCT_DATA OUT SYS_REFCURSOR,
    LINKED_ITEMS OUT SYS_REFCURSOR,
    QUERY_RESPONSE OUT NUMBER
)
IS
V_PRODUCT_ID NUMBER;
V_LOC_PRODUCT_ID NUMBER;
V_ITEM_ID NUMBER;
V_LOC_ITEM_ID NUMBER;
V_SUBSET_ID NUMBER;

TEMP_QUERY VARCHAR2(5000);


BEGIN

QUERY_RESPONSE :=1;
SELECT ITEM_ID, LOC_ITEM_ID, PRODUCT_ID,SUBSET_ID INTO V_ITEM_ID, V_LOC_ITEM_ID, V_PRODUCT_ID , V_SUBSET_ID
FROM ITEM_DETAILS_MV WHERE ITEM_PRICE_ID = VAR_ITEM_PRICE_ID;

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:-----SELECT ITEM_ID, LOC_ITEM_ID, PRODUCT_ID FROM ITEM_DETAILS_MV WHERE ITEM_PRICE_ID = '||VAR_ITEM_PRICE_ID);
 

  BEGIN
SELECT LOC_PRODUCT_ID INTO V_LOC_PRODUCT_ID FROM LOC_PRODUCTS WHERE PRODUCT_ID = V_PRODUCT_ID AND LOCALE_ID=1;

 EXCEPTION
      -- IF NOT FOUND SETTING VFOUNDFLAG TO 0
    WHEN no_data_found THEN
      V_LOC_PRODUCT_ID := 0;
    WHEN OTHERS THEN
      V_LOC_PRODUCT_ID := 0;
      END;

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:-----SELECT LOC_PRODUCT_ID FROM LOC_PRODUCTS WHERE PRODUCT_ID = '||V_PRODUCT_ID ||'AND LOCALE_ID=1');

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_DATA----->SELECT ITEM_ID, ITEM_PRICE_ID, BRAND_NAME, BRAND_IMAGE, PART_NUMBER,COMPETITOR_PART_NUMBER,MANUFACTURER_PART_NUMBER, UPC, SHORT_DESC, 
    ITEM_MARKETING_DESC,ITEM_FEATURES, LONG_DESC1, LONG_DESC2, META_DESC, META_KEYWORD, PAGE_TITLE, NET_PRICE, PACK_DESC, SALES_UOM, IMAGE_NAME, IMAGE_TYPE, NOTES
    FROM ITEM_DETAILS_MV WHERE ITEM_PRICE_ID ='||VAR_ITEM_PRICE_ID);


OPEN ITEM_DATA FOR
SELECT  IM.ITEM_ID,
  IP.ITEM_PRICE_ID,
  B.BRAND_ID,
  B.BRAND_NAME,
  B.BRAND_IMAGE,
  M.MANUFACTURER_NAME,
  M.MANUFACTURER_ID,
  M.MANUFACTURER_LOGO,
  IM.PART_NUMBER,
  IM.COMPETITOR_PART_NUMBER,
  IP.CUSTOMER_PART_NUMBER,
  IM.MANUFACTURER_PART_NUMBER,
  IM.UPC,
  NVL(PRODUCT_ID,0) PRODUCT_ID, 
  LIM.SHORT_DESC,
  LIM.ITEM_MARKETING_DESC,
  LIM.ITEM_FEATURES,
  LIM.LONG_DESC1,
  LIM.LONG_DESC2,
  LIM.META_DESC,
  LIM.META_KEYWORD,
  LIM.PAGE_TITLE,
 CASE
      WHEN NVL(IP.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
 IP.NET_PRICE,
 ip.package_flag,
 IP.PACKAGE_QTY,
 IP.DISPLAY_PRICING,
  NVL(IP.PACK_DESC,IM.PACK_DESC) PACK_DESC,
NVL(IP.SALES_UOM,IM.SALES_UOM) SALES_UOM,
NVL(IP.UNSPSC,IM.UNSPSC) UNSPSC,
NVL(IP.IMAP,IM.IMAP_PRICE) IMAP,
  IP.SALES_QTY,
  IP.MATERIAL_GROUP,
  II.IMAGE_NAME,
  II.IMAGE_TYPE,
  INS.NOTES,
  IM.KEYWORDS,
  ICVV.FIELD_VALUE COLLECTION
  FROM ITEM_MASTER IM, LOC_ITEM_MASTER LIM, ITEM_PRICES IP, BRANDS B, MANUFACTURER M, ITEM_IMAGES II, ITEM_NOTES INS,ITEM_CF_VALUES_VIEW ICVV 
  WHERE IP.ITEM_PRICE_ID=VAR_ITEM_PRICE_ID AND IP.ITEM_ID=IM.ITEM_ID  AND  FIELD_NAME(+)='Collections'
  AND ICVV.ITEM_ID(+) = IM.ITEM_ID AND IM.ITEM_ID=LIM.ITEM_ID(+) AND LIM.LOCALE_ID(+)=1 AND LIM.ITEM_IMAGE_ID=II.ITEM_IMAGE_ID(+) 
  AND IM.MANUFACTURER_ID=M.MANUFACTURER_ID AND IM.BRAND_ID=B.BRAND_ID AND IP.NOTE_ID=INS.NOTE_ID(+);    


DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_IMAGES----->SELECT ''ITEM'' IMAGE_FROM,II.IMAGE_NAME IMAGE_NAME,II.IMAGE_TYPE IMAGE_TYPE FROM ITEM_IMAGE_LIST IIL, ITEM_IMAGES II 
    WHERE IIL.ITEM_ID = '||V_ITEM_ID||' AND II.ITEM_IMAGE_ID (+) = IIL.ITEM_IMAGES_ID UNION SELECT ''PRODUCT'' IMAGE_FROM, PI.IMAGE_NAME IMAGE_NAME, 
    PI.IMAGE_TYPE IMAGE_TYPE FROM PRODUCT_IMAGE_LIST PIL, PRODUCT_IMAGES PI WHERE PIL.PRODUCT_ID='||V_PRODUCT_ID||' AND PI.PRODUCT_IMAGES_ID(+) = PIL.PRODUCT_IMAGES_ID' );    

  
OPEN ITEM_IMAGES FOR
    SELECT 'ITEM' IMAGE_FROM,II.IMAGE_NAME IMAGE_NAME,II.IMAGE_TYPE IMAGE_TYPE, IIL.CAPTION  FROM ITEM_IMAGE_LIST IIL, ITEM_IMAGES II 
    WHERE IIL.ITEM_ID = V_ITEM_ID 
    AND II.ITEM_IMAGE_ID (+) = IIL.ITEM_IMAGES_ID

  UNION

    SELECT 'PRODUCT' IMAGE_FROM, PI.IMAGE_NAME IMAGE_NAME, PI.IMAGE_TYPE IMAGE_TYPE, PI.IMAGE_NAME CAPTION  FROM PRODUCT_IMAGE_LIST PIL, 
    PRODUCT_IMAGES PI WHERE PIL.PRODUCT_ID=V_PRODUCT_ID AND PI.PRODUCT_IMAGES_ID(+) = PIL.PRODUCT_IMAGES_ID;
    
   
   DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_DOCUMENTS----->SELECT ''ITEM'' DOC_FROM, IDOC.DOCUMENT_NAME DOCUMENT_NAME, IDOC.DOCUMENT_TYPE DOCUMENT_TYPE FROM ITEM_DOCUMENTS_LIST IDL, 
    ITEM_DOCUMENTS IDOC WHERE IDL.LOC_ITEM_ID ='||V_LOC_ITEM_ID||' and IDOC.ITEM_DOCUMENT_ID (+) = IDL.ITEM_DOCUMENT_ID 
    UNION 
    SELECT ''PRODUCT'' DOC_FROM, PD.DOC_NAME DOCUMENT_NAME,PD.DOC_TYPE DOCUMENT_TYPE FROM PRODUCT_DOCUMENTS_LIST PDL, 
    PRODUCT_DOCUMENTS PD WHERE PDL.LOC_PRODUCT_ID ='||V_LOC_PRODUCT_ID||' AND PD.PRODUCT_DOCUMENT_ID = PDL.PRODUCT_DOUMENT_ID' );    

OPEN ITEM_DOCUMENTS FOR
    SELECT 'ITEM' DOC_FROM, IDOC.DOCUMENT_NAME DOCUMENT_NAME, IDOC.DOCUMENT_TYPE DOCUMENT_TYPE,nvl2(IDL.CAPTION,IDL.CAPTION,IDOC.DOCUMENT_NAME) DOCUMENT_DESC, IDC.ITEM_DOCUMENTS_CATEGORY_NAME FROM ITEM_DOCUMENTS_LIST IDL, 
    ITEM_DOCUMENTS IDOC, ITEM_DOCUMENTS_CATEGORY IDC WHERE IDL.LOC_ITEM_ID = V_LOC_ITEM_ID and IDOC.ITEM_DOCUMENT_ID = IDL.ITEM_DOCUMENT_ID AND IDC.ITEM_DOCUMENTS_CATEGORY_ID =  IDL.ITEM_DOC_CATEGORY_ID (+)
  UNION
    SELECT 'PRODUCT' DOC_FROM, PD.DOC_NAME DOCUMENT_NAME,PD.DOC_TYPE DOCUMENT_TYPE,PDL.PRODUCT_DOC_DESC DOCUMENT_DESC,''  ITEM_DOCUMENTS_CATEGORY_NAME  FROM PRODUCT_DOCUMENTS_LIST PDL, 
    PRODUCT_DOCUMENTS PD WHERE PDL.LOC_PRODUCT_ID =V_LOC_PRODUCT_ID AND PD.PRODUCT_DOCUMENT_ID = PDL.PRODUCT_DOUMENT_ID;
        

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--PRODUCT_DATA ----->SELECT PRODUCT_NAME,PRODUCT_MARKETING_DESC,PRODUCT_DESC1,PRODUCT_DESC2,PRODUCT_FEATURES,PI.IMAGE_NAME, PI.IMAGE_TYPE
  FROM LOC_PRODUCTS LP, PRODUCT_IMAGES PI WHERE LP.LOC_PRODUCT_ID ='||V_LOC_PRODUCT_ID||' AND PI.PRODUCT_IMAGES_ID (+)= LP.PRODUCT_IMAGES_ID' );    

OPEN PRODUCT_DATA FOR
  SELECT PRODUCT_NAME,PRODUCT_MARKETING_DESC,PRODUCT_DESC1,PRODUCT_DESC2,PRODUCT_FEATURES,PI.IMAGE_NAME, PI.IMAGE_TYPE
  FROM LOC_PRODUCTS LP, PRODUCT_IMAGES PI WHERE LP.LOC_PRODUCT_ID = V_LOC_PRODUCT_ID
  AND PI.PRODUCT_IMAGES_ID (+)= LP.PRODUCT_IMAGES_ID;
  
  
  DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_ATTRIBUTES ----->SELECT IAV.ITEM_ID, IAV.CATEGORY_ATTRIBUTES_ID ,LA.ATTRIBUTE_NAME, LAV.ATTRIBUTE_VALUE, 
        LAU.ATTRIBUTE_UOM, LAVG.ATTRIBUTE_VALUE_GROUP FROM ITEM_ATTRIBUTE_VALUES IAV, 
        LOC_ATTRIBUTE_VALUES LAV, LOC_ATTRIBUTE_UOMS LAU,
      LOC_ATTRIBUTE_VALUE_GROUPS LAVG, LOC_ATTRIBUTES LA
    WHERE IAV.ITEM_ID ='||V_ITEM_ID||'  AND IAV.LOCALE_ID = 1
    and IAV.STATUS = ''A''
    AND IAV.LOC_ATTRIBUTE_ID = LA.LOC_ATTRIBUTE_ID (+)
    AND IAV.LOC_ATTRIBUTE_VALUE_ID = LAV.LOC_ATTRIBUTE_VALUE_ID (+)
    AND IAV.LOC_ATTRIBUTE_UOM_ID = LAU.LOC_ATTRIBUTE_UOM_ID (+)
    AND IAV.LOC_ATTRIBUTE_VALUE_GROUP_ID = LAVG.LOC_ATTRIBUTE_VALUE_GROUP_ID (+)' );    

OPEN ITEM_ATTRIBUTES FOR

  SELECT IAV.ITEM_ID,
  IAV.CATEGORY_ATTRIBUTES_ID ,
  LA.ATTRIBUTE_NAME,
  LAV.ATTRIBUTE_VALUE,
  LAU.ATTRIBUTE_UOM,
  LAVG.ATTRIBUTE_VALUE_GROUP,
  CA.DISP_SEQ
FROM ITEM_ATTRIBUTE_VALUES IAV,
  LOC_ATTRIBUTE_VALUES LAV,
  LOC_ATTRIBUTE_UOMS LAU,
  LOC_ATTRIBUTE_VALUE_GROUPS LAVG,
  LOC_ATTRIBUTES LA,
  ITEM_CLASSIFICATION ITC,
  CATEGORY_ATTRIBUTES CA
WHERE ITC.ITEM_ID                    = V_ITEM_ID
AND ITC.DEFAULT_CATEGORY             = 'Y'
AND IAV.ITEM_ID                      = ITC.ITEM_ID
AND IAV.LOCALE_ID                    = 1
--AND CA.TAXONOMY_TREE_ID              = ITC.TAXONOMY_TREE_ID
AND IAV.CATEGORY_ATTRIBUTES_ID       = CA.CATEGORY_ATTRIBUTES_ID(+)
AND IAV.LOC_ATTRIBUTE_ID             = LA.LOC_ATTRIBUTE_ID (+)
AND IAV.LOC_ATTRIBUTE_VALUE_ID       = LAV.LOC_ATTRIBUTE_VALUE_ID (+)
AND IAV.LOC_ATTRIBUTE_UOM_ID         = LAU.LOC_ATTRIBUTE_UOM_ID (+)
AND IAV.LOC_ATTRIBUTE_VALUE_GROUP_ID = LAVG.LOC_ATTRIBUTE_VALUE_GROUP_ID (+)
ORDER BY CA.DISP_SEQ ASC;
    
    DBMS_OUTPUT.PUT_LINE('Linked Item ----->  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, 
          IDMV.IMAGE_TYPE
        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV
        WHERE IL.LINKED_TO_ITEM_ID = '||V_ITEM_ID
       ||' AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
        AND IDMV.ITEM_ID = IL.ITEM_ID
             AND IDMV.SUBSET_ID = '||V_SUBSET_ID); 

OPEN LINKED_ITEMS FOR
  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.ITEM_PRICE_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, IP.SALES_QTY,IP.NET_PRICE,
          IDMV.IMAGE_TYPE
        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV,ITEM_PRICES IP
        WHERE IL.LINKED_TO_ITEM_ID = V_ITEM_ID
        AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
        AND IDMV.ITEM_ID = IL.ITEM_ID
        AND IDMV.SUBSET_ID = V_SUBSET_ID
         AND IP.ITEM_PRICE_ID = IDMV.ITEM_PRICE_ID;

--  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, 
--          IDMV.IMAGE_TYPE, IP.NET_PRICE, IP.SALES_UOM
--        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV, ITEM_PRICES IP
--        WHERE IL.LINKED_TO_ITEM_ID = V_ITEM_ID
--        AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
--        AND IDMV.ITEM_ID = IL.ITEM_ID
--        AND IDMV.SUBSET_ID = VAR_SUBSETID
--        AND IP.ITEM_PRICE_ID = IDMV.ITEM_PRICE_ID
--  
--  UNION
--  
--  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, 
--          IDMV.IMAGE_TYPE, IP.NET_PRICE, IP.SALES_UOM
--        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV, ITEM_PRICES IP
--        WHERE IL.LINKED_TO_ITEM_ID = V_ITEM_ID
--        AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
--        AND IDMV.ITEM_ID = IL.ITEM_ID
--        AND IDMV.SUBSET_ID = VAR_GENERAL_SUBSETID
--        AND IP.ITEM_PRICE_ID = IDMV.ITEM_PRICE_ID
--        AND IDMV.ITEM_ID NOT IN
--        (SELECT ITEM_ID FROM ITEM_DETAILS_MV WHERE SUBSET_ID=VAR_SUBSETID)  ;
EXCEPTION WHEN
  NO_DATA_FOUND THEN
  QUERY_RESPONSE :=0;

END ;
-- Sep 11 2014 : Reynilds for Document category
/



--- Sep 15 2014

CREATE OR REPLACE FORCE VIEW ITEM_DETAILS_MV
AS
  SELECT IM.ITEM_ID,
    IP.SUBSET_ID,
    IP.ITEM_PRICE_ID,
    IP.CUSTOMER_PART_NUMBER,
    LIM.LOC_ITEM_ID,
    IM.PRODUCT_ID,
    IM.BRAND_ID,
    B.BRAND_NAME,
    B.BRAND_IMAGE,
    M.MANUFACTURER_NAME,
    IM.PART_NUMBER,
    IM.COMPETITOR_PART_NUMBER,
    IM.MANUFACTURER_PART_NUMBER,
    IM.MANUFACTURER_ID,
    IM.UPC,
    IM.PACKAGE_QTY,
    LIM.LOCALE_ID,
    LIM.SHORT_DESC,
    LIM.LONG_DESC1,
    LIM.LONG_DESC2,
    LIM.ITEM_MARKETING_DESC,
    LIM.ITEM_FEATURES,
    LIM.META_DESC,
    LIM.META_KEYWORD,
    LIM.PAGE_TITLE,
    LIM.INVOICE_DESC,
    IP.NET_PRICE,
    IP.PACK_DESC,
    CASE
      WHEN NVL(IP.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
    NVL(IP.SALES_UOM,IM.SALES_UOM) SALES_UOM,
    IP.MATERIAL_GROUP,
    IP.UNSPSC,
    II.IMAGE_NAME,
    II.IMAGE_TYPE,
    INOT.NOTES,
    GI.IS_GOLDENITEM,
    IM.ROWID IM_ROWID,
    LIM.ROWID LIM_ROWID,
    IP.ROWID IP_ROWID,
    II.ROWID II_ROWID,
    B.ROWID B_ROWID,
    INOT.ROWID INOT_ROWID
  FROM ITEM_MASTER IM,
    LOC_ITEM_MASTER LIM,
    ITEM_PRICES IP,
    ITEM_IMAGES II,
    BRANDS b,
    ITEM_NOTES INOT,
    GOLDEN_ITEMS GI,
    MANUFACTURER M
  WHERE IM.ACTIVE       ='Y'
  AND LIM.ITEM_ID(+)    =IM.ITEM_ID
  AND LIM.ITEM_IMAGE_ID = II.ITEM_IMAGE_ID(+)
  AND IP.ITEM_ID        =IM.ITEM_ID(+)
  AND IP.STATUS         ='A'
  AND IP.NOTE_ID        = INOT.NOTE_ID(+)
  AND IM.BRAND_ID       = B.BRAND_ID(+)
  AND IM.MANUFACTURER_ID= M.MANUFACTURER_ID(+)
  AND GI.ITEM_ID(+)     = IM.ITEM_ID;

*/
-- Sep 15 2014

--SEP 16, 2014: Auto Complete 
CREATE TABLE "AUTOCOMPLETE_CONFIG"
  (
    "FIELD_ID"            NUMBER NOT NULL ENABLE,
    "REQUIRED_FIELD_NAME" VARCHAR2(20 BYTE),
  )

-- SEP 17, 2014 : System Configuration
UPDATE SYSTEM_PARAMETERS SET CATEGORY='Email Configuration' WHERE CONFIG_KEY IN ('MAILSELECT','MAILSMTP','MAILSMTPPORT','FROMMAILID','FROMMAILPASSWORD','EMAILRELAY');

-- SEp 18 2014
CREATE OR REPLACE VIEW CATEGORY_FILTER_ATTRIBUTES AS
SELECT CA.CATEGORY_ATTRIBUTES_ID
    ||'_'
    ||CA.TAXONOMY_TREE_ID KEY,
    CA.TAXONOMY_TREE_ID,
    A.ATTRIBUTE_NAME,
    CA.DISP_SEQ,
    NVL2(CA.UPDATED_DATETIME,CA.UPDATED_DATETIME,SYSDATE) UPDATED_DATETIME,
    CA.IS_DIFFERENTIATOR_ATTRIBUTE
  FROM CATEGORY_ATTRIBUTES CA,
    ATTRIBUTES A
  WHERE CA.FILTER_ENABLED='Y'
  AND CA.ATTRIBUTE_ID    =A.ATTRIBUTE_ID 
  AND UPPER(A.ATTRIBUTE_NAME) NOT IN(select replace(upper(attr_name),'ATTR_','') attr_name from default_filter_attribute);
  -- SEP 18 2014
  
-- SEP 18, 2014 : Site Id for Quote Cart
ALTER TABLE QUOTE_CART ADD SITE_ID NUMBER;
ALTER TABLE AT_QUOTE_CART ADD SITE_ID NUMBER;
-- SEP 18, 2014 : Site Id for Quote Cart



-- Static Links Open Same/New table
/
create or replace
PROCEDURE STATIC_MENU_PROC_NEW
(
      SITE_ID IN NUMBER,
       STATIC_MENU_LIST OUT SYS_REFCURSOR 
    )
IS
  QRY1 VARCHAR2(4000);
  QRY2 VARCHAR2(4000);
  QRY3 VARCHAR2(4000);
  QRY4 VARCHAR2(4000);
  QRY5 VARCHAR2(4000);
  QRY6 VARCHAR2(4000);
  ORD_BY_QRY VARCHAR2(400);
  FINAL_QRY VARCHAR2(13000);
 
BEGIN
  ----------------------------------------------------------------------------------------------------------------------------------
  --Beginning of Popular_search_result manuplation part
  ---------------------------------------------------------------------------------------------------------------------------------
 QRY1 := 'SELECT OPEN_PAGE_IN,L1_LINKID,L1_NAME,L2_LINKID,L2_NAME,L3_LINKID,L3_NAME,L4_LINKID,L4_NAME,L5_NAME,L5_LINKID,L6_NAME,L6_LINKID,STATIC_PAGE_TYPE,STATIC_PAGE_URL,STATIC_PAGE_ID,LEVEL_NUMBER,DISP_SEQ FROM
(SELECT  L1.OPEN_PAGE_IN,L1.STATIC_LINK_ID "L1_LINKID",  L1.LINK_NAME "L1_NAME",  NULL "L2_LINKID",  '''' "L2_NAME",  
 NULL "L3_LINKID",  '''' "L3_NAME",  NULL "L4_LINKID",  '''' "L4_NAME",  NULL "L5_LINKID",  '''' "L5_NAME",  NULL "L6_LINKID", '''' "L6_NAME",  L1.STATIC_PAGE_TYPE,L1.STATIC_PAGE_URL,L1.STATIC_PAGE_ID,  L1.LEVEL_NUMBER,  L1.DISP_SEQ "DISP_SEQ" 
 FROM WEB_STATIC_LINKS_TREE L1 WHERE L1.LEVEL_NUMBER=1 AND L1.SITE_ID = '||SITE_ID||'  AND LEVEL2 IS NOT NULL AND L1.ACTIVE =''Y''';
 
 QRY2 := ' SELECT L1.OPEN_PAGE_IN,L2.STATIC_LINK_ID "L1_LINKID", L2.LINK_NAME "L1_NAME", L3.STATIC_LINK_ID "L2_LINKID", L3.LINK_NAME "L2_NAME", 
 NULL "L3_LINKID", '''' "L3_NAME", NULL "L4_LINKID", '''' "L4_NAME", NULL "L5_LINKID",'''' "L5_NAME", NULL "L6_LINKID",'''' "L6_NAME",L3.STATIC_PAGE_TYPE,L3.STATIC_PAGE_URL, L3.STATIC_PAGE_ID, L3.LEVEL_NUMBER, L3.DISP_SEQ "DISP_SEQ" 
 FROM WEB_STATIC_LINKS_TREE L1, WEB_STATIC_LINKS_TREE L2, WEB_STATIC_LINKS_TREE L3 WHERE L1.LEVEL_NUMBER=2 AND L1.SITE_ID = '||SITE_ID||' AND L1.LEVEL2 = L3.STATIC_LINK_ID
 AND L1.LEVEL1 = L2.STATIC_LINK_ID  AND L1.ACTIVE =''Y''';
 
 QRY3 := 'SELECT L1.OPEN_PAGE_IN,L2.STATIC_LINK_ID "L1_LINKID", L2.LINK_NAME "L1_NAME", L3.STATIC_LINK_ID "L2_LINKID", L3.LINK_NAME "L2_NAME", L4.STATIC_LINK_ID "L3_LINKID", 
 L4.LINK_NAME "L3_NAME", NULL "L4_LINKID", '''' "L4_NAME", NULL "L5_LINKID",'''' "L5_NAME", NULL "L6_LINKID",'''' "L6_NAME",L4.STATIC_PAGE_TYPE,L4.STATIC_PAGE_URL, L4.STATIC_PAGE_ID, L4.LEVEL_NUMBER, L4.DISP_SEQ "DISP_SEQ" FROM WEB_STATIC_LINKS_TREE L1, 
 WEB_STATIC_LINKS_TREE L2, WEB_STATIC_LINKS_TREE L3, WEB_STATIC_LINKS_TREE L4 WHERE L1.LEVEL_NUMBER=3 AND L1.SITE_ID = '||SITE_ID||' AND L1.LEVEL2 = L3.STATIC_LINK_ID 
 AND L1.LEVEL1 = L2.STATIC_LINK_ID AND L1.LEVEL3 = L4.STATIC_LINK_ID AND L1.ACTIVE =''Y''';
 
 QRY4 :=' SELECT L1.OPEN_PAGE_IN,L2.STATIC_LINK_ID "L1_LINKID", L2.LINK_NAME "L1_NAME", L3.STATIC_LINK_ID "L2_LINKID", L3.LINK_NAME "L2_NAME", L4.STATIC_LINK_ID "L3_LINKID", 
 L4.LINK_NAME "L3_NAME", L5.STATIC_LINK_ID "L4_LINKID", L5.LINK_NAME "L4_NAME", NULL "L5_LINKID",'''' "L5_NAME", NULL "L6_LINKID",'''' "L6_NAME",L5.STATIC_PAGE_TYPE,L5.STATIC_PAGE_URL, L5.STATIC_PAGE_ID, L5.LEVEL_NUMBER, L5.DISP_SEQ "DISP_SEQ" 
 FROM WEB_STATIC_LINKS_TREE L1, WEB_STATIC_LINKS_TREE L2, WEB_STATIC_LINKS_TREE L3, WEB_STATIC_LINKS_TREE L4, WEB_STATIC_LINKS_TREE L5 
 WHERE L1.LEVEL_NUMBER=4 AND L1.SITE_ID = '||SITE_ID||' AND L1.LEVEL2 = L3.STATIC_LINK_ID AND L1.LEVEL1 = L2.STATIC_LINK_ID AND L1.LEVEL3 = L4.STATIC_LINK_ID AND L1.LEVEL4 = L5.STATIC_LINK_ID AND L1.ACTIVE =''Y''';
 
 QRY5 :=' SELECT L1.OPEN_PAGE_IN,L2.STATIC_LINK_ID "L1_LINKID",  L2.LINK_NAME "L1_NAME",  L3.STATIC_LINK_ID "L2_LINKID",  L3.LINK_NAME "L2_NAME",  L4.STATIC_LINK_ID "L3_LINKID",
  L4.LINK_NAME "L3_NAME",  L5.STATIC_LINK_ID "L4_LINKID",  L5.LINK_NAME "L4_NAME",  L6.STATIC_LINK_ID "L5_LINKID",  L6.LINK_NAME "L5_NAME", NULL "L6_LINKID",'''' "L6_NAME",L6.STATIC_PAGE_TYPE,
  L6.STATIC_PAGE_URL,  L6.STATIC_PAGE_ID,L6.LEVEL_NUMBER,  L6.DISP_SEQ "DISP_SEQ" FROM WEB_STATIC_LINKS_TREE L1,  WEB_STATIC_LINKS_TREE L2,  WEB_STATIC_LINKS_TREE L3,  WEB_STATIC_LINKS_TREE L4,
  WEB_STATIC_LINKS_TREE L5,  WEB_STATIC_LINKS_TREE L6 WHERE L1.LEVEL_NUMBER=5 AND L1.SITE_ID = '||SITE_ID||' AND L1.LEVEL2        = L3.STATIC_LINK_ID AND L1.LEVEL1        = L2.STATIC_LINK_ID
  AND L1.LEVEL3        = L4.STATIC_LINK_ID AND L1.LEVEL4        = L5.STATIC_LINK_ID AND L1.LEVEL5        = L6.STATIC_LINK_ID AND L1.ACTIVE =''Y''';

 QRY6 := ' SELECT L1.OPEN_PAGE_IN,L2.STATIC_LINK_ID "L1_LINKID",L2.LINK_NAME "L1_NAME",L3.STATIC_LINK_ID "L2_LINKID", L3.LINK_NAME "L2_NAME", L4.STATIC_LINK_ID "L3_LINKID", L4.LINK_NAME "L3_NAME", L5.STATIC_LINK_ID "L4_LINKID", L5.LINK_NAME "L4_NAME",
    L6.STATIC_LINK_ID "L5_LINKID", L6.LINK_NAME "L5_NAME",L7.STATIC_LINK_ID "L6_LINKID", L7.LINK_NAME "L6_NAME", L7.STATIC_PAGE_TYPE,L7.STATIC_PAGE_URL,L7.STATIC_PAGE_ID,L7.LEVEL_NUMBER,L7.DISP_SEQ "DISP_SEQ" FROM WEB_STATIC_LINKS_TREE L1,
    WEB_STATIC_LINKS_TREE L2,WEB_STATIC_LINKS_TREE L3, WEB_STATIC_LINKS_TREE L4,WEB_STATIC_LINKS_TREE L5,WEB_STATIC_LINKS_TREE L6,WEB_STATIC_LINKS_TREE L7 WHERE L1.LEVEL_NUMBER=6  AND L1.SITE_ID = '||SITE_ID||' AND L1.LEVEL2 = L3.STATIC_LINK_ID  AND L1.LEVEL1 = L2.STATIC_LINK_ID
    AND L1.LEVEL3  = L4.STATIC_LINK_ID AND L1.LEVEL4 = L5.STATIC_LINK_ID  AND L1.LEVEL5  = L6.STATIC_LINK_ID  AND L1.LEVEL6  = L7.STATIC_LINK_ID AND L1.ACTIVE =''Y''';
 
 ORD_BY_QRY := ' )
ORDER BY LEVEL_NUMBER, DISP_SEQ, NLSSORT(L1_NAME, ''NLS_SORT=generic_m''),NLSSORT(L2_NAME, ''NLS_SORT=generic_m'') DESC,NLSSORT(L3_NAME, ''NLS_SORT=generic_m''),NLSSORT(L4_NAME, ''NLS_SORT=generic_m''),NLSSORT(L5_NAME, ''NLS_SORT=generic_m''),NLSSORT(L6_NAME, ''NLS_SORT=generic_m'') ';
 
 FINAL_QRY := QRY1 ||' UNION ' || QRY2 ||' UNION ' || QRY3 ||' UNION ' || QRY4 || ' UNION ' || QRY5 || ' UNION ' || QRY6 || ORD_BY_QRY;
 DBMS_OUTPUT.PUT_LINE('FINAL QRY : ' || FINAL_QRY);
          
    OPEN STATIC_MENU_LIST FOR FINAL_QRY;
END STATIC_MENU_PROC_NEW;
/
-- Static Links Open Same/New table

-- Added 4 Columns to map Pricing branch and ship branch in orders table
ALTER TABLE ORDERS ADD PRICING_BRANCH_ID VARCHAR2(10);
ALTER TABLE ORDERS ADD PRICING_BRANCH_NAME VARCHAR2(50);
ALTER TABLE ORDERS ADD SHIPPING_BRANCH_ID VARCHAR2(10);
ALTER TABLE ORDERS ADD SHIPPING_BRANCH_NAME VARCHAR2(50);

ALTER TABLE AT_ORDERS ADD PRICING_BRANCH_ID VARCHAR2(10);
ALTER TABLE AT_ORDERS ADD PRICING_BRANCH_NAME VARCHAR2(50);
ALTER TABLE AT_ORDERS ADD SHIPPING_BRANCH_ID VARCHAR2(10);
ALTER TABLE AT_ORDERS ADD SHIPPING_BRANCH_NAME VARCHAR2(50);



ALTER TABLE ORDERS ADD BILL_FIRST_NAME VARCHAR2(50);
ALTER TABLE ORDERS ADD BILL_LAST_NAME VARCHAR2(50);
ALTER TABLE ORDERS ADD BILL_SHIP_TO_ID VARCHAR2(10);
ALTER TABLE ORDERS ADD SHIPPING_SHIP_TO_ID VARCHAR2(10);


ALTER TABLE AT_ORDERS ADD BILL_FIRST_NAME VARCHAR2(50);
ALTER TABLE AT_ORDERS ADD BILL_LAST_NAME VARCHAR2(50);
ALTER TABLE AT_ORDERS ADD BILL_SHIP_TO_ID VARCHAR2(10);
ALTER TABLE AT_ORDERS ADD SHIPPING_SHIP_TO_ID VARCHAR2(10);

--------------------------------------------------
ALTER TABLE ORDERS ADD FRIEGHT_IN VARCHAR2(100);
ALTER TABLE AT_ORDERS ADD FRIEGHT_IN VARCHAR2(100);

-- Punchout
alter table punchout_user_login
add (SENDER_ID                  VARCHAR2(2000), 
FROM_DOMAIN                VARCHAR2(2000) ,
TO_DOMAIN                  VARCHAR2(2000) ,
SENDER_DOMAIN              VARCHAR2(2000));


--Punchout
----------------------------------------------------------

alter table orders add SHIPPING_SHIP_TO_NAME varchar2(300);
alter table AT_ORDERS add SHIPPING_SHIP_TO_NAME varchar2(300);

CREATE TABLE EVENT_REGISTRATION_EXTRA_INFO
  (
    EVENT_EXTRA_INFO_ID NUMBER NOT NULL ENABLE,
    PARENT_ID           NUMBER,
    CHILD_ID            NUMBER,
    UPDATED_DATETIME    DATE,
    USER_EDITED         VARCHAR2(50)
  );

CREATE SEQUENCE EVENT_EXTRA_INFO_ID_SEQ MINVALUE 1 MAXVALUE 999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER NOCYCLE ;
--------------------------------------------------------------

ALTER TABLE QUOTE_CART ADD LINE_ITEM_COMMENT VARCHAR2(200 BYTE);

--Solr Item Detail
----------------------------------------------------------
CREATE OR REPLACE FORCE VIEW SOLR_ITEM_DETAILS_VIEW
AS
  SELECT "ITEM_ID",
    "BRAND_NAME",
    "MANUFACTURER_NAME",
    "BRAND_IMAGE",
    "PART_NUMBER",
    "COMPETITOR_PART_NUMBER",
    "CUSTOMER_PART_NUMBER",
    "MANUFACTURER_PART_NUMBER",
    "UPC",
    "SHORT_DESC",
    "ITEM_MARKETING_DESC",
    "ITEM_FEATURES",
    "LONG_DESC1",
    "LONG_DESC2",
    "META_DESC",
    "META_KEYWORD",
    "PAGE_TITLE",
    "IMAGE_ITEM_ID",
    "IMAGE_LIST",
    "LINE_ITEM_ID",
    "DOCUMENTS",
    "VIDEO_ITEM_ID",
    "VIDEOS_LIST",
    "LINK_ITEM_ID",
    "LINKED_ITEMS",
    "ATTR_ITEM_ID",
    "ATTR"
  FROM
    (SELECT IM.ITEM_ID,
      B.BRAND_NAME,
      M.MANUFACTURER_NAME,
      B.BRAND_IMAGE,
      IM.PART_NUMBER,
      IM.COMPETITOR_PART_NUMBER,
      IM.CUSTOMER_PART_NUMBER,
      IM.MANUFACTURER_PART_NUMBER,
      IM.UPC,
      LIM.SHORT_DESC,
      LIM.ITEM_MARKETING_DESC,
      LIM.ITEM_FEATURES,
      LIM.LONG_DESC1,
      LIM.LONG_DESC2,
      LIM.META_DESC,
      LIM.META_KEYWORD,
      LIM.PAGE_TITLE
    FROM ITEM_MASTER IM,
      LOC_ITEM_MASTER LIM,
      MANUFACTURER M,
      BRANDS B
    WHERE IM.ACTIVE!      ='D'
    AND IM.ITEM_ID        =LIM.ITEM_ID(+)
    AND LIM.LOCALE_ID     =1
    AND IM.MANUFACTURER_ID=M.MANUFACTURER_ID
    AND IM.BRAND_ID       =B.BRAND_ID
    ) IG,
    (SELECT IIL.ITEM_ID IMAGE_ITEM_ID,
      '{"images" : ['
      || LISTAGG('{"imageName" : "'
      ||TRIM(II.IMAGE_NAME)
      ||'", "imageType" : "'
      ||II.IMAGE_TYPE
      ||'", "imageCaption" : "'
      ||IIL.CAPTION
      ||'"}', ',') WITHIN GROUP (
    ORDER BY II.IMAGE_TYPE)
      ||']}' IMAGE_LIST
    FROM ITEM_IMAGES II,
      ITEM_IMAGE_LIST IIL
    WHERE II.ITEM_IMAGE_ID=IIL.ITEM_IMAGES_ID
    GROUP BY IIL.ITEM_ID
    ) IMG,
    (SELECT LIM.ITEM_ID LINE_ITEM_ID,
      '{"documents" : ['
      ||LISTAGG('{"docCategoryType" : "'
      || REPLACE(IDC.ITEM_DOCUMENTS_CATEGORY_NAME,'"','\\"')
      ||'", "docName" : "'
      || TRIM(REPLACE(IDS.DOCUMENT_NAME,'"','"'))
      ||'", "docType" : "'
      ||IDS.DOCUMENT_TYPE
      ||'", "docDesc" : "'
      ||NVL(IDL.CAPTION,IDS.DOCUMENT_NAME)
      ||'"}', ',') WITHIN GROUP (
    ORDER BY LIM.LOCALE_ID)
      ||']}' DOCUMENTS
    FROM ITEM_DOCUMENTS_LIST IDL,
      ITEM_DOCUMENTS IDS,
      LOC_ITEM_MASTER LIM,
      ITEM_DOCUMENTS_CATEGORY IDC
    WHERE LIM.LOC_ITEM_ID       =IDL.LOC_ITEM_ID
    AND IDL.ITEM_DOCUMENT_ID    =IDS.ITEM_DOCUMENT_ID
    AND IDL.ITEM_DOC_CATEGORY_ID=IDC.ITEM_DOCUMENTS_CATEGORY_ID(+)
    GROUP BY LIM.ITEM_ID
    ) DOC,
    (SELECT IVL.ITEM_ID VIDEO_ITEM_ID,
      '{"videos" : ['
      ||LISTAGG('{"vedioCaption" : "'
      ||NVL(IVL.VIDEO_CAPTION,IV.VIDEO_NAME)
      ||'", "videoName" : "'
      ||IV.VIDEO_NAME
      ||'", "videoType" : "'
      ||IV.VIDEO_TYPE
      ||'"}',',') WITHIN GROUP (
    ORDER BY IVL.ITEM_VIDEOS_LIST_ID)
      ||']}' VIDEOS_LIST
    FROM ITEM_VIDEOS_LIST IVL,
      ITEM_VIDEOS IV
    WHERE IV.ITEM_VIDEO_ID = IVL.ITEM_VIDEO_ID
    GROUP BY IVL.ITEM_ID
    ) VIDEOS,
    (SELECT IL.LINKED_TO_ITEM_ID LINK_ITEM_ID,
      '{"linkTypes" : ['
      ||LISTAGG('{"itemId" : "'
      ||IL.ITEM_ID
      ||'", "linkTypeName" : "'
      ||ILT.LINK_TYPE_NAME
      ||'"}',',') WITHIN GROUP (
    ORDER BY IL.ITEM_LINK_TYPE_ID)
      ||']}' LINKED_ITEMS
    FROM ITEM_LINKS IL,
      ITEM_LINK_TYPES ILT
    WHERE ILT.ITEM_LINK_TYPE_ID=IL.ITEM_LINK_TYPE_ID
    GROUP BY IL.LINKED_TO_ITEM_ID
    ) LINKS,
    (SELECT Iav.Item_Id Attr_Item_Id,
      '<table>'
      ||Xmlagg((Xmlelement("tr",Xmlelement("td",La.Attribute_Name),Xmlelement("td",':') ,Xmlelement("td",NVL2(Lau.Attribute_Uom,Lav.Attribute_Value
      ||' '
      ||Lau.Attribute_Uom,Lav.Attribute_Value))))
    ORDER BY ICA.DISP_SEQ,LA.ATTRIBUTE_NAME)
      ||'</table>' AS ATTR
    FROM Item_Attribute_Values Iav,
      Loc_Attribute_Values Lav,
      Loc_Attribute_Uoms Lau,
      Loc_Attributes La,
      (SELECT *
      FROM Item_Classification Ic,
        CATEGORY_ATTRIBUTES CA
      WHERE IC.DEFAULT_CATEGORY='Y'
      AND IC.TAXONOMY_TREE_ID  =CA.TAXONOMY_TREE_ID
      ) ICA
    WHERE IAV.ITEM_ID             =ICA.ITEM_ID(+)
    AND IAV.ATTRIBUTE_ID          =ICA.ATTRIBUTE_ID(+)
    AND Iav.Loc_Attribute_Id      =La.Loc_Attribute_Id
    AND La.Locale_Id              =1
    AND Iav.Loc_Attribute_Uom_Id  =Lau.Loc_Attribute_Uom_Id(+)
    AND Iav.Loc_Attribute_Value_Id=Lav.Loc_Attribute_Value_Id
    GROUP BY Iav.Item_Id
    ) ATTR
  WHERE IG.ITEM_ID=IMG.IMAGE_ITEM_ID(+)
  AND IG.ITEM_ID  =DOC.LINE_ITEM_ID(+)
  AND IG.ITEM_ID  =LINKS.LINK_ITEM_ID(+)
  AND IG.ITEM_ID  =ATTR.ATTR_ITEM_ID(+)
  AND IG.ITEM_ID  =VIDEOS.VIDEO_ITEM_ID(+);

----------------------------------------------------------



--Solr Banner List
----------------------------------------------------------

CREATE OR REPLACE FORCE VIEW BANNERS_VIEW
AS
  SELECT NVL2(VL.value_list_id,VL.value_list_id
    ||'_'
    ||b.banner_id,''
    ||b.banner_id) KEY,
    vl.value_list_id,
    vl.value_list_name,
    b.banner_id,
    b.banner_name,
    VL.SCROLLABLE,
    VL.DELAY,
    VL.NUMOFIMGSTOSCROLL,
    VL.DIRECTION,
    VLD.DISP_SEQ,
    B.IMAGE_TYPE,
    b.banner_image_name,
    b.banner_position,
    vld.banner_landing_url,
    b.effective_date,
    b.end_date
  FROM value_list_data VLD,
    values_list VL,
    banners B
  WHERE vl.value_list_id(+)=vld.value_list_id
  AND b.banner_id          =vld.banner_id(+)
  AND NVL(B.STATUS,-1)      !='D';
  
  ---------------------------------------------------------
  
  
  CREATE OR REPLACE FORCE VIEW SOLR_CATALOG_NAV_V2
        AS
WITH T3 AS
  (SELECT TT.TAXONOMY_TREE_ID,
    TT.LEVEL_NUMBER,
    TT.UPDATED_DATETIME LAST_UPDATE,
    TT.TAXONOMY_ID,
    TT.CATEGORY_NAME,
    SUBSTR(SYS_CONNECT_BY_PATH(TT.CATEGORY_NAME, ' > '), 4) PATH,
    SUBSTR(SYS_CONNECT_BY_PATH(TT.CATEGORY_NAME
    ||'{'
    ||TT.TAXONOMY_TREE_ID
    ||'}', ' > '), 4) SOLR_PATH,
    TT.DISP_SEQ,
    TT.CATEGORY_DESC,
    TT.BANNER_ID,
    TT.IMAGE_NAME,
    TT.VALUE_LIST_ID,
    TT.PARENT_TT_ID,
    TT.TOP_BANNER_ID,
    TT.LEFT_BANNER_ID,
    TT.RIGHT_BANNER_ID,
    TT.BOTTOM_BANNER_ID
  FROM TAXONOMY_TREE TT,
    TAXONOMIES T
  WHERE NVL(T.CIMM_OR_ES,'CIMM')                 ='CIMM'
  AND T.TAXONOMY_ID                              =TT.TAXONOMY_ID
    START WITH TT.LEVEL_NUMBER                   =1
    CONNECT BY NOCYCLE PRIOR TT.TAXONOMY_TREE_ID = TT.PARENT_TT_ID
  ORDER SIBLINGS BY DISP_SEQ
  ),
  T1 AS
  (SELECT TO_NUMBER(CONFIG_VALUE) GENERAL_CATALOGID
  FROM SYSTEM_PARAMETERS
  WHERE CONFIG_KEY = 'GENERALCATALOGID'
  ),
  T2 AS
  (SELECT DISTINCT BC2.SUBSET_ID,
    T1.GENERAL_CATALOGID
  FROM BUYING_COMPANY BC2,
    T1
  WHERE BC2.SUBSET_ID          IS NOT NULL
  AND BC2.GENERAL_CATALOG_ACCESS='Y'
  ),
  T4 AS
  (SELECT DISTINCT BC1.SUBSET_ID
  FROM BUYING_COMPANY BC1
  WHERE BC1.SUBSET_ID          IS NOT NULL
  AND BC1.GENERAL_CATALOG_ACCESS='N'
  ),
  T8 AS
  (SELECT DISTINCT SEARCH_IDX,
    TAXONOMY_TREE_ID
  FROM
    ( SELECT DISTINCT 'PH_SEARCH_'
      ||T2.GENERAL_CATALOGID
      ||'_'
      ||T2.SUBSET_ID SEARCH_IDX,
      IC.TAXONOMY_TREE_ID
    FROM ITEM_CLASSIFICATION IC,
      T2,
      ITEM_PRICES IP3
    WHERE IC.ITEM_ID   =IP3.ITEM_ID
    AND IP3.STATUS     ='A'
    AND IP3.SUBSET_ID IN (T2.SUBSET_ID)
    AND T2.SUBSET_ID!  =T2.GENERAL_CATALOGID
    UNION ALL
    SELECT DISTINCT 'PH_SEARCH_'
      ||T2.GENERAL_CATALOGID
      ||'_'
      ||T2.SUBSET_ID SEARCH_IDX,
      IC.TAXONOMY_TREE_ID
    FROM ITEM_CLASSIFICATION IC,
      T2,
      ITEM_PRICES IP3
    WHERE IC.ITEM_ID   =IP3.ITEM_ID
    AND IP3.STATUS     ='A'
    AND IP3.SUBSET_ID IN (T2.GENERAL_CATALOGID)
    AND T2.SUBSET_ID!  =T2.GENERAL_CATALOGID
    UNION ALL
    SELECT DISTINCT 'PH_SEARCH_'
      ||T1.GENERAL_CATALOGID SEARCH_IDX,
      IC.TAXONOMY_TREE_ID
    FROM T1 T1,
      ITEM_CLASSIFICATION IC,
      ITEM_PRICES IP3
    WHERE IC.ITEM_ID =IP3.ITEM_ID
    AND IP3.SUBSET_ID=T1.GENERAL_CATALOGID
    AND IP3.STATUS   ='A'
    UNION ALL
    SELECT DISTINCT 'PH_SEARCH_'
      ||T4.SUBSET_ID SEARCH_IDX,
      IC.TAXONOMY_TREE_ID
    FROM T4 T4,
      ITEM_CLASSIFICATION IC,
      ITEM_PRICES IP1
    WHERE IC.ITEM_ID   =IP1.ITEM_ID
    AND IP1.STATUS     ='A'
    AND IP1.SUBSET_ID IN (T4.SUBSET_ID)
    AND IP1.SUBSET_ID! =
      (SELECT T1.GENERAL_CATALOGID FROM T1
      )
    )
  ),
  T9 AS
  (SELECT DISTINCT SEARCH_IDX,
    TAXONOMY_TREE_ID
  FROM
    (SELECT T8.SEARCH_IDX,
      T3.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3
    WHERE T8.TAXONOMY_TREE_ID=T3.TAXONOMY_TREE_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID                      =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL8                                 IS NOT NULL
    AND T3.LEVEL_NUMBER!                           =8
    AND T12.TAXONOMY_TREE_ID                       =T3.LEVEL8
      CONNECT BY NOCYCLE PRIOR T12.TAXONOMY_TREE_ID=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID                      =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL7                                 IS NOT NULL
    AND T3.LEVEL_NUMBER!                           =7
    AND T12.TAXONOMY_TREE_ID                       =T3.LEVEL7
      CONNECT BY NOCYCLE PRIOR T12.TAXONOMY_TREE_ID=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID                      =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL6                                 IS NOT NULL
    AND T3.LEVEL_NUMBER!                           =6
    AND T12.TAXONOMY_TREE_ID                       =T3.LEVEL6
      CONNECT BY NOCYCLE PRIOR T12.TAXONOMY_TREE_ID=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID                      =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL5                                 IS NOT NULL
    AND T3.LEVEL_NUMBER!                           =5
    AND T12.TAXONOMY_TREE_ID                       =T3.LEVEL5
      CONNECT BY NOCYCLE PRIOR T12.TAXONOMY_TREE_ID=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID                      =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL4                                 IS NOT NULL
    AND T3.LEVEL_NUMBER!                           =4
    AND T12.TAXONOMY_TREE_ID                       =T3.LEVEL4
      CONNECT BY NOCYCLE PRIOR T12.TAXONOMY_TREE_ID=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID            =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL3                       IS NOT NULL
    AND T3.LEVEL_NUMBER!                 =3
    AND T12.TAXONOMY_TREE_ID             =T3.LEVEL3
      CONNECT BY NOCYCLE PRIOR T12.LEVEL3=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID            =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL2                       IS NOT NULL
    AND T3.LEVEL_NUMBER!                 =2
    AND T12.TAXONOMY_TREE_ID             =T3.LEVEL2
      CONNECT BY NOCYCLE PRIOR T12.LEVEL2=T12.PARENT_TT_ID
    UNION ALL
    SELECT T8.SEARCH_IDX,
      T12.TAXONOMY_TREE_ID
    FROM T8,
      TAXONOMY_TREE T3,
      TAXONOMY_TREE T12
    WHERE T8.TAXONOMY_TREE_ID            =T3.TAXONOMY_TREE_ID
    AND T3.LEVEL1                       IS NOT NULL
    AND T3.LEVEL_NUMBER!                 =1
    AND T12.TAXONOMY_TREE_ID             =T3.LEVEL1
      CONNECT BY NOCYCLE PRIOR T12.LEVEL1=T12.PARENT_TT_ID
    )
  )
SELECT T9.SEARCH_IDX,
  TT.TAXONOMY_TREE_ID,
  TT.CATEGORY_NAME,
  TT.LEVEL_NUMBER,
  PATH,
  TT.LAST_UPDATE,
  ROWNUM ID,
  NULL ACTION,
  T9.SEARCH_IDX
  ||'_'
  ||TT.TAXONOMY_TREE_ID KEY,
  TT.TAXONOMY_ID,
  TRIM(SUBSTR(SOLR_PATH, 1, (INSTR(SOLR_PATH, '{', -1)-1))) SOLR_PATH,
  TT.DISP_SEQ,
  TT.CATEGORY_DESC,
  TT.BANNER_ID,
  TT.IMAGE_NAME,
  TT.VALUE_LIST_ID,
  TT.PARENT_TT_ID,
  TT.TOP_BANNER_ID,
  TT.LEFT_BANNER_ID,
  TT.RIGHT_BANNER_ID,
  TT.BOTTOM_BANNER_ID
FROM T9,
  T3 TT
WHERE T9.TAXONOMY_TREE_ID=TT.TAXONOMY_TREE_ID;


----------------------------------------------------------------

CREATE OR REPLACE FORCE VIEW SEARCH_ITEM_MASTER_VIEW_V2
        AS
WITH t1 AS
  (SELECT nvl2(ICV.item_classificaton_id,ICV.item_classificaton_id
    || '||'
    || IM.ITEM_ID,IM.ITEM_ID) KEY,
    ICV.item_classificaton_id,
    im.item_id,
    IM.PARTNUMBER_KEYWORDS,
    im.keywords
    ||'; '
    ||im.partnumber_keywords KEYWORDS,
    im.part_number,
    im.popularity,
    im.manufacturer_id,
    im.brand_id,
    im.manufacturer_part_number,
    im.upc,
    im.display_online,
    im.active,
    IM.HITS,
    m.manufacturer_name,
    b.brand_name,
    ICV.PRODUCT_CATEGORY_ID,
    ICV.PRODUCT_category,
    ICV.LEVEL1_CATEGORY,
    NVL2(ICV.DEFAULT_CATEGORY,ICV.DEFAULT_CATEGORY,'Y') DEFAULT_CATEGORY,
    NVL(lim.short_desc,LIM.INVOICE_DESC) SHORT_DESC,
    ICV.display_priority,
    b.brand_image,
    ii.image_name ITEM_IMAGE,
    ii.image_type,
    EH.EXTERNAL_HITS,
    nvl2(IM.UPDATED_DATETIME,IM.UPDATED_DATETIME,SYSDATE) LAST_UPDATED
  FROM item_master im,
    manufacturer m,
    brands b,
    ITEM_CATEGORY_VIEW ICV,
    loc_item_master lim,
    ITEM_IMAGES II,
    EXTERNAL_HITS EH
  WHERE m.manufacturer_id(+) = im.manufacturer_id
  AND b.brand_id(+)          = im.brand_id
  AND ICV.item_id(+)         = im.item_id
  AND im.item_id             = lim.item_id(+)
  AND lim.locale_id(+)       = 1
  AND ii.item_image_id(+)    = lim.item_image_id
  AND EH.ITEM_ID(+)          = IM.ITEM_ID
  ),
  t2 AS
  (SELECT LISTAGG(iavv.attribute_name
    ||'|~|'
    || iavv.attribute_value
    ||' '
    || iavv.attribute_uom, '}~}') WITHIN GROUP (
  ORDER BY filter_seq) ATTRIBUTE_VALUES ,
    iavv.item_id T2_ITEM_ID,
    ic.item_classificaton_id T2_ITEM_CLASSIFICATION_ID
  FROM iav_view iavv,
    category_attributes ca,
    item_classification ic
  WHERE iavv.attribute_id = ca.attribute_id
  AND ca.filter_enabled   ='Y'
  AND iavv.item_id        = ic.item_id(+)
  AND ic.taxonomy_tree_id = ca.taxonomy_tree_id
  AND iavv.locale_id      =1
  GROUP BY iavv.item_id,
    IC.ITEM_CLASSIFICATON_ID
  ),
  t3 AS
  (SELECT SUBSTR(SYS_CONNECT_BY_PATH(TT.TAXONOMY_TREE_ID,':'),2) CATEGORY_CODE_PATH,
    SUBSTR(SYS_CONNECT_BY_PATH(TT.CATEGORY_NAME, '/*/'), 4) CATEGORY_NAME_PATH,
    TT.TAXONOMY_TREE_ID T3_TAXONOMY_TREE_ID
  FROM TAXONOMY_TREE TT
    START WITH TT.LEVEL_NUMBER                   =1
    CONNECT BY NOCYCLE PRIOR TT.TAXONOMY_TREE_ID = TT.PARENT_TT_ID
  ORDER SIBLINGS BY TT.DISP_SEQ
  )
SELECT KEY,
  ITEM_CLASSIFICATON_ID,
  ITEM_ID,
  PARTNUMBER_KEYWORDS,
  KEYWORDS,
  PART_NUMBER,
  POPULARITY,
  MANUFACTURER_ID,
  BRAND_ID,
  MANUFACTURER_PART_NUMBER,
  UPC,
  DISPLAY_ONLINE,
  ACTIVE,
  MANUFACTURER_NAME,
  BRAND_NAME,
  PRODUCT_CATEGORY_ID,
  PRODUCT_CATEGORY,
  LEVEL1_CATEGORY,
  DEFAULT_CATEGORY,
  SHORT_DESC,
  DISPLAY_PRIORITY,
  BRAND_IMAGE,
  ITEM_IMAGE,
  IMAGE_TYPE,
  LAST_UPDATED,
  ATTRIBUTE_VALUES,
  T2_ITEM_ID,
  T2_ITEM_CLASSIFICATION_ID,
  EXTERNAL_HITS,
  HITS,
  T3.CATEGORY_CODE_PATH,
  t3.CATEGORY_NAME_PATH
FROM T1,
  t2,
  t3
WHERE T1.ITEM_ID            =T2.T2_ITEM_ID(+)
AND T1.ITEM_CLASSIFICATON_ID=T2.T2_ITEM_CLASSIFICATION_ID(+)
AND t1.PRODUCT_CATEGORY_ID  =t3.T3_TAXONOMY_TREE_ID(+);


  ALTER TABLE ORDERS
ADD (
SALES_REP_IN_ID                  VARCHAR2(50), 
SALES_REP_IN_EMAIL                VARCHAR2(100) ,
SALES_REP_OUT_ID                  VARCHAR2(50), 
SALES_REP_OUT_EMAIL                VARCHAR2(100) 
);

ALTER TABLE AT_ORDERS
ADD (
SALES_REP_IN_ID                  VARCHAR2(50), 
SALES_REP_IN_EMAIL                VARCHAR2(100) ,
SALES_REP_OUT_ID                  VARCHAR2(50), 
SALES_REP_OUT_EMAIL                VARCHAR2(100) 
);

CREATE TABLE FORGOT_PASSWORD
  (
    FORGOT_PASSWORD_ID NUMBER NOT NULL ENABLE,
    SECRET_CODE        VARCHAR2(200),
    USER_ID            NUMBER,
    MAIL_SENT_TO       VARCHAR2(100),
    STATUS             VARCHAR2(100),
    UPDATED_DATETIME DATE
  );
CREATE SEQUENCE FORGOT_PASSWORD_SEQ MINVALUE 1 MAXVALUE 999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER NOCYCLE ;



--- Item attributes sql changed

create or replace
PROCEDURE GET_ITEM_DETAILS_IN_USE
(
    VAR_ITEM_PRICE_ID IN NUMBER,
--    VAR_SUBSETID IN NUMBER,
--    VAR_GENERAL_SUBSETID IN NUMBER,
    ITEM_DATA OUT SYS_REFCURSOR,
    ITEM_IMAGES OUT SYS_REFCURSOR,
    ITEM_ATTRIBUTES OUT SYS_REFCURSOR,
    ITEM_DOCUMENTS OUT SYS_REFCURSOR,
    PRODUCT_DATA OUT SYS_REFCURSOR,
    LINKED_ITEMS OUT SYS_REFCURSOR,
    QUERY_RESPONSE OUT NUMBER
)
IS
V_PRODUCT_ID NUMBER;
V_LOC_PRODUCT_ID NUMBER;
V_ITEM_ID NUMBER;
V_LOC_ITEM_ID NUMBER;
V_SUBSET_ID NUMBER;

TEMP_QUERY VARCHAR2(5000);


BEGIN

QUERY_RESPONSE :=1;
SELECT ITEM_ID, LOC_ITEM_ID, PRODUCT_ID,SUBSET_ID INTO V_ITEM_ID, V_LOC_ITEM_ID, V_PRODUCT_ID , V_SUBSET_ID
FROM ITEM_DETAILS_MV WHERE ITEM_PRICE_ID = VAR_ITEM_PRICE_ID;

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:-----SELECT ITEM_ID, LOC_ITEM_ID, PRODUCT_ID FROM ITEM_DETAILS_MV WHERE ITEM_PRICE_ID = '||VAR_ITEM_PRICE_ID);
 

  BEGIN
SELECT LOC_PRODUCT_ID INTO V_LOC_PRODUCT_ID FROM LOC_PRODUCTS WHERE PRODUCT_ID = V_PRODUCT_ID AND LOCALE_ID=1;

 EXCEPTION
      -- IF NOT FOUND SETTING VFOUNDFLAG TO 0
    WHEN no_data_found THEN
      V_LOC_PRODUCT_ID := 0;
    WHEN OTHERS THEN
      V_LOC_PRODUCT_ID := 0;
      END;

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:-----SELECT LOC_PRODUCT_ID FROM LOC_PRODUCTS WHERE PRODUCT_ID = '||V_PRODUCT_ID ||'AND LOCALE_ID=1');

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_DATA----->SELECT ITEM_ID, ITEM_PRICE_ID, BRAND_NAME, BRAND_IMAGE, PART_NUMBER,COMPETITOR_PART_NUMBER,MANUFACTURER_PART_NUMBER, UPC, SHORT_DESC, 
    ITEM_MARKETING_DESC,ITEM_FEATURES, LONG_DESC1, LONG_DESC2, META_DESC, META_KEYWORD, PAGE_TITLE, NET_PRICE, PACK_DESC, SALES_UOM, IMAGE_NAME, IMAGE_TYPE, NOTES
    FROM ITEM_DETAILS_MV WHERE ITEM_PRICE_ID ='||VAR_ITEM_PRICE_ID);


OPEN ITEM_DATA FOR
SELECT  IM.ITEM_ID,
  IP.ITEM_PRICE_ID,
  B.BRAND_ID,
  B.BRAND_NAME,
  B.BRAND_IMAGE,
  M.MANUFACTURER_NAME,
  M.MANUFACTURER_ID,
  M.MANUFACTURER_LOGO,
  IM.PART_NUMBER,
  IM.COMPETITOR_PART_NUMBER,
  IP.CUSTOMER_PART_NUMBER,
  IM.MANUFACTURER_PART_NUMBER,
  IM.UPC,
  NVL(PRODUCT_ID,0) PRODUCT_ID, 
  LIM.SHORT_DESC,
  LIM.ITEM_MARKETING_DESC,
  LIM.ITEM_FEATURES,
  LIM.LONG_DESC1,
  IP.IMAP_PRICE,
  LIM.LONG_DESC2,
  LIM.META_DESC,
  LIM.META_KEYWORD,
  LIM.PAGE_TITLE,
 CASE
      WHEN NVL(IP.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
 IP.NET_PRICE,
 ip.package_flag,
 IP.PACKAGE_QTY,
 IP.DISPLAY_PRICING,
  NVL(IP.PACK_DESC,IM.PACK_DESC) PACK_DESC,
NVL(IP.SALES_UOM,IM.SALES_UOM) SALES_UOM,
NVL(IP.UNSPSC,IM.UNSPSC) UNSPSC,
NVL(IP.IMAP,IM.IMAP_PRICE) IMAP,
  IP.SALES_QTY,
  IP.MATERIAL_GROUP,
  II.IMAGE_NAME,
  II.IMAGE_TYPE,
  INS.NOTES,
  IM.KEYWORDS,
  ICVV.FIELD_VALUE COLLECTION
  FROM ITEM_MASTER IM, LOC_ITEM_MASTER LIM, ITEM_PRICES IP, BRANDS B, MANUFACTURER M, ITEM_IMAGES II, ITEM_NOTES INS,ITEM_CF_VALUES_VIEW ICVV 
  WHERE IP.ITEM_PRICE_ID=VAR_ITEM_PRICE_ID AND IP.ITEM_ID=IM.ITEM_ID  AND  FIELD_NAME(+)='Collections'
  AND ICVV.ITEM_ID(+) = IM.ITEM_ID AND IM.ITEM_ID=LIM.ITEM_ID(+) AND LIM.LOCALE_ID(+)=1 AND LIM.ITEM_IMAGE_ID=II.ITEM_IMAGE_ID(+) 
  AND IM.MANUFACTURER_ID=M.MANUFACTURER_ID AND IM.BRAND_ID=B.BRAND_ID AND IP.NOTE_ID=INS.NOTE_ID(+);    


DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_IMAGES----->SELECT ''ITEM'' IMAGE_FROM,II.IMAGE_NAME IMAGE_NAME,II.IMAGE_TYPE IMAGE_TYPE FROM ITEM_IMAGE_LIST IIL, ITEM_IMAGES II 
    WHERE IIL.ITEM_ID = '||V_ITEM_ID||' AND II.ITEM_IMAGE_ID (+) = IIL.ITEM_IMAGES_ID UNION SELECT ''PRODUCT'' IMAGE_FROM, PI.IMAGE_NAME IMAGE_NAME, 
    PI.IMAGE_TYPE IMAGE_TYPE FROM PRODUCT_IMAGE_LIST PIL, PRODUCT_IMAGES PI WHERE PIL.PRODUCT_ID='||V_PRODUCT_ID||' AND PI.PRODUCT_IMAGES_ID(+) = PIL.PRODUCT_IMAGES_ID' );    

  
open ITEM_IMAGES for
    SELECT 'ITEM' IMAGE_FROM,II.IMAGE_NAME IMAGE_NAME,II.IMAGE_TYPE IMAGE_TYPE,IIL.CAPTION  FROM ITEM_IMAGE_LIST IIL, ITEM_IMAGES II 
    WHERE IIL.ITEM_ID = V_ITEM_ID 
    AND II.ITEM_IMAGE_ID (+) = IIL.ITEM_IMAGES_ID

  UNION

    SELECT 'PRODUCT' IMAGE_FROM, PI.IMAGE_NAME IMAGE_NAME, PI.IMAGE_TYPE IMAGE_TYPE,PI.IMAGE_NAME CAPTION  FROM PRODUCT_IMAGE_LIST PIL, 
    PRODUCT_IMAGES PI WHERE PIL.PRODUCT_ID=V_PRODUCT_ID AND PI.PRODUCT_IMAGES_ID(+) = PIL.PRODUCT_IMAGES_ID;
    
   
   DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_DOCUMENTS----->SELECT ''ITEM'' DOC_FROM, IDOC.DOCUMENT_NAME DOCUMENT_NAME, IDOC.DOCUMENT_TYPE DOCUMENT_TYPE FROM ITEM_DOCUMENTS_LIST IDL, 
    ITEM_DOCUMENTS IDOC WHERE IDL.LOC_ITEM_ID ='||V_LOC_ITEM_ID||' and IDOC.ITEM_DOCUMENT_ID (+) = IDL.ITEM_DOCUMENT_ID 
    UNION 
    SELECT ''PRODUCT'' DOC_FROM, PD.DOC_NAME DOCUMENT_NAME,PD.DOC_TYPE DOCUMENT_TYPE FROM PRODUCT_DOCUMENTS_LIST PDL, 
    PRODUCT_DOCUMENTS PD WHERE PDL.LOC_PRODUCT_ID ='||V_LOC_PRODUCT_ID||' AND PD.PRODUCT_DOCUMENT_ID = PDL.PRODUCT_DOUMENT_ID' );    

OPEN ITEM_DOCUMENTS FOR
    SELECT 'ITEM' DOC_FROM, IDOC.DOCUMENT_NAME DOCUMENT_NAME, IDOC.DOCUMENT_TYPE DOCUMENT_TYPE,nvl2(IDL.CAPTION,IDL.CAPTION,IDOC.DOCUMENT_NAME) DOCUMENT_DESC, IDC.ITEM_DOCUMENTS_CATEGORY_NAME FROM ITEM_DOCUMENTS_LIST IDL, 
    ITEM_DOCUMENTS IDOC, ITEM_DOCUMENTS_CATEGORY IDC WHERE IDL.LOC_ITEM_ID = V_LOC_ITEM_ID and IDOC.ITEM_DOCUMENT_ID = IDL.ITEM_DOCUMENT_ID AND IDC.ITEM_DOCUMENTS_CATEGORY_ID =  IDL.ITEM_DOC_CATEGORY_ID (+)
  UNION
    SELECT 'PRODUCT' DOC_FROM, PD.DOC_NAME DOCUMENT_NAME,PD.DOC_TYPE DOCUMENT_TYPE,PDL.PRODUCT_DOC_DESC DOCUMENT_DESC,''  ITEM_DOCUMENTS_CATEGORY_NAME  FROM PRODUCT_DOCUMENTS_LIST PDL, 
    PRODUCT_DOCUMENTS PD WHERE PDL.LOC_PRODUCT_ID =V_LOC_PRODUCT_ID AND PD.PRODUCT_DOCUMENT_ID = PDL.PRODUCT_DOUMENT_ID;

        

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--PRODUCT_DATA ----->SELECT PRODUCT_NAME,PRODUCT_MARKETING_DESC,PRODUCT_DESC1,PRODUCT_DESC2,PRODUCT_FEATURES,PI.IMAGE_NAME, PI.IMAGE_TYPE
  FROM LOC_PRODUCTS LP, PRODUCT_IMAGES PI WHERE LP.LOC_PRODUCT_ID ='||V_LOC_PRODUCT_ID||' AND PI.PRODUCT_IMAGES_ID (+)= LP.PRODUCT_IMAGES_ID' );    

OPEN PRODUCT_DATA FOR
  SELECT PRODUCT_NAME,PRODUCT_MARKETING_DESC,PRODUCT_DESC1,PRODUCT_DESC2,PRODUCT_FEATURES,PI.IMAGE_NAME, PI.IMAGE_TYPE
  FROM LOC_PRODUCTS LP, PRODUCT_IMAGES PI WHERE LP.LOC_PRODUCT_ID = V_LOC_PRODUCT_ID
  AND PI.PRODUCT_IMAGES_ID (+)= LP.PRODUCT_IMAGES_ID;
  
  
  DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_ATTRIBUTES ----->SELECT IAV.ITEM_ID, IAV.CATEGORY_ATTRIBUTES_ID ,LA.ATTRIBUTE_NAME, LAV.ATTRIBUTE_VALUE, 
        LAU.ATTRIBUTE_UOM, LAVG.ATTRIBUTE_VALUE_GROUP FROM ITEM_ATTRIBUTE_VALUES IAV, 
        LOC_ATTRIBUTE_VALUES LAV, LOC_ATTRIBUTE_UOMS LAU,
      LOC_ATTRIBUTE_VALUE_GROUPS LAVG, LOC_ATTRIBUTES LA
    WHERE IAV.ITEM_ID ='||V_ITEM_ID||'  AND IAV.LOCALE_ID = 1
    and IAV.STATUS = ''A''
    AND IAV.LOC_ATTRIBUTE_ID = LA.LOC_ATTRIBUTE_ID (+)
    AND IAV.LOC_ATTRIBUTE_VALUE_ID = LAV.LOC_ATTRIBUTE_VALUE_ID (+)
    AND IAV.LOC_ATTRIBUTE_UOM_ID = LAU.LOC_ATTRIBUTE_UOM_ID (+)
    AND IAV.LOC_ATTRIBUTE_VALUE_GROUP_ID = LAVG.LOC_ATTRIBUTE_VALUE_GROUP_ID (+)' );    

OPEN ITEM_ATTRIBUTES FOR

  SELECT IAV.ITEM_ID,
  IAV.CATEGORY_ATTRIBUTES_ID ,
  LA.ATTRIBUTE_NAME,
  LAV.ATTRIBUTE_VALUE,
  LAU.ATTRIBUTE_UOM,
  LAVG.ATTRIBUTE_VALUE_GROUP,
  CA.DISP_SEQ
FROM ITEM_ATTRIBUTE_VALUES IAV,
  LOC_ATTRIBUTE_VALUES LAV,
  LOC_ATTRIBUTE_UOMS LAU,
  LOC_ATTRIBUTE_VALUE_GROUPS LAVG,
  LOC_ATTRIBUTES LA,
  ITEM_CLASSIFICATION ITC,
  CATEGORY_ATTRIBUTES CA
WHERE ITC.ITEM_ID                    = V_ITEM_ID
AND ITC.DEFAULT_CATEGORY             = 'Y'
AND IAV.ITEM_ID                      = ITC.ITEM_ID
AND IAV.LOCALE_ID                    = 1
--AND CA.TAXONOMY_TREE_ID              = ITC.TAXONOMY_TREE_ID
--AND IAV.CATEGORY_ATTRIBUTES_ID       = CA.CATEGORY_ATTRIBUTES_ID(+)
AND IAV.LOC_ATTRIBUTE_ID             = LA.LOC_ATTRIBUTE_ID (+)
AND IAV.LOC_ATTRIBUTE_VALUE_ID       = LAV.LOC_ATTRIBUTE_VALUE_ID (+)
AND IAV.LOC_ATTRIBUTE_UOM_ID         = LAU.LOC_ATTRIBUTE_UOM_ID (+)
AND CA.ATTRIBUTE_ID(+)=LA.ATTRIBUTE_ID
AND ITC.TAXONOMY_TREE_ID(+)=CA.TAXONOMY_TREE_ID
AND IAV.LOC_ATTRIBUTE_VALUE_GROUP_ID = LAVG.LOC_ATTRIBUTE_VALUE_GROUP_ID (+)
ORDER BY CA.DISP_SEQ ASC;
    
    DBMS_OUTPUT.PUT_LINE('Linked Item ----->  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, 
          IDMV.IMAGE_TYPE
        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV
        WHERE IL.LINKED_TO_ITEM_ID = '||V_ITEM_ID
       ||' AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
        AND IDMV.ITEM_ID = IL.ITEM_ID
             AND IDMV.SUBSET_ID = '||V_SUBSET_ID); 

OPEN LINKED_ITEMS FOR
  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.ITEM_PRICE_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, IP.SALES_QTY,IP.NET_PRICE,
          IDMV.IMAGE_TYPE
        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV,ITEM_PRICES IP
        WHERE IL.LINKED_TO_ITEM_ID = V_ITEM_ID
        AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
        AND IDMV.ITEM_ID = IL.ITEM_ID
        AND IDMV.SUBSET_ID = V_SUBSET_ID
         AND IP.ITEM_PRICE_ID = IDMV.ITEM_PRICE_ID;

--  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, 
--          IDMV.IMAGE_TYPE, IP.NET_PRICE, IP.SALES_UOM
--        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV, ITEM_PRICES IP
--        WHERE IL.LINKED_TO_ITEM_ID = V_ITEM_ID
--        AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
--        AND IDMV.ITEM_ID = IL.ITEM_ID
--        AND IDMV.SUBSET_ID = VAR_SUBSETID
--        AND IP.ITEM_PRICE_ID = IDMV.ITEM_PRICE_ID
--  
--  UNION
--  
--  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, 
--          IDMV.IMAGE_TYPE, IP.NET_PRICE, IP.SALES_UOM
--        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV, ITEM_PRICES IP
--        WHERE IL.LINKED_TO_ITEM_ID = V_ITEM_ID
--        AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
--        AND IDMV.ITEM_ID = IL.ITEM_ID
--        AND IDMV.SUBSET_ID = VAR_GENERAL_SUBSETID
--        AND IP.ITEM_PRICE_ID = IDMV.ITEM_PRICE_ID
--        AND IDMV.ITEM_ID NOT IN
--        (SELECT ITEM_ID FROM ITEM_DETAILS_MV WHERE SUBSET_ID=VAR_SUBSETID)  ;
EXCEPTION WHEN
  NO_DATA_FOUND THEN
  QUERY_RESPONSE :=0;

END ;

--- item attributes sql changed

-- Aramsco 29 Dec 2014
ALTER TABLE CART ADD ITEM_LEVEL_SHIPVIA VARCHAR2(30);
ALTER TABLE CART ADD ITEM_LEVEL_SHIPVIA_DESC VARCHAR2(30);
ALTER TABLE SAVED_LIST_ITEMS ADD ITEM_LEVEL_SHIPVIA VARCHAR2(30);
ALTER TABLE SAVED_LIST_ITEMS ADD ITEM_LEVEL_SHIPVIA_DESC VARCHAR2(30);
ALTER TABLE QUOTE_CART ADD ITEM_LEVEL_SHIPVIA VARCHAR2(30);
ALTER TABLE QUOTE_CART ADD ITEM_LEVEL_SHIPVIA_DESC VARCHAR2(30);

ALTER TABLE AT_SAVED_LIST_ITEMS ADD ITEM_LEVEL_SHIPVIA VARCHAR2(30);
ALTER TABLE AT_SAVED_LIST_ITEMS ADD ITEM_LEVEL_SHIPVIA_DESC VARCHAR2(30);

-- Aramsco 29 Dec 2014


ALTER TABLE ORDER_ITEMS ADD ITEM_LEVEL_SHIPVIA VARCHAR2(30);
ALTER TABLE ORDER_ITEMS ADD ITEM_LEVEL_SHIPVIA_DESC VARCHAR2(30);
ALTER TABLE AT_ORDER_ITEMS ADD ITEM_LEVEL_SHIPVIA VARCHAR2(30);
ALTER TABLE AT_ORDER_ITEMS ADD ITEM_LEVEL_SHIPVIA_DESC VARCHAR2(30);


-- Get Item Detail In Use 07/01/2015 Start
create or replace PROCEDURE GET_ITEM_DETAILS_IN_USE
(
    VAR_ITEM_PRICE_ID IN NUMBER,
--    VAR_SUBSETID IN NUMBER,
--    VAR_GENERAL_SUBSETID IN NUMBER,
    ITEM_DATA OUT SYS_REFCURSOR,
    ITEM_IMAGES OUT SYS_REFCURSOR,
    ITEM_ATTRIBUTES OUT SYS_REFCURSOR,
    ITEM_DOCUMENTS OUT SYS_REFCURSOR,
    PRODUCT_DATA OUT SYS_REFCURSOR,
    LINKED_ITEMS OUT SYS_REFCURSOR,
    QUERY_RESPONSE OUT NUMBER
)
IS
V_PRODUCT_ID NUMBER;
V_LOC_PRODUCT_ID NUMBER;
V_ITEM_ID NUMBER;
V_LOC_ITEM_ID NUMBER;
V_SUBSET_ID NUMBER;

TEMP_QUERY VARCHAR2(5000);


BEGIN

QUERY_RESPONSE :=1;
SELECT ITEM_ID, LOC_ITEM_ID, PRODUCT_ID,SUBSET_ID INTO V_ITEM_ID, V_LOC_ITEM_ID, V_PRODUCT_ID , V_SUBSET_ID
FROM ITEM_DETAILS_MV WHERE ITEM_PRICE_ID = VAR_ITEM_PRICE_ID;

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:-----SELECT ITEM_ID, LOC_ITEM_ID, PRODUCT_ID FROM ITEM_DETAILS_MV WHERE ITEM_PRICE_ID = '||VAR_ITEM_PRICE_ID);
 

  BEGIN
SELECT LOC_PRODUCT_ID INTO V_LOC_PRODUCT_ID FROM LOC_PRODUCTS WHERE PRODUCT_ID = V_PRODUCT_ID AND LOCALE_ID=1;

 EXCEPTION
      -- IF NOT FOUND SETTING VFOUNDFLAG TO 0
    WHEN no_data_found THEN
      V_LOC_PRODUCT_ID := 0;
    WHEN OTHERS THEN
      V_LOC_PRODUCT_ID := 0;
      END;

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:-----SELECT LOC_PRODUCT_ID FROM LOC_PRODUCTS WHERE PRODUCT_ID = '||V_PRODUCT_ID ||'AND LOCALE_ID=1');

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_DATA----->SELECT ITEM_ID, ITEM_PRICE_ID, BRAND_NAME, BRAND_IMAGE, PART_NUMBER,COMPETITOR_PART_NUMBER,MANUFACTURER_PART_NUMBER, UPC, SHORT_DESC, 
    ITEM_MARKETING_DESC,ITEM_FEATURES, LONG_DESC1, LONG_DESC2, META_DESC, META_KEYWORD, PAGE_TITLE, NET_PRICE, PACK_DESC, SALES_UOM, IMAGE_NAME, IMAGE_TYPE, NOTES
    FROM ITEM_DETAILS_MV WHERE ITEM_PRICE_ID ='||VAR_ITEM_PRICE_ID);


OPEN ITEM_DATA FOR
SELECT  IM.ITEM_ID,
  IP.ITEM_PRICE_ID,
  B.BRAND_ID,
  B.BRAND_NAME,
  B.BRAND_IMAGE,
  M.MANUFACTURER_NAME,
  M.MANUFACTURER_ID,
  M.MANUFACTURER_LOGO,
  IM.PART_NUMBER,
  IM.COMPETITOR_PART_NUMBER,
  IP.CUSTOMER_PART_NUMBER,
  IM.MANUFACTURER_PART_NUMBER,
  IM.UPC,
  NVL(PRODUCT_ID,0) PRODUCT_ID, 
  LIM.SHORT_DESC,
  LIM.ITEM_MARKETING_DESC,
  LIM.ITEM_FEATURES,
  LIM.LONG_DESC1,
  LIM.LONG_DESC2,
  LIM.META_DESC,
  LIM.META_KEYWORD,
  LIM.PAGE_TITLE,
 CASE
      WHEN NVL(IP.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
 IP.NET_PRICE,
 IP.IMAP_PRICE, 
 ip.package_flag,
 IP.PACKAGE_QTY,
 IP.DISPLAY_PRICING,
  NVL(IP.PACK_DESC,IM.PACK_DESC) PACK_DESC,
NVL(IP.SALES_UOM,IM.SALES_UOM) SALES_UOM,
NVL(IP.UNSPSC,IM.UNSPSC) UNSPSC,
NVL(IP.IMAP,IM.IMAP_PRICE) IMAP,
  IP.SALES_QTY,
  IP.MATERIAL_GROUP,
  II.IMAGE_NAME,
  II.IMAGE_TYPE,
  INS.NOTES,
  IM.KEYWORDS,
  ICVV.FIELD_VALUE COLLECTION
  FROM ITEM_MASTER IM, LOC_ITEM_MASTER LIM, ITEM_PRICES IP, BRANDS B, MANUFACTURER M, ITEM_IMAGES II, ITEM_NOTES INS,ITEM_CF_VALUES_VIEW ICVV 
  WHERE IP.ITEM_PRICE_ID=VAR_ITEM_PRICE_ID AND IP.ITEM_ID=IM.ITEM_ID  AND  FIELD_NAME(+)='Collections'
  AND ICVV.ITEM_ID(+) = IM.ITEM_ID AND IM.ITEM_ID=LIM.ITEM_ID(+) AND LIM.LOCALE_ID(+)=1 AND LIM.ITEM_IMAGE_ID=II.ITEM_IMAGE_ID(+) 
  AND IM.MANUFACTURER_ID=M.MANUFACTURER_ID AND IM.BRAND_ID=B.BRAND_ID AND IP.NOTE_ID=INS.NOTE_ID(+);    


DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_IMAGES----->SELECT ''ITEM'' IMAGE_FROM,II.IMAGE_NAME IMAGE_NAME,II.IMAGE_TYPE IMAGE_TYPE FROM ITEM_IMAGE_LIST IIL, ITEM_IMAGES II 
    WHERE IIL.ITEM_ID = '||V_ITEM_ID||' AND II.ITEM_IMAGE_ID (+) = IIL.ITEM_IMAGES_ID UNION SELECT ''PRODUCT'' IMAGE_FROM, PI.IMAGE_NAME IMAGE_NAME, 
    PI.IMAGE_TYPE IMAGE_TYPE FROM PRODUCT_IMAGE_LIST PIL, PRODUCT_IMAGES PI WHERE PIL.PRODUCT_ID='||V_PRODUCT_ID||' AND PI.PRODUCT_IMAGES_ID(+) = PIL.PRODUCT_IMAGES_ID' );    

  
open ITEM_IMAGES for
    SELECT 'ITEM' IMAGE_FROM,II.IMAGE_NAME IMAGE_NAME,II.IMAGE_TYPE IMAGE_TYPE,IIL.CAPTION  FROM ITEM_IMAGE_LIST IIL, ITEM_IMAGES II 
    WHERE IIL.ITEM_ID = V_ITEM_ID 
    AND II.ITEM_IMAGE_ID (+) = IIL.ITEM_IMAGES_ID

  UNION

    SELECT 'PRODUCT' IMAGE_FROM, PI.IMAGE_NAME IMAGE_NAME, PI.IMAGE_TYPE IMAGE_TYPE,PI.IMAGE_NAME CAPTION  FROM PRODUCT_IMAGE_LIST PIL, 
    PRODUCT_IMAGES PI WHERE PIL.PRODUCT_ID=V_PRODUCT_ID AND PI.PRODUCT_IMAGES_ID(+) = PIL.PRODUCT_IMAGES_ID;
    
   
   DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_DOCUMENTS----->SELECT ''ITEM'' DOC_FROM, IDOC.DOCUMENT_NAME DOCUMENT_NAME, IDOC.DOCUMENT_TYPE DOCUMENT_TYPE FROM ITEM_DOCUMENTS_LIST IDL, 
    ITEM_DOCUMENTS IDOC WHERE IDL.LOC_ITEM_ID ='||V_LOC_ITEM_ID||' and IDOC.ITEM_DOCUMENT_ID (+) = IDL.ITEM_DOCUMENT_ID 
    UNION 
    SELECT ''PRODUCT'' DOC_FROM, PD.DOC_NAME DOCUMENT_NAME,PD.DOC_TYPE DOCUMENT_TYPE FROM PRODUCT_DOCUMENTS_LIST PDL, 
    PRODUCT_DOCUMENTS PD WHERE PDL.LOC_PRODUCT_ID ='||V_LOC_PRODUCT_ID||' AND PD.PRODUCT_DOCUMENT_ID = PDL.PRODUCT_DOUMENT_ID' );    

OPEN ITEM_DOCUMENTS FOR
    SELECT 'ITEM' DOC_FROM, IDOC.DOCUMENT_NAME DOCUMENT_NAME, IDOC.DOCUMENT_TYPE DOCUMENT_TYPE,nvl2(IDL.CAPTION,IDL.CAPTION,IDOC.DOCUMENT_NAME) DOCUMENT_DESC, IDC.ITEM_DOCUMENTS_CATEGORY_NAME FROM ITEM_DOCUMENTS_LIST IDL, 
    ITEM_DOCUMENTS IDOC, ITEM_DOCUMENTS_CATEGORY IDC WHERE IDL.LOC_ITEM_ID = V_LOC_ITEM_ID and IDOC.ITEM_DOCUMENT_ID = IDL.ITEM_DOCUMENT_ID AND IDC.ITEM_DOCUMENTS_CATEGORY_ID =  IDL.ITEM_DOC_CATEGORY_ID (+)
  UNION
    SELECT 'PRODUCT' DOC_FROM, PD.DOC_NAME DOCUMENT_NAME,PD.DOC_TYPE DOCUMENT_TYPE,PDL.PRODUCT_DOC_DESC DOCUMENT_DESC,''  ITEM_DOCUMENTS_CATEGORY_NAME  FROM PRODUCT_DOCUMENTS_LIST PDL, 
    PRODUCT_DOCUMENTS PD WHERE PDL.LOC_PRODUCT_ID =V_LOC_PRODUCT_ID AND PD.PRODUCT_DOCUMENT_ID = PDL.PRODUCT_DOUMENT_ID;

        

DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--PRODUCT_DATA ----->SELECT PRODUCT_NAME,PRODUCT_MARKETING_DESC,PRODUCT_DESC1,PRODUCT_DESC2,PRODUCT_FEATURES,PI.IMAGE_NAME, PI.IMAGE_TYPE
  FROM LOC_PRODUCTS LP, PRODUCT_IMAGES PI WHERE LP.LOC_PRODUCT_ID ='||V_LOC_PRODUCT_ID||' AND PI.PRODUCT_IMAGES_ID (+)= LP.PRODUCT_IMAGES_ID' );    

OPEN PRODUCT_DATA FOR
  SELECT PRODUCT_NAME,PRODUCT_MARKETING_DESC,PRODUCT_DESC1,PRODUCT_DESC2,PRODUCT_FEATURES,PI.IMAGE_NAME, PI.IMAGE_TYPE
  FROM LOC_PRODUCTS LP, PRODUCT_IMAGES PI WHERE LP.LOC_PRODUCT_ID = V_LOC_PRODUCT_ID
  AND PI.PRODUCT_IMAGES_ID (+)= LP.PRODUCT_IMAGES_ID;
  
  
  DBMS_OUTPUT.PUT_LINE('GET_ITEM_DETAILS_IN_USE:--ITEM_ATTRIBUTES ----->SELECT IAV.ITEM_ID,
  IAV.CATEGORY_ATTRIBUTES_ID ,
  LA.ATTRIBUTE_NAME,
  LAV.ATTRIBUTE_VALUE,
  LAU.ATTRIBUTE_UOM,
  LAVG.ATTRIBUTE_VALUE_GROUP,
  CA.DISP_SEQ
FROM ITEM_ATTRIBUTE_VALUES IAV,
  LOC_ATTRIBUTE_VALUES LAV,
  LOC_ATTRIBUTE_UOMS LAU,
  LOC_ATTRIBUTE_VALUE_GROUPS LAVG,
  LOC_ATTRIBUTES LA,
  ITEM_CLASSIFICATION ITC,
  CATEGORY_ATTRIBUTES CA
WHERE ITC.ITEM_ID                    = '||V_ITEM_ID||'
AND ITC.DEFAULT_CATEGORY             = ''Y''
AND IAV.ITEM_ID                      = ITC.ITEM_ID
AND IAV.LOCALE_ID                    = 1
--AND CA.TAXONOMY_TREE_ID              = ITC.TAXONOMY_TREE_ID
--AND IAV.CATEGORY_ATTRIBUTES_ID       = CA.CATEGORY_ATTRIBUTES_ID(+)
AND IAV.LOC_ATTRIBUTE_ID             = LA.LOC_ATTRIBUTE_ID (+)
AND IAV.LOC_ATTRIBUTE_VALUE_ID       = LAV.LOC_ATTRIBUTE_VALUE_ID (+)
AND IAV.LOC_ATTRIBUTE_UOM_ID         = LAU.LOC_ATTRIBUTE_UOM_ID (+)
AND CA.ATTRIBUTE_ID(+)=LA.ATTRIBUTE_ID
AND ITC.TAXONOMY_TREE_ID(+)=CA.TAXONOMY_TREE_ID
AND IAV.LOC_ATTRIBUTE_VALUE_GROUP_ID = LAVG.LOC_ATTRIBUTE_VALUE_GROUP_ID (+)
ORDER BY CA.DISP_SEQ ASC;' );    

OPEN ITEM_ATTRIBUTES FOR

  SELECT IAV.ITEM_ID,
  IAV.CATEGORY_ATTRIBUTES_ID ,
  LA.ATTRIBUTE_NAME,
  LAV.ATTRIBUTE_VALUE,
  LAU.ATTRIBUTE_UOM,
  LAVG.ATTRIBUTE_VALUE_GROUP,
  CA.DISP_SEQ
FROM ITEM_ATTRIBUTE_VALUES IAV,
  LOC_ATTRIBUTE_VALUES LAV,
  LOC_ATTRIBUTE_UOMS LAU,
  LOC_ATTRIBUTE_VALUE_GROUPS LAVG,
  LOC_ATTRIBUTES LA,
  ITEM_CLASSIFICATION ITC,
  CATEGORY_ATTRIBUTES CA
WHERE ITC.ITEM_ID                    = V_ITEM_ID
AND ITC.DEFAULT_CATEGORY             = 'Y'
AND IAV.ITEM_ID                      = ITC.ITEM_ID
AND IAV.LOCALE_ID                    = 1
--AND CA.TAXONOMY_TREE_ID              = ITC.TAXONOMY_TREE_ID
--AND IAV.CATEGORY_ATTRIBUTES_ID       = CA.CATEGORY_ATTRIBUTES_ID(+)
AND IAV.LOC_ATTRIBUTE_ID             = LA.LOC_ATTRIBUTE_ID (+)
AND IAV.LOC_ATTRIBUTE_VALUE_ID       = LAV.LOC_ATTRIBUTE_VALUE_ID (+)
AND IAV.LOC_ATTRIBUTE_UOM_ID         = LAU.LOC_ATTRIBUTE_UOM_ID (+)
AND CA.ATTRIBUTE_ID(+)=LA.ATTRIBUTE_ID
AND ITC.TAXONOMY_TREE_ID(+)=CA.TAXONOMY_TREE_ID
AND IAV.LOC_ATTRIBUTE_VALUE_GROUP_ID = LAVG.LOC_ATTRIBUTE_VALUE_GROUP_ID (+)
ORDER BY CA.DISP_SEQ ASC;
    
    DBMS_OUTPUT.PUT_LINE('Linked Item ----->  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, 
          IDMV.IMAGE_TYPE
        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV
        WHERE IL.LINKED_TO_ITEM_ID = '||V_ITEM_ID
       ||' AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
        AND IDMV.ITEM_ID = IL.ITEM_ID
             AND IDMV.SUBSET_ID = '||V_SUBSET_ID); 

OPEN LINKED_ITEMS FOR
  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.ITEM_PRICE_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, IP.SALES_QTY,IP.NET_PRICE,
          IDMV.IMAGE_TYPE
        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV,ITEM_PRICES IP
        WHERE IL.LINKED_TO_ITEM_ID = V_ITEM_ID
        AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
        AND IDMV.ITEM_ID = IL.ITEM_ID
        AND IDMV.SUBSET_ID = V_SUBSET_ID
         AND IP.ITEM_PRICE_ID = IDMV.ITEM_PRICE_ID;

--  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, 
--          IDMV.IMAGE_TYPE, IP.NET_PRICE, IP.SALES_UOM
--        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV, ITEM_PRICES IP
--        WHERE IL.LINKED_TO_ITEM_ID = V_ITEM_ID
--        AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
--        AND IDMV.ITEM_ID = IL.ITEM_ID
--        AND IDMV.SUBSET_ID = VAR_SUBSETID
--        AND IP.ITEM_PRICE_ID = IDMV.ITEM_PRICE_ID
--  
--  UNION
--  
--  SELECT ILT.LINK_TYPE_NAME,IDMV.ITEM_ID,IDMV.SHORT_DESC, IDMV.IMAGE_NAME, 
--          IDMV.IMAGE_TYPE, IP.NET_PRICE, IP.SALES_UOM
--        FROM ITEM_LINKS IL, ITEM_LINK_TYPES ILT, ITEM_DETAILS_MV IDMV, ITEM_PRICES IP
--        WHERE IL.LINKED_TO_ITEM_ID = V_ITEM_ID
--        AND ILT.ITEM_LINK_TYPE_ID = IL.ITEM_LINK_TYPE_ID
--        AND IDMV.ITEM_ID = IL.ITEM_ID
--        AND IDMV.SUBSET_ID = VAR_GENERAL_SUBSETID
--        AND IP.ITEM_PRICE_ID = IDMV.ITEM_PRICE_ID
--        AND IDMV.ITEM_ID NOT IN
--        (SELECT ITEM_ID FROM ITEM_DETAILS_MV WHERE SUBSET_ID=VAR_SUBSETID)  ;
EXCEPTION WHEN
  NO_DATA_FOUND THEN
  QUERY_RESPONSE :=0;

END ;

-- Get Item Detail In Use End 07/01/2015


-- Manufaccturer name added to procedure 08-01-2015
create or replace
PROCEDURE GET_FEATURED_PRODUCTS_IN_USE 
(
  VAR_SUBSETID IN NUMBER,
  VAR_GENERAL_SUBSETID IN NUMBER,
  FEATURED_PRODUCTS OUT SYS_REFCURSOR,
   QUERY_RESPONSE OUT NUMBER
)
IS

  FP_QRY VARCHAR2(2000);
  FP_QRY2 VARCHAR2(2000);
  
BEGIN

QUERY_RESPONSE := 1;
  
IF VAR_SUBSETID >0 THEN
  FP_QRY :=
  'SELECT ITEM_ID,ITEM_PRICE_ID,PART_NUMBER,MANUFACTURER_PART_NUMBER,BRAND_NAME,MANUFACTURER_NAME,
        SHORT_DESC,NET_PRICE,SALES_UOM,PACK_DESC,IMAGE_NAME,UPC,IMAGE_TYPE,MIN_ORDER_QTY,ORDER_QTY_INTERVAL,PAGE_TITLE from item_details_mv where item_price_id in 
(select item_price_id from item_prices where is_featured_product =''Y'' and subset_id =' || VAR_SUBSETID ||')';
END IF;
  

IF VAR_GENERAL_SUBSETID>0 THEN
    FP_QRY2 := 'select ITEM_ID,ITEM_PRICE_ID,PART_NUMBER,MANUFACTURER_PART_NUMBER,BRAND_NAME,MANUFACTURER_NAME,
                SHORT_DESC,NET_PRICE,SALES_UOM,PACK_DESC,IMAGE_NAME,UPC,IMAGE_TYPE,MIN_ORDER_QTY,ORDER_QTY_INTERVAL,PAGE_TITLE from item_details_mv idmv where idmv.item_price_id in
              (select item_price_id from item_prices where is_featured_product =''Y'' and subset_id ='|| VAR_GENERAL_SUBSETID||
              ') and item_price_id not in (select item_price_id from item_prices where is_featured_product =''Y'' and subset_id ='
              || VAR_SUBSETID || ')';
  IF LENGTH(FP_QRY) >0 THEN
    FP_QRY:= FP_QRY || ' UNION ' || FP_QRY2;
  ELSE
    FP_QRY:= FP_QRY2;
  END IF;
END IF;
dbms_output.put_line('FINAL QUERY:  ' || FP_QRY); 
  OPEN FEATURED_PRODUCTS FOR FP_QRY;
  
IF FEATURED_PRODUCTS%NOTFOUND THEN
QUERY_RESPONSE :=0;
END IF;
  
END GET_FEATURED_PRODUCTS_IN_USE;

-- Manufaccturer name added to procedure 08-01-2015

--Required By Date for Marks 08-01-2015 Start
ALTER TABLE AT_ORDER_ITEMS ADD ITEMLEVEL_REQUIREDBYDATE VARCHAR2(30);
ALTER TABLE ORDER_ITEMS ADD ITEMLEVEL_REQUIREDBYDATE VARCHAR2(30);
ALTER TABLE CART ADD ITEMLEVEL_REQUIREDBYDATE VARCHAR2(30);
ALTER TABLE AT_CART ADD ITEMLEVEL_REQUIREDBYDATE VARCHAR2(30);
ALTER TABLE QUOTE_CART ADD ITEMLEVEL_REQUIREDBYDATE VARCHAR2(30);
--Required By Date for Marks 08-01-2015 End



-- Ship Via tables
 CREATE TABLE SHIP_VIA 
   (	SHIP_VIA_ID NUMBER NOT NULL ENABLE, 
	SHIP_VIA_CODE VARCHAR2(100 BYTE) NOT NULL ENABLE, 
	SHIP_VIA_NAME VARCHAR2(500 BYTE) NOT NULL ENABLE, 
	DISP_SEQ NUMBER
   );

CREATE TABLE SHIP_VIA_DELIVERY_TYPE 
   (	SHIP_TYPE_ID NUMBER NOT NULL ENABLE, 
	SHIP_DELIVERY_ID NUMBER NOT NULL ENABLE, 
	SHIP_DELIVERY_TYPE VARCHAR2(20 BYTE)
  );
  
  CREATE TABLE SHIP_VIA_METHODS 
   (	SHIP_VIA_METHOD_ID NUMBER NOT NULL ENABLE, 
	SHIP_DELIVERY_ID NUMBER, 
	SHIP_VIA_ID NUMBER
   );
   
   CREATE TABLE SHIP_VIA_VALUES 
   (	SHIP_VIA_VALUE_ID NUMBER NOT NULL ENABLE, 
	SHIP_VIA_CODE VARCHAR2(20 BYTE), 
	SHIP_VIA_DESCRIPTION VARCHAR2(50 BYTE), 
	SHIP_DELIVERY_ID NUMBER, 
	SHIP_METHOD VARCHAR2(10 BYTE)
  );
-- Ship Via tables

  
-- For toll free number in warehouse table  12-01-2015
ALTER TABLE WAREHOUSE ADD TOLL_FREE_NUMBER VARCHAR2(20);
ALTER TABLE AT_WAREHOUSE ADD TOLL_FREE_NUMBER VARCHAR2(20);
-- For toll free number in warehouse table 

ALTER TABLE SAVED_LIST_ITEMS ADD ITEMLEVEL_REQUIREDBYDATE VARCHAR2(30);
ALTER TABLE AT_SAVED_LIST_ITEMS ADD ITEMLEVEL_REQUIREDBYDATE VARCHAR2(30);

-- For Weingeatz 19 jan 2015
ALTER TABLE ship_via ADD SITE_ID number;
ALTER TABLE SHIP_VIA_DELIVERY_TYPE ADD SITE_ID number;
ALTER TABLE SHIP_VIA_METHODS ADD SITE_ID number;
ALTER TABLE SHIP_VIA_VALUES ADD SITE_ID number;
ALTER TABLE ship_via ADD SHIPPING_CODE VARCHAR2(20);
-- For Weingeatz 19 jan 2015

--CATALOG_ID added for Aramsco 12/02/2015 Start
CREATE OR REPLACE FORCE VIEW  ITEM_DETAILS_MV AS 
  SELECT IM.ITEM_ID,
    IP.SUBSET_ID,
    IP.ITEM_PRICE_ID,
    IP.CUSTOMER_PART_NUMBER,
    LIM.LOC_ITEM_ID,
    IM.PRODUCT_ID,
    IM.BRAND_ID,
    B.BRAND_NAME,
    B.BRAND_IMAGE,
    M.MANUFACTURER_NAME,
    IM.PART_NUMBER,
    IM.COMPETITOR_PART_NUMBER,
    IM.MANUFACTURER_PART_NUMBER,
    IM.MANUFACTURER_ID,
    IM.UPC,
    IM.PACKAGE_QTY,
    LIM.LOCALE_ID,
    LIM.SHORT_DESC,
    LIM.LONG_DESC1,
    LIM.LONG_DESC2,
    LIM.ITEM_MARKETING_DESC,
    LIM.ITEM_FEATURES,
    LIM.META_DESC,
    LIM.META_KEYWORD,
    LIM.PAGE_TITLE,
    LIM.INVOICE_DESC,
    IP.NET_PRICE,
    IP.PACK_DESC,
    CF.CATALOG_ID,
    CASE
      WHEN NVL(IP.MIN_ORDER_QTY,1) < 2
      THEN NVL(IM.MIN_ORDER_QTY,1)
      WHEN NVL(IP.MIN_ORDER_QTY,1) > 1
      THEN NVL(IP.MIN_ORDER_QTY,1)
    END MIN_ORDER_QTY,
    CASE
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) < 2
      THEN NVL(IM.ORDER_QTY_INTERVAL,1)
      WHEN NVL(IP.ORDER_QTY_INTERVAL,1) > 1
      THEN NVL(IP.ORDER_QTY_INTERVAL,1)
    END ORDER_QTY_INTERVAL,
    NVL(IP.SALES_UOM,IM.SALES_UOM) SALES_UOM,
    IP.MATERIAL_GROUP,
    IP.UNSPSC,
    II.IMAGE_NAME,
    II.IMAGE_TYPE,
    INOT.NOTES,
    GI.IS_GOLDENITEM,
    IM.ROWID IM_ROWID,
    LIM.ROWID LIM_ROWID,
    IP.ROWID IP_ROWID,
    II.ROWID II_ROWID,
    B.ROWID B_ROWID,
    INOT.ROWID INOT_ROWID
  FROM ITEM_MASTER IM,
    LOC_ITEM_MASTER LIM,
    ITEM_PRICES IP,
    ITEM_IMAGES II,
    BRANDS b,
    MANUFACTURER M,
    ITEM_NOTES INOT,
    GOLDEN_ITEMS GI,
    (SELECT IM.ITEM_ID,NVL(LCFV.TEXT_FIELD_VALUE,LCFV.NUMERIC_FIELD_VALUE) CATALOG_ID FROM ITEM_CUSTOM_FIELD_VALUES ICFV,LOC_CUSTOM_FIELD_VALUES LCFV,ITEM_MASTER IM ,CUSTOM_FIELDS CF WHERE IM.ITEM_ID=ICFV.ITEM_ID AND ICFV.LOC_CUSTOM_FIELD_VALUE_ID=LCFV.LOC_CUSTOM_FIELD_VALUE_ID AND ICFV.CUSTOM_FIELD_ID= CF.CUSTOM_FIELD_ID and CF.FIELD_NAME = 'Catalog_ID') CF
  WHERE IM.ACTIVE       ='Y'
  AND LIM.ITEM_ID(+)    =IM.ITEM_ID
  AND LIM.ITEM_IMAGE_ID = II.ITEM_IMAGE_ID(+)
  AND IP.ITEM_ID        =IM.ITEM_ID(+)
  AND IP.STATUS         ='A'
  AND IP.NOTE_ID        = INOT.NOTE_ID(+)
  AND IM.BRAND_ID       = B.BRAND_ID(+)
  AND IM.MANUFACTURER_ID= M.MANUFACTURER_ID(+)
  AND GI.ITEM_ID(+)     = IM.ITEM_ID
  AND CF.ITEM_ID(+)                      = IM.ITEM_ID;
  
--CATALOG_ID added for Aramsco 12/02/2015 END
ALTER TABLE CART ADD CATALOG_ID VARCHAR2(30);
ALTER TABLE AT_CART ADD CATALOG_ID VARCHAR2(30);
ALTER TABLE QUOTE_CART ADD CATALOG_ID VARCHAR2(30);
ALTER TABLE AT_QUOTE_CART ADD CATALOG_ID VARCHAR2(30);
ALTER TABLE ORDER_ITEMS ADD CATALOG_ID VARCHAR2(30);
ALTER TABLE AT_ORDER_ITEMS ADD CATALOG_ID VARCHAR2(30);
ALTER TABLE SAVED_LIST_ITEMS ADD CATALOG_ID VARCHAR2(30);
ALTER TABLE AT_SAVED_LIST_ITEMS ADD CATALOG_ID VARCHAR2(30);

-- For Cimm2 Touch 26Feb 2015

ALTER TABLE
   STATIC_PAGES
ADD
   (
      PAGE_TYPE             VARCHAR2(10),
      HEADER             VARCHAR2(50),
      FOOTER             VARCHAR2(50),
      HOME_PAGE_ICON             VARCHAR2(1)
   );
   
   
   ALTER TABLE
   AT_STATIC_PAGES
ADD
   (
      PAGE_TYPE             VARCHAR2(10),
      HEADER             VARCHAR2(50),
      FOOTER             VARCHAR2(50),
      HOME_PAGE_ICON             VARCHAR2(1)
   );
 -- For Cimm2 Touch 26Feb 2015
-- Hazardious Material and Warehouse ID to Order Table 13/03/2015
ALTER TABLE ORDER_ITEMS ADD HAZARDIOUS_MATERIAL VARCHAR2(1);
ALTER TABLE ORDERS ADD WAREHOUSE_CODE VARCHAR2(20);
ALTER TABLE CART ADD BRAND VARCHAR2(200 BYTE);
ALTER TABLE CART ADD PART_NUMBER VARCHAR2(200 BYTE);
ALTER TABLE CART ADD PRICE VARCHAR2(200 BYTE);
ALTER TABLE CART ADD MANUFACTURER VARCHAR2(200 BYTE);
ALTER TABLE cart ADD SHORT_DESCRIPTION VARCHAR2(200 byte);
ALTER TABLE CART ADD GET_PRICE_FROM VARCHAR2(200 BYTE);
-- Bronto Integration

   CREATE TABLE "BRONTO_ABANDONED_CART" 
   (	"USER_ID" NUMBER NOT NULL ENABLE, 
	"CART_ID" NUMBER, 
	"UPDATED_TIME" DATE, 
	"SECRET_KEY" VARCHAR2(50 BYTE), 
	"EMAIL_STATUS" VARCHAR2(1 BYTE) DEFAULT 'N', 
	"KEY_STATUS" VARCHAR2(1 BYTE) DEFAULT 'A', 
	"USER_SUBSET" NUMBER, 
	"SESSIONID" VARCHAR2(50 BYTE), 
	"CART_PROCESSED" VARCHAR2(1 BYTE) DEFAULT 'N', 
	 CONSTRAINT "BRONTO_ABANDONED_CART_UK1" UNIQUE ("USER_ID", "KEY_STATUS", "EMAIL_STATUS", "SECRET_KEY")
     )
     
--April 1st 2015     
ALTER TABLE order_items ADD DISCOUNT_TYPE VARCHAR2(200 BYTE);
ALTER TABLE order_items ADD DISCOUNT_COUPON_CODE VARCHAR2(200 BYTE);
ALTER TABLE order_items ADD DISCOUNT_PERCENTAGE number;
ALTER TABLE order_items ADD DISCOUNT_AMOUNT number;


ALTER TABLE ORDERS ADD DISCOUNT_TYPE VARCHAR2(200 BYTE);
ALTER TABLE ORDERS ADD DISCOUNT_COUPON_CODE VARCHAR2(200 BYTE);
ALTER TABLE ORDERS ADD DISCOUNT_PERCENTAGE number;
ALTER TABLE ORDERS ADD DISCOUNT_AMOUNT number;

ALTER TABLE AT_ORDERS ADD DISCOUNT_TYPE VARCHAR2(200 BYTE);
ALTER TABLE AT_ORDERS ADD DISCOUNT_COUPON_CODE VARCHAR2(200 BYTE);
ALTER TABLE AT_ORDERS ADD DISCOUNT_PERCENTAGE number;
ALTER TABLE AT_ORDERS ADD DISCOUNT_AMOUNT number;

-- April 3rd 2015
ALTER TABLE SAVED_LIST_ITEMS ADD BRAND VARCHAR2(200 BYTE);
ALTER TABLE SAVED_LIST_ITEMS ADD PART_NUMBER VARCHAR2(200 BYTE);
ALTER TABLE SAVED_LIST_ITEMS ADD PRICE VARCHAR2(200 BYTE);
ALTER TABLE SAVED_LIST_ITEMS ADD MANUFACTURER VARCHAR2(200 BYTE);
ALTER TABLE SAVED_LIST_ITEMS ADD SHORT_DESCRIPTION VARCHAR2(200 byte);
ALTER TABLE SAVED_LIST_ITEMS ADD GET_PRICE_FROM VARCHAR2(200 BYTE);
 
 
ALTER TABLE AT_SAVED_LIST_ITEMS ADD BRAND VARCHAR2(200 BYTE);
ALTER TABLE AT_SAVED_LIST_ITEMS ADD PART_NUMBER VARCHAR2(200 BYTE);
ALTER TABLE AT_SAVED_LIST_ITEMS ADD PRICE VARCHAR2(200 BYTE);
ALTER TABLE AT_SAVED_LIST_ITEMS ADD MANUFACTURER VARCHAR2(200 BYTE);
ALTER TABLE AT_SAVED_LIST_ITEMS ADD SHORT_DESCRIPTION VARCHAR2(200 byte);
ALTER TABLE AT_SAVED_LIST_ITEMS ADD GET_PRICE_FROM VARCHAR2(200 BYTE);

ALTER TABLE QUOTE_CART ADD BRAND VARCHAR2(200 BYTE);
ALTER TABLE QUOTE_CART ADD PART_NUMBER VARCHAR2(200 BYTE);
ALTER TABLE QUOTE_CART ADD PRICE VARCHAR2(200 BYTE);
ALTER TABLE QUOTE_CART ADD MANUFACTURER VARCHAR2(200 BYTE);
ALTER TABLE QUOTE_CART ADD SHORT_DESCRIPTION VARCHAR2(200 BYTE);
ALTER TABLE QUOTE_CART ADD GET_PRICE_FROM VARCHAR2(200 BYTE);


ALTER TABLE AT_QUOTE_CART ADD BRAND VARCHAR2(200 BYTE);
ALTER TABLE AT_QUOTE_CART ADD PART_NUMBER VARCHAR2(200 BYTE);
ALTER TABLE AT_QUOTE_CART ADD PRICE VARCHAR2(200 BYTE);
ALTER TABLE AT_QUOTE_CART ADD MANUFACTURER VARCHAR2(200 BYTE);
ALTER TABLE AT_QUOTE_CART ADD SHORT_DESCRIPTION VARCHAR2(200 BYTE);
ALTER TABLE AT_QUOTE_CART ADD GET_PRICE_FROM VARCHAR2(200 BYTE);



-- Pay outstanding invoice payment April 14 2015

CREATE TABLE OUTSTANDING_ORDER_PAYMENT 
(
  OUTSTANDING_ORDER_ID NUMBER NOT NULL 
, ERP_ORDER_ID VARCHAR2(20) 
, ORDER_AMOUNT NUMBER 
, CUSTOMER_NUMBER VARCHAR2(20) 
, UPDATED_DATE_TIME DATE 
, PAYMENT_STATUS VARCHAR2(20) 
, PAYMENT_TRANSACTION_ID VARCHAR2(20) 
, PAYMENT_AUTH_CODE VARCHAR2(20) 
, PAYMENT_REFRENCE_NUMBER VARCHAR2(20) 
, PAYMENT_APPROVAL_MESSAGE VARCHAR2(20) 
, CONSTRAINT OUTSTANDING_ORDER_PAYMENT_PK PRIMARY KEY 
  (
    OUTSTANDING_ORDER_ID 
  )
  ENABLE 
);

ALTER TABLE OUTSTANDING_ORDER_PAYMENT ADD STAGE_CODE VARCHAR2(10 BYTE);
ALTER TABLE OUTSTANDING_ORDER_PAYMENT ADD APPROVED_AMOUNT number;
ALTER TABLE OUTSTANDING_ORDER_PAYMENT ADD CARD_NUMBER VARCHAR2(20);

CREATE SEQUENCE OUTSTANDING_ORDER_ID_SEQ INCREMENT BY 1 START WITH 1 CACHE 20;

create or replace
TRIGGER OUTSTANDING_ORDER_ID_TRG  
BEFORE INSERT ON OUTSTANDING_ORDER_PAYMENT FOR EACH ROW BEGIN
 SELECT OUTSTANDING_ORDER_ID_SEQ.nextval INTO :NEW.OUTSTANDING_ORDER_ID FROM DUAL;
END;
-- Pay outstanding invoice payment April 14 2015

ALTER TABLE ORDERS MODIFY SHIP_METHOD_ID VARCHAR2(50);
ALTER TABLE AT_ORDERS MODIFY SHIP_METHOD_ID VARCHAR2(50);

-- For Tims Cimm2BCentral

ALTER TABLE ORDERS ADD ORDER_ERP_ID VARCHAR2(100);
ALTER TABLE AT_ORDERS ADD ORDER_ERP_ID VARCHAR2(100);

-- For Tims Cimm2BCentral

ALTER TABLE ORDERS ADD (
	DISCOUNT_PERCENTAGE                     NUMBER(3,4) ,                                                                                                                                                                                 
	DISCOUNT_COUPON_CODE                    VARCHAR2(50) ,                                                                                                                                                                                 
	DISCOUNT_TYPE                           VARCHAR2(50) ,
);
-- For SX order Suffix
ALTER TABLE ORDERS ADD ORDER_SUFFIX VARCHAR2(10);
ALTER TABLE AT_ORDERS ADD ORDER_SUFFIX VARCHAR2(10);
-- For SX order Suffix


-- For Mc MC alter
ALTER TABLE
   CIMM_USERS
ADD
   (
      ACCOUNT_MANAGER             VARCHAR2(50),
      CLOSEST_BRANCH             VARCHAR2(50)
   );
   
ALTER TABLE
   AT_CIMM_USERS
ADD
   (
      ACCOUNT_MANAGER             VARCHAR2(50),
      CLOSEST_BRANCH             VARCHAR2(50)
   );
   
ALTER TABLE Orders ADD ERP_ORDER_MESSAGE VARCHAR2(500);
ALTER TABLE AT_Orders ADD ERP_ORDER_MESSAGE VARCHAR2(500);
-- For Mc MC 

--Credit Applicatio for MC-MC
CREATE TABLE CREDIT_APPLICATION_DETAILS
  (
    CUSTOMER_CREDIT_APPLICATION_ID    NUMBER NOT NULL ENABLE,
    USER_ID    NUMBER NOT NULL ENABLE,
    DATE_ON_APPLICATION VARCHAR2(10),
    BUSINESS_NAME VARCHAR2(35),
    BUSINESS_PHONE VARCHAR2(15),
    BUSINESS_FAX VARCHAR2(15),
    BUSINESS_ADDRESS1 VARCHAR2(250),
    BUSINESS_ADDRESS2 VARCHAR2(250),
    BUSINESS_CITY VARCHAR2(30),
    BUSINESS_STATE VARCHAR2(30),
    BUSINESS_ZIPCODE VARCHAR2(10),
    SHIPPING_ADDRESS1 VARCHAR2(250),
    SHIPPING_ADDRESS2 VARCHAR2(250),
    SHIPPING_CITY VARCHAR2(30),
    SHIPPING_STATE VARCHAR2(30),
    SHIPPING_ZIPCODE VARCHAR2(10),
    LEGAL_STRUCTURE_TYPE VARCHAR2(15),
    BUSINESS_TYPE VARCHAR2(50),
    DIVISION_OF VARCHAR2(100),
    SUBSIDIARY_OF VARCHAR2(100),
    FEDERAL_ID_NUMBER VARCHAR2(50),
    SALES_TAX_STATUS VARCHAR2(10),
    EXEMPTION_CERTIFICATE_NAME VARCHAR2(500),
    PREFERRED_METHOD_OF_INVOICES VARCHAR2(30),
    INVOICE_EMAIL_ADDRESS VARCHAR2(50),
    INVOICE_FAX_NUMBER VARCHAR2(30),
    INVOICE_EDI_CONTACT_NAME VARCHAR2(30),
    INVOICE_EDI_EMAIL_ADDRESS VARCHAR2(50),
    DATE_BUSINESS_COMMENCED VARCHAR2(50), 
    NUMBER_OF_EMPLOYEES NUMBER,
    CREDIT_LIMIT_REQUESTED VARCHAR2(20),
    AP_CONTACT_PERSON_OR_EMAIL VARCHAR2(50),
    DECLARATION_NAME VARCHAR2(50),
    DECLARATION_EMAIL_ADDRESS VARCHAR2(50),
    DECLARATION_TITLE VARCHAR2(50),
    DECLARATION_DATE VARCHAR2(15),
    FINANCIAL_STATEMENT VARCHAR2(10),
    FINANCIAL_STATEMENT_FILE_NAME VARCHAR2(500),
    UPDATED_DATE_TIME DATE
  );
  
   CREATE TABLE PRINCIPAL_OFFICERS
  (
      PRINCIPAL_OFFICERS_ID NUMBER NOT NULL ENABLE,
      CUSTOMER_CREDIT_APPLICATION_ID    NUMBER NOT NULL ENABLE,
      USER_ID    NUMBER NOT NULL ENABLE,
      PRINCIPAL_OFFICER_NAMES VARCHAR2(100),
      PRINCIPAL_OFFICER_TITLES VARCHAR2(100), 
      UPDATED_DATE_TIME DATE
  );
  CREATE TABLE TRADE_REFERENCE
  (
      TRADE_REFERENCE_ID NUMBER NOT NULL ENABLE, 
      CUSTOMER_CREDIT_APPLICATION_ID NUMBER NOT NULL ENABLE,
      USER_ID    NUMBER NOT NULL ENABLE,
      TRADE_REFERENCE_NAME VARCHAR2(100),
      TRADE_REFERENCE_PHONE VARCHAR2(15),
      TRADE_REFERENCE_FAX VARCHAR(15),
      TRADE_REFERENCE_EMAIL VARCHAR2(30),
      UPDATED_DATE_TIME DATE
  );
    
  CREATE TABLE BANK_REFERENCE
  (
      BANK_REFERENCE_ID NUMBER NOT NULL ENABLE, 
      CUSTOMER_CREDIT_APPLICATION_ID NUMBER NOT NULL ENABLE,
      USER_ID    NUMBER NOT NULL ENABLE,
      BANK_NAME VARCHAR2(50),
      BANK_TELEPHONE_NUMBER VARCHAR2(50),
      BANK_FAX_NUMBER VARCHAR2(50),
      BANK_CONTACT_NAME VARCHAR2(50),
      BANK_ACCOUNT_OR_LOAN_NUMBER VARCHAR2(50),
      UPDATED_DATE_TIME DATE
  );
  ALTER TABLE CREDIT_APPLICATION_DETAILS MODIFY (CREDIT_LIMIT_REQUESTED VARCHAR2(20));
  
  CREATE SEQUENCE CREDIT_APPLICATION_ID_SEQ INCREMENT BY 1 START WITH 1 CACHE 20;
  CREATE SEQUENCE PRINCIPAL_OFFICERS_ID_SEQ INCREMENT BY 1 START WITH 1 CACHE 20;
  CREATE SEQUENCE TRADE_REFERENCE_ID_SEQ INCREMENT BY 1 START WITH 1 CACHE 20;
  CREATE SEQUENCE BANK_REFERENCE_ID_SEQ INCREMENT BY 1 START WITH 1 CACHE 20;
  
  
  CREATE OR REPLACE
  TRIGGER PRINCIPAL_OFFICERS_ID_TRG  
  BEFORE INSERT ON PRINCIPAL_OFFICERS FOR EACH ROW BEGIN
   SELECT PRINCIPAL_OFFICERS_ID_SEQ.nextval INTO :NEW.PRINCIPAL_OFFICERS_ID FROM DUAL;
  END;
  
  CREATE OR REPLACE
  TRIGGER TRADE_REFERENCE_ID_TRG  
  BEFORE INSERT ON TRADE_REFERENCE FOR EACH ROW BEGIN
   SELECT TRADE_REFERENCE_ID_SEQ.nextval INTO :NEW.TRADE_REFERENCE_ID FROM DUAL;
  END;
  
  CREATE OR REPLACE
  TRIGGER BANK_REFERENCE_ID_TRG  
  BEFORE INSERT ON BANK_REFERENCE FOR EACH ROW BEGIN
   SELECT BANK_REFERENCE_ID_SEQ.nextval INTO :NEW.BANK_REFERENCE_ID FROM DUAL;
  END;
  --Credit Applicatio for MC-MC
  
ALTER TABLE order_items ADD UNITS_PER_STOCKING_STRING VARCHAR2(10 BYTE);
ALTER TABLE order_items ADD UNITS_PER_STOCKING number;

ALTER TABLE at_order_items ADD UNITS_PER_STOCKING_STRING VARCHAR2(10 BYTE);
ALTER TABLE at_order_items ADD UNITS_PER_STOCKING number;


-- pay pal checkout
ALTER TABLE Orders ADD PAYPAL_TOKEN VARCHAR2(200);
ALTER TABLE AT_Orders ADD PAYPAL_TOKEN VARCHAR2(200);

ALTER TABLE Orders ADD PAYPAL_PAYER_ID VARCHAR2(200);
ALTER TABLE AT_Orders ADD PAYPAL_PAYER_ID VARCHAR2(200);

-- pay pal checkout


-- Customer part number fromSX for Ship tos
ALTER TABLE
   CUSTOMER_PART_NUMBERS
ADD
   (
      SHIP_TO_ID             VARCHAR2(50),
      RECORD_TYPE             VARCHAR2(10),
      RECORD_DESCRIPTION             VARCHAR2(20)
   );
   
ALTER TABLE
   AT_CUSTOMER_PART_NUMBERS
ADD
   (
      SHIP_TO_ID             VARCHAR2(50),
      RECORD_TYPE             VARCHAR2(10),
       RECORD_DESCRIPTION             VARCHAR2(20)
   );
-- Customer part number fromSX for Ship tos


ALTER TABLE CART ADD UOM VARCHAR2(100 byte);
ALTER TABLE CART ADD ITEM_TYPE VARCHAR2(100 byte);


ALTER TABLE SAVED_LIST_ITEMS ADD UOM VARCHAR2(100 byte);
ALTER TABLE AT_SAVED_LIST_ITEMS ADD UOM VARCHAR2(100 byte);


-- 05 june 2015
ALTER TABLE ORDER_ITEMS ADD CART_ID number;
ALTER TABLE at_ORDER_ITEMS ADD CART_ID number;
-- 05 june 2015

CREATE TABLE APPLIED_DISCOUNT_COUPON_DATA
  (
    DISCOUNT_ID    NUMBER NOT NULL ENABLE,
    ORDER_ID     NUMBER,
    DISCOUNT_AMOUNT VARCHAR2(100 BYTE),
    DISCOUNT_PERCENTAGE VARCHAR2(3 CHAR),
    COUPON_CODE VARCHAR2(200 CHAR),
	DISCOUNT_TYPE VARCHAR2(200 CHAR),
    UPDATED_DATETIME DATE,
    USER_ID number(10,0)
);
CREATE SEQUENCE APPLIED_COUPON_DATA_SEQ MINVALUE 1 MAXVALUE 999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE ;

ALTER TABLE SAVED_LIST_ITEMS ADD LINE_ITEM_COMMENT VARCHAR2(200);
ALTER TABLE SAVED_LIST_ITEMS ADD AT_LINE_ITEM_COMMENT VARCHAR2(200);


ALTER TABLE BRONTO_ABANDONED_CART ADD BEF0RE_LOGIN VARCHAR2(1);

CREATE TABLE ABANDONED_CART AS SELECT * FROM BRONTO_ABANDONED_CART;
DROP TABLE BRONTO_ABANDONED_CART;


ALTER TABLE ORDERS ADD BILL_COMPANY_NAME VARCHAR2(200);
ALTER TABLE ORDERS ADD SHIP_COMPANY_NAME VARCHAR2(200);
ALTER TABLE order_items ADD LEAD_TIME VARCHAR2(100);
ALTER TABLE AT_ORDER_ITEMS ADD LEAD_TIME VARCHAR2(100);

CREATE TABLE REDIRECTS_FROM_CATALOG
  (
    WEB_ID VARCHAR2(200 CHAR),
    PART_NUMBER VARCHAR2(200 CHAR),
    UPDATED_DATETIME DATE
);
ALTER TABLE ORDERS ADD DELIVERY_FEE VARCHAR2(200);
ALTER TABLE AT_ORDERS ADD DELIVERY_FEE VARCHAR2(200);

alter table orders add (GAS_PO_NUMBER varchar2(200));
alter table at_orders add (GAS_PO_NUMBER varchar2(200));

alter table order_items add (MANUFACTURER varchar2(100));
alter table at_order_items add (MANUFACTURER varchar2(100));

UPDATE SYSTEM_PARAMETERS SET CONFIG_KEY = 'CYLINDER_BALANCE_DETAILS_URL' WHERE CONFIG_KEY = 'CYLINDER_BALANCE_SUMMARY';
UPDATE SYSTEM_PARAMETERS SET CONFIG_KEY = 'CYLINDER_BALANCE_GROUP_URL' WHERE CONFIG_KEY = 'CYLINDER_BALANCE_DETAILS';

ALTER TABLE BUYING_COMPANY ADD TEMP_GUID VARCHAR(100);
ALTER TABLE BC_ADDRESS_BOOK ADD SHIP_TO_NAME VARCHAR(255);
ALTER TABLE BUYING_COMPANY ADD SHIP_TO_ID VARCHAR(255);
ALTER TABLE AT_BC_ADDRESS_BOOK ADD SHIP_TO_NAME VARCHAR(255);
ALTER TABLE AT_BUYING_COMPANY ADD SHIP_TO_ID VARCHAR(255);


ALTER TABLE  ORDER_ITEMS ADD LIST_PRICE NUMBER;
ALTER TABLE  AT_ORDER_ITEMS ADD LIST_PRICE NUMBER ;


ALTER TABLE  ORDER_ITEMS ADD CALL_FOR_PRICE VARCHAR2(1) ;
ALTER TABLE  AT_ORDER_ITEMS ADD CALL_FOR_PRICE VARCHAR2(1) ;

 ALTER TABLE CART ADD MIN_ORDER_QTY NUMBER;
 ALTER TABLE CART ADD ITEM_WEIGHT decimal(16,5);
 ALTER TABLE CART ADD UNITS decimal(16,5);
 create table REMEMBERME
(
UIID varchar(100),
USERNAME varchar(100),
PASSWORD varchar(100)
)
 
 /* Budget Scripts Start*/
 CREATE TABLE BUDGETS
  (
    BUDGET_ID    NUMBER NOT NULL ENABLE,
    BUDGET_NAME     VARCHAR2(100 CHAR),
    FROM_DATE              DATE,
    TO_DATE         DATE,
    BUDGET_PERIOD VARCHAR2(50 CHAR),
    BUYING_COMPANY_ID        NUMBER
  );
  
  CREATE SEQUENCE BUDGETS_ID_SEQ MINVALUE 1 MAXVALUE 999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE ;
  ALTER TABLE BUDGETS ADD (
  CONSTRAINT BUDGET_pk PRIMARY KEY (BUDGET_ID));
  
  create or replace TRIGGER BUDGET_TRIGGER 
BEFORE INSERT ON BUDGETS 
FOR EACH ROW

BEGIN
  SELECT BUDGETS_ID_SEQ.NEXTVAL
  INTO   :new.BUDGET_ID
  FROM   dual;
END;


CREATE TABLE BUDGET_DETAILS
  (
    BUDGET_DETAILS_ID NUMBER NOT NULL ENABLE,
    BUDGET_NAME VARCHAR2(100 CHAR),
    FROM_DATE DATE,
    TO_DATE DATE,
    BUDGET_TYPE VARCHAR2(50 CHAR),
    MAPPING_ID VARCHAR2(100 CHAR),
    AMOUNT NUMBER,
    SPENT NUMBER,
    BUDGET_ID NUMBER
  );
  CREATE SEQUENCE BUDGET_DETAILS_ID_SEQ MINVALUE 1 MAXVALUE 999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE ;
  ALTER TABLE BUDGET_DETAILS ADD (
  CONSTRAINT BUDGET_DETAILS_PK PRIMARY KEY (BUDGET_DETAILS_ID));
  create or replace TRIGGER BUDGET_DETAILS_TRIGGER 
BEFORE INSERT ON BUDGET_DETAILS 
FOR EACH ROW

BEGIN
  SELECT BUDGET_DETAILS_ID_SEQ.NEXTVAL
  INTO   :new.BUDGET_DETAILS_ID
  FROM   dual;
END;
 /* Budget Scripts End*/
 ALTER TABLE WAREHOUSE ADD
(
DESCRIPTION                         VARCHAR2(100),  
WILL_CALL                           VARCHAR2(10),   
OFFICE                              VARCHAR2(5),    
CUSTOMER_EXPERIENCE_CENTER          VARCHAR2(5),    
TRAINING                            VARCHAR2(5),    
STOCKING_LOCATION                   VARCHAR2(5),    
FULL_COUNTER                        VARCHAR2(5),    
MOTOR_SHOP                          VARCHAR2(5),    
ROCKWELL_AUTOMATION                 VARCHAR2(5),    
LOCATIONS_ACTIVE                    VARCHAR2(10)   
 )